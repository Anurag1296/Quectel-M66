
APPGS3MDM32A01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .initdata     0000002c  102c7040  102c7040  00007040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 text          000056a8  102c706c  102c706c  0000706c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text.Ql_GPIO_Init 00000078  102cc714  102cc714  0000c714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text.Ql_GPIO_SetLevel 00000068  102cc78c  102cc78c  0000c78c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .text.Ql_MEM_Alloc 00000078  102cc7f4  102cc7f4  0000c7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .text.Ql_MEM_Free 00000074  102cc86c  102cc86c  0000c86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text.ql_InitVFunc 000000d8  102cc8e0  102cc8e0  0000c8e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .text.ocpu_main 000000f0  102cc9b8  102cc9b8  0000c9b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .text.proc_reserved2 00000070  102ccaa8  102ccaa8  0000caa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .text.ril_StopATTimer 00000034  102ccb18  102ccb18  0000cb18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .text.Callback_OnATTimer 0000004c  102ccb4c  102ccb4c  0000cb4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .text.CallBack_SerialPort_Hdlr 00000384  102ccb98  102ccb98  0000cb98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .text.proc_reserved1 00000200  102ccf1c  102ccf1c  0000cf1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text.Ql_RIL_SendATCmd 00000260  102cd11c  102cd11c  0000d11c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.Ql_RIL_WriteDataToCore 00000024  102cd37c  102cd37c  0000d37c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.Ql_atof 00000098  102cd3a0  102cd3a0  0000d3a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.Ql_strcpy 000000a0  102cd438  102cd438  0000d438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.Ql_strncpy 00000088  102cd4d8  102cd4d8  0000d4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.Ql_strlen 00000078  102cd560  102cd560  0000d560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.Ql_strcmp 00000068  102cd5d8  102cd5d8  0000d5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.Ql_strncmp 00000070  102cd640  102cd640  0000d640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.Ql_memset 00000088  102cd6b0  102cd6b0  0000d6b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.Ql_memcpy 00000088  102cd738  102cd738  0000d738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.Ql_strstr 00000080  102cd7c0  102cd7c0  0000d7c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.Ql_toupper 00000008  102cd840  102cd840  0000d840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.Ql_atoi 00000084  102cd848  102cd848  0000d848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.Ql_Sleep 00000074  102cd8cc  102cd8cc  0000d8cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.Ql_GetSDKVer 00000064  102cd940  102cd940  0000d940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.Ql_OS_GetMessage 00000060  102cd9a4  102cd9a4  0000d9a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.Ql_OS_SendMessage 00000078  102cda04  102cda04  0000da04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.Ql_OS_CreateMutex 00000054  102cda7c  102cda7c  0000da7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.Ql_OS_TakeMutex 00000054  102cdad0  102cdad0  0000dad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.Ql_OS_GiveMutex 00000054  102cdb24  102cdb24  0000db24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.Ql_OS_CreateEvent 00000054  102cdb78  102cdb78  0000db78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.Ql_OS_WaitEvent 00000068  102cdbcc  102cdbcc  0000dbcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.Ql_OS_SetEvent 00000068  102cdc34  102cdc34  0000dc34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.Ql_Timer_Register 00000070  102cdc9c  102cdc9c  0000dc9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.Ql_Timer_Start 00000070  102cdd0c  102cdd0c  0000dd0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.Ql_Timer_Stop 00000060  102cdd7c  102cdd7c  0000dd7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.Ql_UART_Register 00000070  102cdddc  102cdddc  0000dddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.Ql_UART_Open 00000070  102cde4c  102cde4c  0000de4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.Ql_UART_Write 00000070  102cdebc  102cdebc  0000debc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.Ql_UART_Read 00000070  102cdf2c  102cdf2c  0000df2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.Ql_UART_GetPinStatus 00000068  102cdf9c  102cdf9c  0000df9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.Ql_UART_SendEscap 00000060  102ce004  102ce004  0000e004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .rodata       00000b09  102ce064  102ce064  0000e064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 46 .rodata.str1.4 00000a54  102ceb70  102ceb70  0000eb70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 47 .rodata.str1.1 000004f0  102cf5c4  102cf5c4  0000f5c4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 48 .data         00000050  f03d2000  102cfab8  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 49 .bss          000011a4  f03d2050  102cfb08  00012050  2**3
                  ALLOC
 50 .debug_info   0000abe8  00000000  00000000  00012050  2**0
                  CONTENTS, READONLY, DEBUGGING
 51 .debug_abbrev 00001c10  00000000  00000000  0001cc38  2**0
                  CONTENTS, READONLY, DEBUGGING
 52 .debug_loc    00005b03  00000000  00000000  0001e848  2**0
                  CONTENTS, READONLY, DEBUGGING
 53 .debug_aranges 000001f8  00000000  00000000  0002434b  2**0
                  CONTENTS, READONLY, DEBUGGING
 54 .debug_macro  00000cac  00000000  00000000  00024543  2**0
                  CONTENTS, READONLY, DEBUGGING
 55 .debug_line   00002f96  00000000  00000000  000251ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 56 .debug_str    00007480  00000000  00000000  00028185  2**0
                  CONTENTS, READONLY, DEBUGGING
 57 .comment      00000030  00000000  00000000  0002f605  2**0
                  CONTENTS, READONLY
 58 .ARM.attributes 0000002b  00000000  00000000  0002f635  2**0
                  CONTENTS, READONLY
 59 .debug_frame  00000f50  00000000  00000000  0002f660  2**2
                  CONTENTS, READONLY, DEBUGGING
 60 .debug_ranges 000003c0  00000000  00000000  000305b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section text:

102c706c <Ql_RIL_AT_GetErrCode>:
static s32 m_iErrCode = 0; // Is used to record the specific error code
                            // 0 indicates success in executing AT
                            // -1 indicats failure in executing AT
                            // other value indicates the specific error code after executing AT failed.
                            //   you can usually find the meaning of error code in ATC document.
s32 Ql_RIL_AT_GetErrCode(void) {return m_iErrCode;}
102c706c:	e59f3004 	ldr	r3, [pc, #4]	; 102c7078 <Ql_RIL_AT_GetErrCode+0xc>
102c7070:	e5930000 	ldr	r0, [r3]
102c7074:	e12fff1e 	bx	lr
102c7078:	f03d2050 	.word	0xf03d2050

102c707c <Ql_RIL_AT_SetErrCode>:
//
// Developer can call this API to set the error code when resolving the response for AT.
s32 Ql_RIL_AT_SetErrCode(s32 errCode) {m_iErrCode = errCode;}
102c707c:	e59f2008 	ldr	r2, [pc, #8]	; 102c708c <Ql_RIL_AT_SetErrCode+0x10>
102c7080:	e5820000 	str	r0, [r2]
102c7084:	e1a00003 	mov	r0, r3
102c7088:	e12fff1e 	bx	lr
102c708c:	f03d2050 	.word	0xf03d2050

102c7090 <Default_atRsp_callback>:
* Return:  
*               RIL_ATRSP_SUCCESS : AT command executed successfully.
*               RIL_ATRSP_FAILED : AT command executed failed.
******************************************************************************/
s32 Default_atRsp_callback(char* line, u32 len, void* userdata)
{
102c7090:	e92d4070 	push	{r4, r5, r6, lr}
    if (Ql_RIL_FindLine(line, len, "OK"))// find <CR><LF>OK<CR><LF>,OK<CR><LF>, <CR>OK<CR>£¬<LF>OK<LF>
102c7094:	e59f20a8 	ldr	r2, [pc, #168]	; 102c7144 <Default_atRsp_callback+0xb4>
102c7098:	e59f40a8 	ldr	r4, [pc, #168]	; 102c7148 <Default_atRsp_callback+0xb8>
* Return:  
*               RIL_ATRSP_SUCCESS : AT command executed successfully.
*               RIL_ATRSP_FAILED : AT command executed failed.
******************************************************************************/
s32 Default_atRsp_callback(char* line, u32 len, void* userdata)
{
102c709c:	e1a05000 	mov	r5, r0
102c70a0:	e1a06001 	mov	r6, r1
    if (Ql_RIL_FindLine(line, len, "OK"))// find <CR><LF>OK<CR><LF>,OK<CR><LF>, <CR>OK<CR>£¬<LF>OK<LF>
102c70a4:	e12fff34 	blx	r4
102c70a8:	e3500000 	cmp	r0, #0
102c70ac:	0a000003 	beq	102c70c0 <Default_atRsp_callback+0x30>
    {
        m_iErrCode = RIL_ATRSP_SUCCESS;
102c70b0:	e59f3094 	ldr	r3, [pc, #148]	; 102c714c <Default_atRsp_callback+0xbc>
102c70b4:	e3a00000 	mov	r0, #0
102c70b8:	e5830000 	str	r0, [r3]
        return  RIL_ATRSP_SUCCESS;
102c70bc:	e8bd8070 	pop	{r4, r5, r6, pc}
    }
    else if (Ql_RIL_FindLine(line, len, "ERROR")) // find <CR><LF>ERROR<CR><LF>, <CR>ERROR<CR>£¬<LF>ERROR<LF>
102c70c0:	e1a00005 	mov	r0, r5
102c70c4:	e1a01006 	mov	r1, r6
102c70c8:	e59f2080 	ldr	r2, [pc, #128]	; 102c7150 <Default_atRsp_callback+0xc0>
102c70cc:	e12fff34 	blx	r4
102c70d0:	e3500000 	cmp	r0, #0
102c70d4:	1a000016 	bne	102c7134 <Default_atRsp_callback+0xa4>
    {
        m_iErrCode = RIL_ATRSP_FAILED;
        return  RIL_ATRSP_FAILED;
    }
    else if (Ql_RIL_FindString(line, len, "+CME ERROR:") || 
102c70d8:	e1a00005 	mov	r0, r5
102c70dc:	e1a01006 	mov	r1, r6
102c70e0:	e59f206c 	ldr	r2, [pc, #108]	; 102c7154 <Default_atRsp_callback+0xc4>
102c70e4:	e59f406c 	ldr	r4, [pc, #108]	; 102c7158 <Default_atRsp_callback+0xc8>
102c70e8:	e12fff34 	blx	r4
102c70ec:	e3500000 	cmp	r0, #0
102c70f0:	1a000007 	bne	102c7114 <Default_atRsp_callback+0x84>
              Ql_RIL_FindString(line, len, "+CMS ERROR:"))
102c70f4:	e1a00005 	mov	r0, r5
102c70f8:	e1a01006 	mov	r1, r6
102c70fc:	e59f2058 	ldr	r2, [pc, #88]	; 102c715c <Default_atRsp_callback+0xcc>
102c7100:	e12fff34 	blx	r4
    else if (Ql_RIL_FindLine(line, len, "ERROR")) // find <CR><LF>ERROR<CR><LF>, <CR>ERROR<CR>£¬<LF>ERROR<LF>
    {
        m_iErrCode = RIL_ATRSP_FAILED;
        return  RIL_ATRSP_FAILED;
    }
    else if (Ql_RIL_FindString(line, len, "+CME ERROR:") || 
102c7104:	e3500000 	cmp	r0, #0
102c7108:	1a000001 	bne	102c7114 <Default_atRsp_callback+0x84>
              Ql_RIL_FindString(line, len, "+CMS ERROR:"))
    {
        Ql_sscanf(line, "%*[^:]: %d\r\n", &m_iErrCode);
        return  RIL_ATRSP_FAILED;
    }
    return RIL_ATRSP_CONTINUE; //continue wait
102c710c:	e3a00001 	mov	r0, #1
}
102c7110:	e8bd8070 	pop	{r4, r5, r6, pc}
        return  RIL_ATRSP_FAILED;
    }
    else if (Ql_RIL_FindString(line, len, "+CME ERROR:") || 
              Ql_RIL_FindString(line, len, "+CMS ERROR:"))
    {
        Ql_sscanf(line, "%*[^:]: %d\r\n", &m_iErrCode);
102c7114:	e59f3044 	ldr	r3, [pc, #68]	; 102c7160 <Default_atRsp_callback+0xd0>
102c7118:	e1a00005 	mov	r0, r5
102c711c:	e5933000 	ldr	r3, [r3]
102c7120:	e59f103c 	ldr	r1, [pc, #60]	; 102c7164 <Default_atRsp_callback+0xd4>
102c7124:	e59f2020 	ldr	r2, [pc, #32]	; 102c714c <Default_atRsp_callback+0xbc>
102c7128:	e12fff33 	blx	r3
        return  RIL_ATRSP_FAILED;
102c712c:	e3e00000 	mvn	r0, #0
102c7130:	e8bd8070 	pop	{r4, r5, r6, pc}
        m_iErrCode = RIL_ATRSP_SUCCESS;
        return  RIL_ATRSP_SUCCESS;
    }
    else if (Ql_RIL_FindLine(line, len, "ERROR")) // find <CR><LF>ERROR<CR><LF>, <CR>ERROR<CR>£¬<LF>ERROR<LF>
    {
        m_iErrCode = RIL_ATRSP_FAILED;
102c7134:	e59f3010 	ldr	r3, [pc, #16]	; 102c714c <Default_atRsp_callback+0xbc>
102c7138:	e3e00000 	mvn	r0, #0
102c713c:	e5830000 	str	r0, [r3]
        return  RIL_ATRSP_FAILED;
102c7140:	e8bd8070 	pop	{r4, r5, r6, pc}
102c7144:	102ceb70 	.word	0x102ceb70
102c7148:	102cbf6c 	.word	0x102cbf6c
102c714c:	f03d2050 	.word	0xf03d2050
102c7150:	102ceb74 	.word	0x102ceb74
102c7154:	102ceb7c 	.word	0x102ceb7c
102c7158:	102cbee0 	.word	0x102cbee0
102c715c:	102ceb98 	.word	0x102ceb98
102c7160:	f03d31f0 	.word	0xf03d31f0
102c7164:	102ceb88 	.word	0x102ceb88

102c7168 <AtRsp_QBTCONND_Hdlr>:
    Ql_sprintf(strAT, "AT+QBTCONND=%s,%d,\"%s\"", btMacAddr, mode, pinCode);
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), AtRsp_QBTCONND_Hdlr, NULL, 0);
}

static s32 AtRsp_QBTCONND_Hdlr(char* line, u32 len, void* userData)
{
102c7168:	e92d4008 	push	{r3, lr}
    if (Ql_RIL_FindLine(line, len, "OK"))
102c716c:	e59f2010 	ldr	r2, [pc, #16]	; 102c7184 <AtRsp_QBTCONND_Hdlr+0x1c>
102c7170:	e59f3010 	ldr	r3, [pc, #16]	; 102c7188 <AtRsp_QBTCONND_Hdlr+0x20>
102c7174:	e12fff33 	blx	r3
        return  RIL_ATRSP_SUCCESS;
    }else{
        //todo
        return RIL_ATRSP_CONTINUE;
    }
}
102c7178:	e2700001 	rsbs	r0, r0, #1
102c717c:	33a00000 	movcc	r0, #0
102c7180:	e8bd8008 	pop	{r3, pc}
102c7184:	102ceb70 	.word	0x102ceb70
102c7188:	102cbf6c 	.word	0x102cbf6c

102c718c <BT_DevMngmt_Clean>:



// Clean the scanned bt devices
static void BT_DevMngmt_Clean(void)
{
102c718c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
102c7190:	e59f4028 	ldr	r4, [pc, #40]	; 102c71c0 <BT_DevMngmt_Clean+0x34>
    
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
    {
        if (m_arrBTDev[i] != NULL)
        {
            Ql_MEM_Free((void *)m_arrBTDev[i]);
102c7194:	e59f7028 	ldr	r7, [pc, #40]	; 102c71c4 <BT_DevMngmt_Clean+0x38>
extern u32 Ql_GenHash(char* strSrc, u32 len);



// Clean the scanned bt devices
static void BT_DevMngmt_Clean(void)
102c7198:	e2845078 	add	r5, r4, #120	; 0x78
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
    {
        if (m_arrBTDev[i] != NULL)
        {
            Ql_MEM_Free((void *)m_arrBTDev[i]);
            m_arrBTDev[i] = NULL;
102c719c:	e3a06000 	mov	r6, #0
{
    u16 i;
    
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
    {
        if (m_arrBTDev[i] != NULL)
102c71a0:	e4940004 	ldr	r0, [r4], #4
102c71a4:	e3500000 	cmp	r0, #0
102c71a8:	0a000001 	beq	102c71b4 <BT_DevMngmt_Clean+0x28>
        {
            Ql_MEM_Free((void *)m_arrBTDev[i]);
102c71ac:	e12fff37 	blx	r7
            m_arrBTDev[i] = NULL;
102c71b0:	e5046004 	str	r6, [r4, #-4]
// Clean the scanned bt devices
static void BT_DevMngmt_Clean(void)
{
    u16 i;
    
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c71b4:	e1540005 	cmp	r4, r5
102c71b8:	1afffff8 	bne	102c71a0 <BT_DevMngmt_Clean+0x14>
        {
            Ql_MEM_Free((void *)m_arrBTDev[i]);
            m_arrBTDev[i] = NULL;
        }
    }
}
102c71bc:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
102c71c0:	f03d2058 	.word	0xf03d2058
102c71c4:	102cc86c 	.word	0x102cc86c

102c71c8 <ATRsp_QBTSTATE_Hdlr>:

    return RIL_ATRSP_CONTINUE; //continue wait
}

static s32 ATRsp_QBTSTATE_Hdlr(char* line, u32 len, void* param)
{
102c71c8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
102c71cc:	e1a07002 	mov	r7, r2
102c71d0:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    char* pHead = Ql_RIL_FindString(line, len, "+QBTSTATE:"); //continue wait
102c71d4:	e59f5464 	ldr	r5, [pc, #1124]	; 102c7640 <ATRsp_QBTSTATE_Hdlr+0x478>
102c71d8:	e59f2464 	ldr	r2, [pc, #1124]	; 102c7644 <ATRsp_QBTSTATE_Hdlr+0x47c>

    return RIL_ATRSP_CONTINUE; //continue wait
}

static s32 ATRsp_QBTSTATE_Hdlr(char* line, u32 len, void* param)
{
102c71dc:	e1a06000 	mov	r6, r0
102c71e0:	e1a08001 	mov	r8, r1
    char* pHead = Ql_RIL_FindString(line, len, "+QBTSTATE:"); //continue wait
102c71e4:	e12fff35 	blx	r5
    bool ret = FALSE ;
    char profile_name[40] = {0};
    static bool is_first_prompt = TRUE;
	s32 status = -1;
102c71e8:	e3e04000 	mvn	r4, #0

static s32 ATRsp_QBTSTATE_Hdlr(char* line, u32 len, void* param)
{
    char* pHead = Ql_RIL_FindString(line, len, "+QBTSTATE:"); //continue wait
    bool ret = FALSE ;
    char profile_name[40] = {0};
102c71ec:	e3a03000 	mov	r3, #0
102c71f0:	e58d3010 	str	r3, [sp, #16]
102c71f4:	e58d3014 	str	r3, [sp, #20]
102c71f8:	e58d3018 	str	r3, [sp, #24]
102c71fc:	e58d301c 	str	r3, [sp, #28]
102c7200:	e58d3020 	str	r3, [sp, #32]
102c7204:	e58d3024 	str	r3, [sp, #36]	; 0x24
102c7208:	e58d3028 	str	r3, [sp, #40]	; 0x28
102c720c:	e58d302c 	str	r3, [sp, #44]	; 0x2c
102c7210:	e58d3030 	str	r3, [sp, #48]	; 0x30
102c7214:	e58d3034 	str	r3, [sp, #52]	; 0x34
    static bool is_first_prompt = TRUE;
	s32 status = -1;
102c7218:	e58d400c 	str	r4, [sp, #12]
    ST_BT_DevInfo* pstrNewBtDev = NULL;

    if (pHead)
102c721c:	e250a000 	subs	sl, r0, #0
102c7220:	0a0000d5 	beq	102c757c <ATRsp_QBTSTATE_Hdlr+0x3b4>
    {
        // +QBTSTATE:0,1,"H60-L01",F4E3FBE47920
        // +QBTSTATE:1,2,"H60-L01",F4E3FBE47920,SPP

		if(is_first_prompt)
102c7224:	e59f541c 	ldr	r5, [pc, #1052]	; 102c7648 <ATRsp_QBTSTATE_Hdlr+0x480>
102c7228:	e5d53000 	ldrb	r3, [r5]
102c722c:	e3530000 	cmp	r3, #0
102c7230:	0a000010 	beq	102c7278 <ATRsp_QBTSTATE_Hdlr+0xb0>
		{
		    if(NULL != param)
102c7234:	e3570000 	cmp	r7, #0
102c7238:	0a000005 	beq	102c7254 <ATRsp_QBTSTATE_Hdlr+0x8c>
		    {
		       Ql_sscanf(pHead, "%*[^:]: %d\r\n", (s32 *)param);
102c723c:	e59f3408 	ldr	r3, [pc, #1032]	; 102c764c <ATRsp_QBTSTATE_Hdlr+0x484>
102c7240:	e59f1408 	ldr	r1, [pc, #1032]	; 102c7650 <ATRsp_QBTSTATE_Hdlr+0x488>
102c7244:	e5933000 	ldr	r3, [r3]
102c7248:	e1a02007 	mov	r2, r7
102c724c:	e12fff33 	blx	r3
102c7250:	e59d400c 	ldr	r4, [sp, #12]
		    }
			is_first_prompt = FALSE;
102c7254:	e3a03000 	mov	r3, #0
		else
		{
             Ql_sscanf(pHead, "%*[^:]: %d%*[^\r\n]\r\n", &status);
		}
        
        if (0 == status)
102c7258:	e3540000 	cmp	r4, #0
		{
		    if(NULL != param)
		    {
		       Ql_sscanf(pHead, "%*[^:]: %d\r\n", (s32 *)param);
		    }
			is_first_prompt = FALSE;
102c725c:	e5c53000 	strb	r3, [r5]
		else
		{
             Ql_sscanf(pHead, "%*[^:]: %d%*[^\r\n]\r\n", &status);
		}
        
        if (0 == status)
102c7260:	0a00000c 	beq	102c7298 <ATRsp_QBTSTATE_Hdlr+0xd0>
             {
                Ql_MEM_Free (pstrNewBtDev);
             }
            
        }
        else if (1 == status)
102c7264:	e3540001 	cmp	r4, #1
102c7268:	0a00004d 	beq	102c73a4 <ATRsp_QBTSTATE_Hdlr+0x1dc>
             {
                Ql_MEM_Free (pstrNewBtDev);
             }
        }
        
        return  RIL_ATRSP_CONTINUE;
102c726c:	e3a00001 	mov	r0, #1
    {
        return  RIL_ATRSP_FAILED;
    }

    return RIL_ATRSP_CONTINUE; //continue wait
}
102c7270:	e28dd03c 	add	sp, sp, #60	; 0x3c
102c7274:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    }
			is_first_prompt = FALSE;
		}
		else
		{
             Ql_sscanf(pHead, "%*[^:]: %d%*[^\r\n]\r\n", &status);
102c7278:	e59f33cc 	ldr	r3, [pc, #972]	; 102c764c <ATRsp_QBTSTATE_Hdlr+0x484>
102c727c:	e59f13d0 	ldr	r1, [pc, #976]	; 102c7654 <ATRsp_QBTSTATE_Hdlr+0x48c>
102c7280:	e5933000 	ldr	r3, [r3]
102c7284:	e28d200c 	add	r2, sp, #12
102c7288:	e12fff33 	blx	r3
102c728c:	e59d400c 	ldr	r4, [sp, #12]
		}
        
        if (0 == status)
102c7290:	e3540000 	cmp	r4, #0
102c7294:	1afffff2 	bne	102c7264 <ATRsp_QBTSTATE_Hdlr+0x9c>
        {
            // paired device
             pstrNewBtDev = (ST_BT_DevInfo*)Ql_MEM_Alloc(sizeof(ST_BT_DevInfo));
102c7298:	e59f33b8 	ldr	r3, [pc, #952]	; 102c7658 <ATRsp_QBTSTATE_Hdlr+0x490>
102c729c:	e3a00060 	mov	r0, #96	; 0x60
102c72a0:	e12fff33 	blx	r3
             Ql_memset(pstrNewBtDev, 0x0, sizeof(ST_BT_DevInfo));
             pstrNewBtDev->pairId = -1;
             pstrNewBtDev->connId = -1;
             pstrNewBtDev->profileId = -1;
             Ql_sscanf(line, "%*[^,],%d%*[^\r\n]\r\n",&(pstrNewBtDev->pairId));
102c72a4:	e59f93a0 	ldr	r9, [pc, #928]	; 102c764c <ATRsp_QBTSTATE_Hdlr+0x484>
        
        if (0 == status)
        {
            // paired device
             pstrNewBtDev = (ST_BT_DevInfo*)Ql_MEM_Alloc(sizeof(ST_BT_DevInfo));
             Ql_memset(pstrNewBtDev, 0x0, sizeof(ST_BT_DevInfo));
102c72a8:	e1a01004 	mov	r1, r4
102c72ac:	e3a02060 	mov	r2, #96	; 0x60
102c72b0:	e59f83a4 	ldr	r8, [pc, #932]	; 102c765c <ATRsp_QBTSTATE_Hdlr+0x494>
		}
        
        if (0 == status)
        {
            // paired device
             pstrNewBtDev = (ST_BT_DevInfo*)Ql_MEM_Alloc(sizeof(ST_BT_DevInfo));
102c72b4:	e1a05000 	mov	r5, r0
             Ql_memset(pstrNewBtDev, 0x0, sizeof(ST_BT_DevInfo));
102c72b8:	e12fff38 	blx	r8
             pstrNewBtDev->pairId = -1;
102c72bc:	e3e03000 	mvn	r3, #0
             pstrNewBtDev->connId = -1;
             pstrNewBtDev->profileId = -1;
             Ql_sscanf(line, "%*[^,],%d%*[^\r\n]\r\n",&(pstrNewBtDev->pairId));
102c72c0:	e59f1398 	ldr	r1, [pc, #920]	; 102c7660 <ATRsp_QBTSTATE_Hdlr+0x498>
102c72c4:	e2852050 	add	r2, r5, #80	; 0x50
        if (0 == status)
        {
            // paired device
             pstrNewBtDev = (ST_BT_DevInfo*)Ql_MEM_Alloc(sizeof(ST_BT_DevInfo));
             Ql_memset(pstrNewBtDev, 0x0, sizeof(ST_BT_DevInfo));
             pstrNewBtDev->pairId = -1;
102c72c8:	e5853050 	str	r3, [r5, #80]	; 0x50
             pstrNewBtDev->connId = -1;
102c72cc:	e5853054 	str	r3, [r5, #84]	; 0x54
             pstrNewBtDev->profileId = -1;
102c72d0:	e5853058 	str	r3, [r5, #88]	; 0x58
             Ql_sscanf(line, "%*[^,],%d%*[^\r\n]\r\n",&(pstrNewBtDev->pairId));
102c72d4:	e1a00006 	mov	r0, r6
102c72d8:	e5993000 	ldr	r3, [r9]
             Ql_sscanf(line, "%*[^\"]\"%[^\"]%*[^\r\n]\r\n",pstrNewBtDev->btDevice.name);
102c72dc:	e285a004 	add	sl, r5, #4
             pstrNewBtDev = (ST_BT_DevInfo*)Ql_MEM_Alloc(sizeof(ST_BT_DevInfo));
             Ql_memset(pstrNewBtDev, 0x0, sizeof(ST_BT_DevInfo));
             pstrNewBtDev->pairId = -1;
             pstrNewBtDev->connId = -1;
             pstrNewBtDev->profileId = -1;
             Ql_sscanf(line, "%*[^,],%d%*[^\r\n]\r\n",&(pstrNewBtDev->pairId));
102c72e0:	e12fff33 	blx	r3
             Ql_sscanf(line, "%*[^\"]\"%[^\"]%*[^\r\n]\r\n",pstrNewBtDev->btDevice.name);
             Ql_sscanf(line, "%*[^\"]\"%*[^,],%[^\r\n]\r\n",pstrNewBtDev->btDevice.addr);
102c72e4:	e285703c 	add	r7, r5, #60	; 0x3c
             Ql_memset(pstrNewBtDev, 0x0, sizeof(ST_BT_DevInfo));
             pstrNewBtDev->pairId = -1;
             pstrNewBtDev->connId = -1;
             pstrNewBtDev->profileId = -1;
             Ql_sscanf(line, "%*[^,],%d%*[^\r\n]\r\n",&(pstrNewBtDev->pairId));
             Ql_sscanf(line, "%*[^\"]\"%[^\"]%*[^\r\n]\r\n",pstrNewBtDev->btDevice.name);
102c72e8:	e5993000 	ldr	r3, [r9]
102c72ec:	e59f1370 	ldr	r1, [pc, #880]	; 102c7664 <ATRsp_QBTSTATE_Hdlr+0x49c>
102c72f0:	e1a0200a 	mov	r2, sl
102c72f4:	e1a00006 	mov	r0, r6
102c72f8:	e12fff33 	blx	r3
             Ql_sscanf(line, "%*[^\"]\"%*[^,],%[^\r\n]\r\n",pstrNewBtDev->btDevice.addr);
102c72fc:	e1a02007 	mov	r2, r7
102c7300:	e59f1360 	ldr	r1, [pc, #864]	; 102c7668 <ATRsp_QBTSTATE_Hdlr+0x4a0>
102c7304:	e5993000 	ldr	r3, [r9]
102c7308:	e1a00006 	mov	r0, r6
102c730c:	e12fff33 	blx	r3
             pstrNewBtDev->btDevice.devHdl = Ql_GenHash(pstrNewBtDev->btDevice.addr, Ql_strlen(pstrNewBtDev->btDevice.addr));
102c7310:	e1a00007 	mov	r0, r7
102c7314:	e59f3350 	ldr	r3, [pc, #848]	; 102c766c <ATRsp_QBTSTATE_Hdlr+0x4a4>
102c7318:	e12fff33 	blx	r3
102c731c:	e59f334c 	ldr	r3, [pc, #844]	; 102c7670 <ATRsp_QBTSTATE_Hdlr+0x4a8>
102c7320:	e1a01000 	mov	r1, r0
102c7324:	e1a00007 	mov	r0, r7
102c7328:	e12fff33 	blx	r3
102c732c:	e59f7340 	ldr	r7, [pc, #832]	; 102c7674 <ATRsp_QBTSTATE_Hdlr+0x4ac>
             ret = BT_PairUpdateConfirm(pstrNewBtDev->pairId,pstrNewBtDev->btDevice.devHdl,pstrNewBtDev->btDevice.name);
102c7330:	e5959050 	ldr	r9, [r5, #80]	; 0x50
102c7334:	e1a0c007 	mov	ip, r7
             pstrNewBtDev->connId = -1;
             pstrNewBtDev->profileId = -1;
             Ql_sscanf(line, "%*[^,],%d%*[^\r\n]\r\n",&(pstrNewBtDev->pairId));
             Ql_sscanf(line, "%*[^\"]\"%[^\"]%*[^\r\n]\r\n",pstrNewBtDev->btDevice.name);
             Ql_sscanf(line, "%*[^\"]\"%*[^,],%[^\r\n]\r\n",pstrNewBtDev->btDevice.addr);
             pstrNewBtDev->btDevice.devHdl = Ql_GenHash(pstrNewBtDev->btDevice.addr, Ql_strlen(pstrNewBtDev->btDevice.addr));
102c7338:	e5850000 	str	r0, [r5]
102c733c:	ea000002 	b	102c734c <ATRsp_QBTSTATE_Hdlr+0x184>
102c7340:	e2844001 	add	r4, r4, #1

static bool BT_PairUpdateConfirm(const s32 pairid,BT_DEV_HDL devHdl,const char *name)
{
    u16 i;

    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c7344:	e354001e 	cmp	r4, #30
102c7348:	0a00006f 	beq	102c750c <ATRsp_QBTSTATE_Hdlr+0x344>
    {
        if (NULL != m_arrBTDev[i])
102c734c:	e5bc3004 	ldr	r3, [ip, #4]!
102c7350:	e3530000 	cmp	r3, #0
102c7354:	0afffff9 	beq	102c7340 <ATRsp_QBTSTATE_Hdlr+0x178>
        {
            if(devHdl == m_arrBTDev[i]->btDevice.devHdl)
102c7358:	e5936000 	ldr	r6, [r3]
102c735c:	e1500006 	cmp	r0, r6
102c7360:	1afffff6 	bne	102c7340 <ATRsp_QBTSTATE_Hdlr+0x178>
            {
                m_arrBTDev[i]->pairId = pairid;
				Ql_memset(m_arrBTDev[i]->btDevice.name,0,BT_NAME_LEN);
102c7364:	e3a01000 	mov	r1, #0
102c7368:	e3a02038 	mov	r2, #56	; 0x38
    {
        if (NULL != m_arrBTDev[i])
        {
            if(devHdl == m_arrBTDev[i]->btDevice.devHdl)
            {
                m_arrBTDev[i]->pairId = pairid;
102c736c:	e5839050 	str	r9, [r3, #80]	; 0x50
				Ql_memset(m_arrBTDev[i]->btDevice.name,0,BT_NAME_LEN);
102c7370:	e2830004 	add	r0, r3, #4
102c7374:	e12fff38 	blx	r8
                Ql_strcpy(m_arrBTDev[i]->btDevice.name,name);
102c7378:	e1a0100a 	mov	r1, sl
            if(devHdl == m_arrBTDev[i]->btDevice.devHdl)
            {
                m_arrBTDev[i]->connId = connid;
                m_arrBTDev[i]->profileId = profileId;
				Ql_memset(m_arrBTDev[i]->btDevice.name,0,BT_NAME_LEN);
                Ql_strcpy(m_arrBTDev[i]->btDevice.name,name);
102c737c:	e59f32f4 	ldr	r3, [pc, #756]	; 102c7678 <ATRsp_QBTSTATE_Hdlr+0x4b0>
102c7380:	e7930104 	ldr	r0, [r3, r4, lsl #2]
102c7384:	e59f32f0 	ldr	r3, [pc, #752]	; 102c767c <ATRsp_QBTSTATE_Hdlr+0x4b4>
102c7388:	e2800004 	add	r0, r0, #4
102c738c:	e12fff33 	blx	r3
                    Ql_MEM_Free (pstrNewBtDev);
                }
             }
             else
             {
                Ql_MEM_Free (pstrNewBtDev);
102c7390:	e1a00005 	mov	r0, r5
102c7394:	e59f32e4 	ldr	r3, [pc, #740]	; 102c7680 <ATRsp_QBTSTATE_Hdlr+0x4b8>
102c7398:	e12fff33 	blx	r3
             }
        }
        
        return  RIL_ATRSP_CONTINUE;
102c739c:	e3a00001 	mov	r0, #1
102c73a0:	eaffffb2 	b	102c7270 <ATRsp_QBTSTATE_Hdlr+0xa8>
            
        }
        else if (1 == status)
        {
            // connected device  +QBTSTATE:1,2,"H60-L01",F4E3FBE47920,SPP
             pstrNewBtDev = (ST_BT_DevInfo*)Ql_MEM_Alloc(sizeof(ST_BT_DevInfo));
102c73a4:	e59f32ac 	ldr	r3, [pc, #684]	; 102c7658 <ATRsp_QBTSTATE_Hdlr+0x490>
102c73a8:	e3a00060 	mov	r0, #96	; 0x60
102c73ac:	e12fff33 	blx	r3
             Ql_memset(pstrNewBtDev, 0x0, sizeof(ST_BT_DevInfo));
             pstrNewBtDev->pairId = -1;
             pstrNewBtDev->connId = -1;
             pstrNewBtDev->profileId = -1;
             Ql_sscanf(line, "%*[^,],%d%*[^\r\n]\r\n",&(pstrNewBtDev->connId));
102c73b0:	e59f4294 	ldr	r4, [pc, #660]	; 102c764c <ATRsp_QBTSTATE_Hdlr+0x484>
        }
        else if (1 == status)
        {
            // connected device  +QBTSTATE:1,2,"H60-L01",F4E3FBE47920,SPP
             pstrNewBtDev = (ST_BT_DevInfo*)Ql_MEM_Alloc(sizeof(ST_BT_DevInfo));
             Ql_memset(pstrNewBtDev, 0x0, sizeof(ST_BT_DevInfo));
102c73b4:	e3a01000 	mov	r1, #0
102c73b8:	e3a02060 	mov	r2, #96	; 0x60
102c73bc:	e59f8298 	ldr	r8, [pc, #664]	; 102c765c <ATRsp_QBTSTATE_Hdlr+0x494>
    if(NULL == profile_name)
    {
        return -1;
    }
    
    while (pf_name[i] != NULL)
102c73c0:	e59fb2bc 	ldr	fp, [pc, #700]	; 102c7684 <ATRsp_QBTSTATE_Hdlr+0x4bc>
102c73c4:	e59f72bc 	ldr	r7, [pc, #700]	; 102c7688 <ATRsp_QBTSTATE_Hdlr+0x4c0>
102c73c8:	e59f92bc 	ldr	r9, [pc, #700]	; 102c768c <ATRsp_QBTSTATE_Hdlr+0x4c4>
            
        }
        else if (1 == status)
        {
            // connected device  +QBTSTATE:1,2,"H60-L01",F4E3FBE47920,SPP
             pstrNewBtDev = (ST_BT_DevInfo*)Ql_MEM_Alloc(sizeof(ST_BT_DevInfo));
102c73cc:	e1a05000 	mov	r5, r0
             Ql_memset(pstrNewBtDev, 0x0, sizeof(ST_BT_DevInfo));
102c73d0:	e12fff38 	blx	r8
             pstrNewBtDev->pairId = -1;
102c73d4:	e3e03000 	mvn	r3, #0
             pstrNewBtDev->connId = -1;
             pstrNewBtDev->profileId = -1;
             Ql_sscanf(line, "%*[^,],%d%*[^\r\n]\r\n",&(pstrNewBtDev->connId));
             Ql_sscanf(line, "%*[^\"]\"%[^\"]%*[^\r\n]\r\n",pstrNewBtDev->btDevice.name);
102c73d8:	e285c004 	add	ip, r5, #4
             pstrNewBtDev = (ST_BT_DevInfo*)Ql_MEM_Alloc(sizeof(ST_BT_DevInfo));
             Ql_memset(pstrNewBtDev, 0x0, sizeof(ST_BT_DevInfo));
             pstrNewBtDev->pairId = -1;
             pstrNewBtDev->connId = -1;
             pstrNewBtDev->profileId = -1;
             Ql_sscanf(line, "%*[^,],%d%*[^\r\n]\r\n",&(pstrNewBtDev->connId));
102c73dc:	e59f127c 	ldr	r1, [pc, #636]	; 102c7660 <ATRsp_QBTSTATE_Hdlr+0x498>
102c73e0:	e2852054 	add	r2, r5, #84	; 0x54
        else if (1 == status)
        {
            // connected device  +QBTSTATE:1,2,"H60-L01",F4E3FBE47920,SPP
             pstrNewBtDev = (ST_BT_DevInfo*)Ql_MEM_Alloc(sizeof(ST_BT_DevInfo));
             Ql_memset(pstrNewBtDev, 0x0, sizeof(ST_BT_DevInfo));
             pstrNewBtDev->pairId = -1;
102c73e4:	e5853050 	str	r3, [r5, #80]	; 0x50
             pstrNewBtDev->connId = -1;
102c73e8:	e5853054 	str	r3, [r5, #84]	; 0x54
             pstrNewBtDev->profileId = -1;
102c73ec:	e5853058 	str	r3, [r5, #88]	; 0x58
             Ql_sscanf(line, "%*[^,],%d%*[^\r\n]\r\n",&(pstrNewBtDev->connId));
102c73f0:	e1a00006 	mov	r0, r6
102c73f4:	e5943000 	ldr	r3, [r4]
             Ql_sscanf(line, "%*[^\"]\"%[^\"]%*[^\r\n]\r\n",pstrNewBtDev->btDevice.name);
102c73f8:	e58dc004 	str	ip, [sp, #4]
             pstrNewBtDev = (ST_BT_DevInfo*)Ql_MEM_Alloc(sizeof(ST_BT_DevInfo));
             Ql_memset(pstrNewBtDev, 0x0, sizeof(ST_BT_DevInfo));
             pstrNewBtDev->pairId = -1;
             pstrNewBtDev->connId = -1;
             pstrNewBtDev->profileId = -1;
             Ql_sscanf(line, "%*[^,],%d%*[^\r\n]\r\n",&(pstrNewBtDev->connId));
102c73fc:	e12fff33 	blx	r3
             Ql_sscanf(line, "%*[^\"]\"%[^\"]%*[^\r\n]\r\n",pstrNewBtDev->btDevice.name);
             Ql_sscanf(line, "%*[^\"]\"%*[^,],%[^,]%*[^\r\n]\r\n",pstrNewBtDev->btDevice.addr);
102c7400:	e285303c 	add	r3, r5, #60	; 0x3c
102c7404:	e58d3000 	str	r3, [sp]
             Ql_memset(pstrNewBtDev, 0x0, sizeof(ST_BT_DevInfo));
             pstrNewBtDev->pairId = -1;
             pstrNewBtDev->connId = -1;
             pstrNewBtDev->profileId = -1;
             Ql_sscanf(line, "%*[^,],%d%*[^\r\n]\r\n",&(pstrNewBtDev->connId));
             Ql_sscanf(line, "%*[^\"]\"%[^\"]%*[^\r\n]\r\n",pstrNewBtDev->btDevice.name);
102c7408:	e59f1254 	ldr	r1, [pc, #596]	; 102c7664 <ATRsp_QBTSTATE_Hdlr+0x49c>
102c740c:	e5943000 	ldr	r3, [r4]
102c7410:	e59d2004 	ldr	r2, [sp, #4]
102c7414:	e1a00006 	mov	r0, r6
102c7418:	e12fff33 	blx	r3
             Ql_sscanf(line, "%*[^\"]\"%*[^,],%[^,]%*[^\r\n]\r\n",pstrNewBtDev->btDevice.addr);
102c741c:	e5943000 	ldr	r3, [r4]
102c7420:	e59f1268 	ldr	r1, [pc, #616]	; 102c7690 <ATRsp_QBTSTATE_Hdlr+0x4c8>
102c7424:	e59d2000 	ldr	r2, [sp]
102c7428:	e1a00006 	mov	r0, r6
102c742c:	e12fff33 	blx	r3
             Ql_sscanf(line, "%*[^\"]\"%*[^\"]\"%*[^\"]\"%[^\"]%*[^\r\n]\r\n",profile_name);
102c7430:	e5943000 	ldr	r3, [r4]
102c7434:	e1a00006 	mov	r0, r6
102c7438:	e59f1254 	ldr	r1, [pc, #596]	; 102c7694 <ATRsp_QBTSTATE_Hdlr+0x4cc>
102c743c:	e28d2010 	add	r2, sp, #16
    if(NULL == profile_name)
    {
        return -1;
    }
    
    while (pf_name[i] != NULL)
102c7440:	e3a04000 	mov	r4, #0
             pstrNewBtDev->connId = -1;
             pstrNewBtDev->profileId = -1;
             Ql_sscanf(line, "%*[^,],%d%*[^\r\n]\r\n",&(pstrNewBtDev->connId));
             Ql_sscanf(line, "%*[^\"]\"%[^\"]%*[^\r\n]\r\n",pstrNewBtDev->btDevice.name);
             Ql_sscanf(line, "%*[^\"]\"%*[^,],%[^,]%*[^\r\n]\r\n",pstrNewBtDev->btDevice.addr);
             Ql_sscanf(line, "%*[^\"]\"%*[^\"]\"%*[^\"]\"%[^\"]%*[^\r\n]\r\n",profile_name);
102c7444:	e12fff33 	blx	r3
102c7448:	e59f621c 	ldr	r6, [pc, #540]	; 102c766c <ATRsp_QBTSTATE_Hdlr+0x4a4>
102c744c:	e1a0a004 	mov	sl, r4
102c7450:	ea000004 	b	102c7468 <ATRsp_QBTSTATE_Hdlr+0x2a0>
    {
       if(0 == Ql_strncmp(profile_name,pf_name[i],Ql_strlen(profile_name)))
       {
           return i ;
       }
       i++;
102c7454:	e1a04823 	lsr	r4, r3, #16
    if(NULL == profile_name)
    {
        return -1;
    }
    
    while (pf_name[i] != NULL)
102c7458:	e799b104 	ldr	fp, [r9, r4, lsl #2]
102c745c:	e1a0a004 	mov	sl, r4
102c7460:	e35b0000 	cmp	fp, #0
102c7464:	0a000050 	beq	102c75ac <ATRsp_QBTSTATE_Hdlr+0x3e4>
    {
       if(0 == Ql_strncmp(profile_name,pf_name[i],Ql_strlen(profile_name)))
102c7468:	e28d0010 	add	r0, sp, #16
102c746c:	e12fff36 	blx	r6
102c7470:	e1a0100b 	mov	r1, fp
102c7474:	e1a02000 	mov	r2, r0
102c7478:	e28d0010 	add	r0, sp, #16
102c747c:	e12fff37 	blx	r7
       {
           return i ;
       }
       i++;
102c7480:	e28a3001 	add	r3, sl, #1
102c7484:	e1a03803 	lsl	r3, r3, #16
        return -1;
    }
    
    while (pf_name[i] != NULL)
    {
       if(0 == Ql_strncmp(profile_name,pf_name[i],Ql_strlen(profile_name)))
102c7488:	e3500000 	cmp	r0, #0
102c748c:	1afffff0 	bne	102c7454 <ATRsp_QBTSTATE_Hdlr+0x28c>
             pstrNewBtDev->profileId = -1;
             Ql_sscanf(line, "%*[^,],%d%*[^\r\n]\r\n",&(pstrNewBtDev->connId));
             Ql_sscanf(line, "%*[^\"]\"%[^\"]%*[^\r\n]\r\n",pstrNewBtDev->btDevice.name);
             Ql_sscanf(line, "%*[^\"]\"%*[^,],%[^,]%*[^\r\n]\r\n",pstrNewBtDev->btDevice.addr);
             Ql_sscanf(line, "%*[^\"]\"%*[^\"]\"%*[^\"]\"%[^\"]%*[^\r\n]\r\n",profile_name);
			 pstrNewBtDev->profileId = BT_DevMngmt_ProfileNameToId(profile_name);  
102c7490:	e5854058 	str	r4, [r5, #88]	; 0x58
             pstrNewBtDev->btDevice.devHdl = Ql_GenHash(pstrNewBtDev->btDevice.addr, Ql_strlen(pstrNewBtDev->btDevice.addr));
102c7494:	e59d0000 	ldr	r0, [sp]
102c7498:	e12fff36 	blx	r6
102c749c:	e59f31cc 	ldr	r3, [pc, #460]	; 102c7670 <ATRsp_QBTSTATE_Hdlr+0x4a8>
102c74a0:	e59f61cc 	ldr	r6, [pc, #460]	; 102c7674 <ATRsp_QBTSTATE_Hdlr+0x4ac>
             ret = BT_ConnectUpdateConfirm(pstrNewBtDev->connId,pstrNewBtDev->profileId,pstrNewBtDev->btDevice.devHdl,pstrNewBtDev->btDevice.name);
102c74a4:	e3a04000 	mov	r4, #0
             Ql_sscanf(line, "%*[^,],%d%*[^\r\n]\r\n",&(pstrNewBtDev->connId));
             Ql_sscanf(line, "%*[^\"]\"%[^\"]%*[^\r\n]\r\n",pstrNewBtDev->btDevice.name);
             Ql_sscanf(line, "%*[^\"]\"%*[^,],%[^,]%*[^\r\n]\r\n",pstrNewBtDev->btDevice.addr);
             Ql_sscanf(line, "%*[^\"]\"%*[^\"]\"%*[^\"]\"%[^\"]%*[^\r\n]\r\n",profile_name);
			 pstrNewBtDev->profileId = BT_DevMngmt_ProfileNameToId(profile_name);  
             pstrNewBtDev->btDevice.devHdl = Ql_GenHash(pstrNewBtDev->btDevice.addr, Ql_strlen(pstrNewBtDev->btDevice.addr));
102c74a8:	e1a01000 	mov	r1, r0
102c74ac:	e59d0000 	ldr	r0, [sp]
102c74b0:	e12fff33 	blx	r3
             ret = BT_ConnectUpdateConfirm(pstrNewBtDev->connId,pstrNewBtDev->profileId,pstrNewBtDev->btDevice.devHdl,pstrNewBtDev->btDevice.name);
102c74b4:	e5957054 	ldr	r7, [r5, #84]	; 0x54
102c74b8:	e595c058 	ldr	ip, [r5, #88]	; 0x58
102c74bc:	e1a02006 	mov	r2, r6
             Ql_sscanf(line, "%*[^,],%d%*[^\r\n]\r\n",&(pstrNewBtDev->connId));
             Ql_sscanf(line, "%*[^\"]\"%[^\"]%*[^\r\n]\r\n",pstrNewBtDev->btDevice.name);
             Ql_sscanf(line, "%*[^\"]\"%*[^,],%[^,]%*[^\r\n]\r\n",pstrNewBtDev->btDevice.addr);
             Ql_sscanf(line, "%*[^\"]\"%*[^\"]\"%*[^\"]\"%[^\"]%*[^\r\n]\r\n",profile_name);
			 pstrNewBtDev->profileId = BT_DevMngmt_ProfileNameToId(profile_name);  
             pstrNewBtDev->btDevice.devHdl = Ql_GenHash(pstrNewBtDev->btDevice.addr, Ql_strlen(pstrNewBtDev->btDevice.addr));
102c74c0:	e5850000 	str	r0, [r5]
102c74c4:	ea000002 	b	102c74d4 <ATRsp_QBTSTATE_Hdlr+0x30c>
102c74c8:	e2844001 	add	r4, r4, #1

static bool BT_ConnectUpdateConfirm(const s32 connid,const s32 profileId,BT_DEV_HDL devHdl,const char *name)
{
    u16 i;

    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c74cc:	e354001e 	cmp	r4, #30
102c74d0:	0a000037 	beq	102c75b4 <ATRsp_QBTSTATE_Hdlr+0x3ec>
    {
        if (NULL != m_arrBTDev[i])
102c74d4:	e5b23004 	ldr	r3, [r2, #4]!
102c74d8:	e3530000 	cmp	r3, #0
102c74dc:	0afffff9 	beq	102c74c8 <ATRsp_QBTSTATE_Hdlr+0x300>
        {
            if(devHdl == m_arrBTDev[i]->btDevice.devHdl)
102c74e0:	e5931000 	ldr	r1, [r3]
102c74e4:	e1500001 	cmp	r0, r1
102c74e8:	1afffff6 	bne	102c74c8 <ATRsp_QBTSTATE_Hdlr+0x300>
            {
                m_arrBTDev[i]->connId = connid;
                m_arrBTDev[i]->profileId = profileId;
				Ql_memset(m_arrBTDev[i]->btDevice.name,0,BT_NAME_LEN);
102c74ec:	e3a01000 	mov	r1, #0
102c74f0:	e3a02038 	mov	r2, #56	; 0x38
    {
        if (NULL != m_arrBTDev[i])
        {
            if(devHdl == m_arrBTDev[i]->btDevice.devHdl)
            {
                m_arrBTDev[i]->connId = connid;
102c74f4:	e5837054 	str	r7, [r3, #84]	; 0x54
                m_arrBTDev[i]->profileId = profileId;
102c74f8:	e583c058 	str	ip, [r3, #88]	; 0x58
				Ql_memset(m_arrBTDev[i]->btDevice.name,0,BT_NAME_LEN);
102c74fc:	e2830004 	add	r0, r3, #4
102c7500:	e12fff38 	blx	r8
                Ql_strcpy(m_arrBTDev[i]->btDevice.name,name);
102c7504:	e59d1004 	ldr	r1, [sp, #4]
102c7508:	eaffff9b 	b	102c737c <ATRsp_QBTSTATE_Hdlr+0x1b4>
    }

    return RIL_ATRSP_CONTINUE; //continue wait
}

static s32 ATRsp_QBTSTATE_Hdlr(char* line, u32 len, void* param)
102c750c:	e59f4184 	ldr	r4, [pc, #388]	; 102c7698 <ATRsp_QBTSTATE_Hdlr+0x4d0>
102c7510:	e3a0c000 	mov	ip, #0
102c7514:	e2443078 	sub	r3, r4, #120	; 0x78
{
    u16 i;
    u16 count = 0 ;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
    {
        if (NULL != m_arrBTDev[i])
102c7518:	e5b32004 	ldr	r2, [r3, #4]!
        {
            count++;
102c751c:	e28c1001 	add	r1, ip, #1
{
    u16 i;
    u16 count = 0 ;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
    {
        if (NULL != m_arrBTDev[i])
102c7520:	e3520000 	cmp	r2, #0
        {
            count++;
102c7524:	e1a01801 	lsl	r1, r1, #16
102c7528:	11a0c821 	lsrne	ip, r1, #16

static bool BT_DevMngmt_isFull(void)
{
    u16 i;
    u16 count = 0 ;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c752c:	e1530004 	cmp	r3, r4
102c7530:	1afffff8 	bne	102c7518 <ATRsp_QBTSTATE_Hdlr+0x350>
        {
            count++;
        }
    }

    if(count >= MAX_BT_DEV_CNT)
102c7534:	e35c001d 	cmp	ip, #29
102c7538:	8a00000b 	bhi	102c756c <ATRsp_QBTSTATE_Hdlr+0x3a4>
102c753c:	e3a03000 	mov	r3, #0
102c7540:	ea000002 	b	102c7550 <ATRsp_QBTSTATE_Hdlr+0x388>
102c7544:	e2833001 	add	r3, r3, #1
//
// Append a bt device
static void BT_DevMngmt_Append(ST_BT_DevInfo* pstBtDev)
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c7548:	e353001e 	cmp	r3, #30
102c754c:	0affff46 	beq	102c726c <ATRsp_QBTSTATE_Hdlr+0xa4>
    {
        if (NULL == m_arrBTDev[i])
102c7550:	e5b72004 	ldr	r2, [r7, #4]!
102c7554:	e3520000 	cmp	r2, #0
102c7558:	1afffff9 	bne	102c7544 <ATRsp_QBTSTATE_Hdlr+0x37c>
        {
            m_arrBTDev[i] = pstBtDev;
102c755c:	e59f2114 	ldr	r2, [pc, #276]	; 102c7678 <ATRsp_QBTSTATE_Hdlr+0x4b0>
             {
                Ql_MEM_Free (pstrNewBtDev);
             }
        }
        
        return  RIL_ATRSP_CONTINUE;
102c7560:	e3a00001 	mov	r0, #1
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
    {
        if (NULL == m_arrBTDev[i])
        {
            m_arrBTDev[i] = pstBtDev;
102c7564:	e7825103 	str	r5, [r2, r3, lsl #2]
102c7568:	eaffff40 	b	102c7270 <ATRsp_QBTSTATE_Hdlr+0xa8>
                   BT_DevMngmt_Append(pstrNewBtDev);
            
                }
                else
                {
                    Ql_MEM_Free (pstrNewBtDev);
102c756c:	e1a00005 	mov	r0, r5
102c7570:	e59f3108 	ldr	r3, [pc, #264]	; 102c7680 <ATRsp_QBTSTATE_Hdlr+0x4b8>
102c7574:	e12fff33 	blx	r3
102c7578:	eaffff3b 	b	102c726c <ATRsp_QBTSTATE_Hdlr+0xa4>
        }
        
        return  RIL_ATRSP_CONTINUE;
    }

    pHead = Ql_RIL_FindLine(line, len, "OK"); // find <CR><LF>OK<CR><LF>, <CR>OK<CR>£¬<LF>OK<LF>
102c757c:	e1a00006 	mov	r0, r6
102c7580:	e1a01008 	mov	r1, r8
102c7584:	e59f2110 	ldr	r2, [pc, #272]	; 102c769c <ATRsp_QBTSTATE_Hdlr+0x4d4>
102c7588:	e59f4110 	ldr	r4, [pc, #272]	; 102c76a0 <ATRsp_QBTSTATE_Hdlr+0x4d8>
102c758c:	e12fff34 	blx	r4
    if (pHead)
102c7590:	e3500000 	cmp	r0, #0
102c7594:	0a00001b 	beq	102c7608 <ATRsp_QBTSTATE_Hdlr+0x440>
    {  
        is_first_prompt = TRUE;
102c7598:	e59f30a8 	ldr	r3, [pc, #168]	; 102c7648 <ATRsp_QBTSTATE_Hdlr+0x480>
102c759c:	e3a02001 	mov	r2, #1
102c75a0:	e5c32000 	strb	r2, [r3]
        return  RIL_ATRSP_SUCCESS;
102c75a4:	e1a0000a 	mov	r0, sl
102c75a8:	eaffff30 	b	102c7270 <ATRsp_QBTSTATE_Hdlr+0xa8>
           return i ;
       }
       i++;
    }

    return -1;
102c75ac:	e3e04000 	mvn	r4, #0
102c75b0:	eaffffb6 	b	102c7490 <ATRsp_QBTSTATE_Hdlr+0x2c8>
    }

    return RIL_ATRSP_CONTINUE; //continue wait
}

static s32 ATRsp_QBTSTATE_Hdlr(char* line, u32 len, void* param)
102c75b4:	e59f00dc 	ldr	r0, [pc, #220]	; 102c7698 <ATRsp_QBTSTATE_Hdlr+0x4d0>
102c75b8:	e3a0c000 	mov	ip, #0
102c75bc:	e2403078 	sub	r3, r0, #120	; 0x78
{
    u16 i;
    u16 count = 0 ;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
    {
        if (NULL != m_arrBTDev[i])
102c75c0:	e5b32004 	ldr	r2, [r3, #4]!
        {
            count++;
102c75c4:	e28c1001 	add	r1, ip, #1
{
    u16 i;
    u16 count = 0 ;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
    {
        if (NULL != m_arrBTDev[i])
102c75c8:	e3520000 	cmp	r2, #0
        {
            count++;
102c75cc:	e1a01801 	lsl	r1, r1, #16
102c75d0:	11a0c821 	lsrne	ip, r1, #16

static bool BT_DevMngmt_isFull(void)
{
    u16 i;
    u16 count = 0 ;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c75d4:	e1530000 	cmp	r3, r0
102c75d8:	1afffff8 	bne	102c75c0 <ATRsp_QBTSTATE_Hdlr+0x3f8>
        {
            count++;
        }
    }

    if(count >= MAX_BT_DEV_CNT)
102c75dc:	e35c001d 	cmp	ip, #29
102c75e0:	8affffe1 	bhi	102c756c <ATRsp_QBTSTATE_Hdlr+0x3a4>
102c75e4:	e3a03000 	mov	r3, #0
102c75e8:	ea000002 	b	102c75f8 <ATRsp_QBTSTATE_Hdlr+0x430>
102c75ec:	e2833001 	add	r3, r3, #1
//
// Append a bt device
static void BT_DevMngmt_Append(ST_BT_DevInfo* pstBtDev)
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c75f0:	e353001e 	cmp	r3, #30
102c75f4:	0affff1c 	beq	102c726c <ATRsp_QBTSTATE_Hdlr+0xa4>
    {
        if (NULL == m_arrBTDev[i])
102c75f8:	e5b62004 	ldr	r2, [r6, #4]!
102c75fc:	e3520000 	cmp	r2, #0
102c7600:	1afffff9 	bne	102c75ec <ATRsp_QBTSTATE_Hdlr+0x424>
102c7604:	eaffffd4 	b	102c755c <ATRsp_QBTSTATE_Hdlr+0x394>
    {  
        is_first_prompt = TRUE;
        return  RIL_ATRSP_SUCCESS;
    }

    pHead = Ql_RIL_FindLine(line, len, "ERROR");// find <CR><LF>ERROR<CR><LF>, <CR>ERROR<CR>£¬<LF>ERROR<LF>
102c7608:	e1a00006 	mov	r0, r6
102c760c:	e1a01008 	mov	r1, r8
102c7610:	e59f208c 	ldr	r2, [pc, #140]	; 102c76a4 <ATRsp_QBTSTATE_Hdlr+0x4dc>
102c7614:	e12fff34 	blx	r4
    if (pHead)
102c7618:	e3500000 	cmp	r0, #0
102c761c:	1a000005 	bne	102c7638 <ATRsp_QBTSTATE_Hdlr+0x470>
    {  
        return  RIL_ATRSP_FAILED;
    } 

    pHead = Ql_RIL_FindString(line, len, "+CME ERROR:");//fail
102c7620:	e1a00006 	mov	r0, r6
102c7624:	e1a01008 	mov	r1, r8
102c7628:	e59f2078 	ldr	r2, [pc, #120]	; 102c76a8 <ATRsp_QBTSTATE_Hdlr+0x4e0>
102c762c:	e12fff35 	blx	r5
    if (pHead)
102c7630:	e3500000 	cmp	r0, #0
102c7634:	0affff0c 	beq	102c726c <ATRsp_QBTSTATE_Hdlr+0xa4>
    }

    pHead = Ql_RIL_FindLine(line, len, "ERROR");// find <CR><LF>ERROR<CR><LF>, <CR>ERROR<CR>£¬<LF>ERROR<LF>
    if (pHead)
    {  
        return  RIL_ATRSP_FAILED;
102c7638:	e3e00000 	mvn	r0, #0
102c763c:	eaffff0b 	b	102c7270 <ATRsp_QBTSTATE_Hdlr+0xa8>
102c7640:	102cbee0 	.word	0x102cbee0
102c7644:	102ceba8 	.word	0x102ceba8
102c7648:	f03d2000 	.word	0xf03d2000
102c764c:	f03d31f0 	.word	0xf03d31f0
102c7650:	102ceb88 	.word	0x102ceb88
102c7654:	102cebb4 	.word	0x102cebb4
102c7658:	102cc7f4 	.word	0x102cc7f4
102c765c:	102cd6b0 	.word	0x102cd6b0
102c7660:	102cebc8 	.word	0x102cebc8
102c7664:	102cebdc 	.word	0x102cebdc
102c7668:	102cebf4 	.word	0x102cebf4
102c766c:	102cd560 	.word	0x102cd560
102c7670:	102cc1ec 	.word	0x102cc1ec
102c7674:	f03d2054 	.word	0xf03d2054
102c7678:	f03d2058 	.word	0xf03d2058
102c767c:	102cd438 	.word	0x102cd438
102c7680:	102cc86c 	.word	0x102cc86c
102c7684:	102ceba4 	.word	0x102ceba4
102c7688:	102cd640 	.word	0x102cd640
102c768c:	102ce064 	.word	0x102ce064
102c7690:	102cec0c 	.word	0x102cec0c
102c7694:	102cec2c 	.word	0x102cec2c
102c7698:	f03d20cc 	.word	0xf03d20cc
102c769c:	102ceb70 	.word	0x102ceb70
102c76a0:	102cbf6c 	.word	0x102cbf6c
102c76a4:	102ceb74 	.word	0x102ceb74
102c76a8:	102ceb7c 	.word	0x102ceb7c

102c76ac <ATRsp_QBTSPPREAD_Hdlr>:
    }

    return RIL_ATRSP_FAILED; //not supported
}
static s32 ATRsp_QBTSPPREAD_Hdlr(char* line, u32 len, void* param)
{
102c76ac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    static bool sppReadMode = FALSE;
    char* pHead = NULL;


    // The coming data is spp data
    if (sppReadMode)
102c76b0:	e59f4110 	ldr	r4, [pc, #272]	; 102c77c8 <ATRsp_QBTSPPREAD_Hdlr+0x11c>
    }

    return RIL_ATRSP_FAILED; //not supported
}
static s32 ATRsp_QBTSPPREAD_Hdlr(char* line, u32 len, void* param)
{
102c76b4:	e1a05000 	mov	r5, r0
    static bool sppReadMode = FALSE;
    char* pHead = NULL;


    // The coming data is spp data
    if (sppReadMode)
102c76b8:	e5d43078 	ldrb	r3, [r4, #120]	; 0x78
    }

    return RIL_ATRSP_FAILED; //not supported
}
static s32 ATRsp_QBTSPPREAD_Hdlr(char* line, u32 len, void* param)
{
102c76bc:	e1a07001 	mov	r7, r1
    static bool sppReadMode = FALSE;
    char* pHead = NULL;


    // The coming data is spp data
    if (sppReadMode)
102c76c0:	e3530000 	cmp	r3, #0
    }

    return RIL_ATRSP_FAILED; //not supported
}
static s32 ATRsp_QBTSPPREAD_Hdlr(char* line, u32 len, void* param)
{
102c76c4:	e1a06002 	mov	r6, r2
    static bool sppReadMode = FALSE;
    char* pHead = NULL;


    // The coming data is spp data
    if (sppReadMode)
102c76c8:	0a00000e 	beq	102c7708 <ATRsp_QBTSPPREAD_Hdlr+0x5c>
    {
        Ql_memcpy((void*)(m_ptrSppDataBuf), (const void*)line, m_nSppRealReadLen);
102c76cc:	e59f30f8 	ldr	r3, [pc, #248]	; 102c77cc <ATRsp_QBTSPPREAD_Hdlr+0x120>
102c76d0:	e1a01005 	mov	r1, r5
102c76d4:	e594007c 	ldr	r0, [r4, #124]	; 0x7c
102c76d8:	e5942080 	ldr	r2, [r4, #128]	; 0x80
102c76dc:	e12fff33 	blx	r3
	    if(NULL != param)
102c76e0:	e3560000 	cmp	r6, #0
       {
           *(u32 *)param = m_nSppRealReadLen ;
102c76e4:	15943080 	ldrne	r3, [r4, #128]	; 0x80
102c76e8:	15863000 	strne	r3, [r6]
       }

		sppReadMode = FALSE;
		if(len>m_nSppRealReadLen)
102c76ec:	e5941080 	ldr	r1, [r4, #128]	; 0x80
	    if(NULL != param)
       {
           *(u32 *)param = m_nSppRealReadLen ;
       }

		sppReadMode = FALSE;
102c76f0:	e3a03000 	mov	r3, #0
		if(len>m_nSppRealReadLen)
102c76f4:	e1510007 	cmp	r1, r7
	    if(NULL != param)
       {
           *(u32 *)param = m_nSppRealReadLen ;
       }

		sppReadMode = FALSE;
102c76f8:	e5c43078 	strb	r3, [r4, #120]	; 0x78
		if(len>m_nSppRealReadLen)
102c76fc:	3a000013 	bcc	102c7750 <ATRsp_QBTSPPREAD_Hdlr+0xa4>
			{  
			   return  RIL_ATRSP_SUCCESS;
			}
		}
		
		return  RIL_ATRSP_CONTINUE;
102c7700:	e3a00001 	mov	r0, #1
    {
        return  RIL_ATRSP_FAILED;
    }

    return RIL_ATRSP_FAILED; //not supported
}
102c7704:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		
		return  RIL_ATRSP_CONTINUE;

    }
    
    pHead = Ql_RIL_FindString(line, len, "\r\n+QSPPREAD: ");
102c7708:	e59f20c0 	ldr	r2, [pc, #192]	; 102c77d0 <ATRsp_QBTSPPREAD_Hdlr+0x124>
102c770c:	e59f60c0 	ldr	r6, [pc, #192]	; 102c77d4 <ATRsp_QBTSPPREAD_Hdlr+0x128>
102c7710:	e12fff36 	blx	r6
    if (pHead)
102c7714:	e2508000 	subs	r8, r0, #0
    {
        Ql_sscanf(line, "%*[^:]: %d", &m_nSppRealReadLen);
102c7718:	e1a00005 	mov	r0, r5
		return  RIL_ATRSP_CONTINUE;

    }
    
    pHead = Ql_RIL_FindString(line, len, "\r\n+QSPPREAD: ");
    if (pHead)
102c771c:	0a000013 	beq	102c7770 <ATRsp_QBTSPPREAD_Hdlr+0xc4>
    {
        Ql_sscanf(line, "%*[^:]: %d", &m_nSppRealReadLen);
102c7720:	e59f30b0 	ldr	r3, [pc, #176]	; 102c77d8 <ATRsp_QBTSPPREAD_Hdlr+0x12c>
102c7724:	e59f10b0 	ldr	r1, [pc, #176]	; 102c77dc <ATRsp_QBTSPPREAD_Hdlr+0x130>
102c7728:	e5933000 	ldr	r3, [r3]
102c772c:	e2842080 	add	r2, r4, #128	; 0x80
102c7730:	e12fff33 	blx	r3
        if (m_nSppRealReadLen > 0)
102c7734:	e5943080 	ldr	r3, [r4, #128]	; 0x80
102c7738:	e3530000 	cmp	r3, #0
        {
            sppReadMode = TRUE;
102c773c:	13a00001 	movne	r0, #1
        }else{  // no more data
            sppReadMode = FALSE;
102c7740:	05c43078 	strbeq	r3, [r4, #120]	; 0x78
            // do nothing, just wait for "OK"
        }
        return  RIL_ATRSP_CONTINUE;
102c7744:	03a00001 	moveq	r0, #1
    if (pHead)
    {
        Ql_sscanf(line, "%*[^:]: %d", &m_nSppRealReadLen);
        if (m_nSppRealReadLen > 0)
        {
            sppReadMode = TRUE;
102c7748:	15c40078 	strbne	r0, [r4, #120]	; 0x78
102c774c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
       }

		sppReadMode = FALSE;
		if(len>m_nSppRealReadLen)
    	{
	    	pHead = Ql_RIL_FindLine(line+m_nSppRealReadLen, len-m_nSppRealReadLen, "OK"); // find <CR><LF>OK<CR><LF>, <CR>OK<CR>£¬<LF>OK<LF>
102c7750:	e0850001 	add	r0, r5, r1
102c7754:	e59f2084 	ldr	r2, [pc, #132]	; 102c77e0 <ATRsp_QBTSPPREAD_Hdlr+0x134>
102c7758:	e0611007 	rsb	r1, r1, r7
102c775c:	e59f3080 	ldr	r3, [pc, #128]	; 102c77e4 <ATRsp_QBTSPPREAD_Hdlr+0x138>
102c7760:	e12fff33 	blx	r3
			if (pHead)
102c7764:	e2700001 	rsbs	r0, r0, #1
102c7768:	33a00000 	movcc	r0, #0
102c776c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
            // do nothing, just wait for "OK"
        }
        return  RIL_ATRSP_CONTINUE;
    }

    pHead = Ql_RIL_FindLine(line, len, "OK"); // find <CR><LF>OK<CR><LF>, <CR>OK<CR>£¬<LF>OK<LF>
102c7770:	e1a01007 	mov	r1, r7
102c7774:	e59f2064 	ldr	r2, [pc, #100]	; 102c77e0 <ATRsp_QBTSPPREAD_Hdlr+0x134>
102c7778:	e59f4064 	ldr	r4, [pc, #100]	; 102c77e4 <ATRsp_QBTSPPREAD_Hdlr+0x138>
102c777c:	e12fff34 	blx	r4
    if (pHead)
102c7780:	e3500000 	cmp	r0, #0
102c7784:	0a000001 	beq	102c7790 <ATRsp_QBTSPPREAD_Hdlr+0xe4>
    {  
	   
       return  RIL_ATRSP_SUCCESS;
102c7788:	e1a00008 	mov	r0, r8
102c778c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    }

    pHead = Ql_RIL_FindLine(line, len, "ERROR");// find <CR><LF>ERROR<CR><LF>, <CR>ERROR<CR>£¬<LF>ERROR<LF>
102c7790:	e1a00005 	mov	r0, r5
102c7794:	e1a01007 	mov	r1, r7
102c7798:	e59f2048 	ldr	r2, [pc, #72]	; 102c77e8 <ATRsp_QBTSPPREAD_Hdlr+0x13c>
102c779c:	e12fff34 	blx	r4
    if (pHead)
102c77a0:	e3500000 	cmp	r0, #0
102c77a4:	0a000001 	beq	102c77b0 <ATRsp_QBTSPPREAD_Hdlr+0x104>
    {  
        return  RIL_ATRSP_FAILED;
102c77a8:	e3e00000 	mvn	r0, #0
102c77ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    } 
    pHead = Ql_RIL_FindString(line, len, "+CME ERROR:");//fail
102c77b0:	e1a00005 	mov	r0, r5
102c77b4:	e1a01007 	mov	r1, r7
102c77b8:	e59f202c 	ldr	r2, [pc, #44]	; 102c77ec <ATRsp_QBTSPPREAD_Hdlr+0x140>
102c77bc:	e12fff36 	blx	r6
    if (pHead)
    {
        return  RIL_ATRSP_FAILED;
102c77c0:	e3e00000 	mvn	r0, #0
102c77c4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
102c77c8:	f03d2058 	.word	0xf03d2058
102c77cc:	102cd738 	.word	0x102cd738
102c77d0:	102cec50 	.word	0x102cec50
102c77d4:	102cbee0 	.word	0x102cbee0
102c77d8:	f03d31f0 	.word	0xf03d31f0
102c77dc:	102cec60 	.word	0x102cec60
102c77e0:	102ceb70 	.word	0x102ceb70
102c77e4:	102cbf6c 	.word	0x102cbf6c
102c77e8:	102ceb74 	.word	0x102ceb74
102c77ec:	102ceb7c 	.word	0x102ceb7c

102c77f0 <ATRsp_QBTGPROF_Hdlr>:
    return RIL_ATRSP_FAILED; //not supported
}


static s32 ATRsp_QBTGPROF_Hdlr(char* line, u32 len, void* param)
{
102c77f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
102c77f4:	e1a06002 	mov	r6, r2
    char* pHead = Ql_RIL_FindString(line, len, "\r\n+QBTGPROF:");
102c77f8:	e59f50a8 	ldr	r5, [pc, #168]	; 102c78a8 <ATRsp_QBTGPROF_Hdlr+0xb8>
102c77fc:	e59f20a8 	ldr	r2, [pc, #168]	; 102c78ac <ATRsp_QBTGPROF_Hdlr+0xbc>
    return RIL_ATRSP_FAILED; //not supported
}


static s32 ATRsp_QBTGPROF_Hdlr(char* line, u32 len, void* param)
{
102c7800:	e1a04000 	mov	r4, r0
102c7804:	e1a08001 	mov	r8, r1
    char* pHead = Ql_RIL_FindString(line, len, "\r\n+QBTGPROF:");
102c7808:	e12fff35 	blx	r5
	static u8 index = 0 ;

    if (pHead)
102c780c:	e2507000 	subs	r7, r0, #0
102c7810:	0a000009 	beq	102c783c <ATRsp_QBTGPROF_Hdlr+0x4c>
    {
        Ql_sscanf(line, "%*[^:]: %d[^\r\n]\r\n", (s32 *)(param)+index);
102c7814:	e59f3094 	ldr	r3, [pc, #148]	; 102c78b0 <ATRsp_QBTGPROF_Hdlr+0xc0>
102c7818:	e1a00004 	mov	r0, r4
102c781c:	e5d32084 	ldrb	r2, [r3, #132]	; 0x84
102c7820:	e59f308c 	ldr	r3, [pc, #140]	; 102c78b4 <ATRsp_QBTGPROF_Hdlr+0xc4>
102c7824:	e59f108c 	ldr	r1, [pc, #140]	; 102c78b8 <ATRsp_QBTGPROF_Hdlr+0xc8>
102c7828:	e5933000 	ldr	r3, [r3]
102c782c:	e0862102 	add	r2, r6, r2, lsl #2
102c7830:	e12fff33 	blx	r3

        return  RIL_ATRSP_CONTINUE;
102c7834:	e3a00001 	mov	r0, #1
102c7838:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    }

    pHead = Ql_RIL_FindLine(line, len, "OK"); // find <CR><LF>OK<CR><LF>, <CR>OK<CR>£¬<LF>OK<LF>
102c783c:	e1a00004 	mov	r0, r4
102c7840:	e1a01008 	mov	r1, r8
102c7844:	e59f2070 	ldr	r2, [pc, #112]	; 102c78bc <ATRsp_QBTGPROF_Hdlr+0xcc>
102c7848:	e59f6070 	ldr	r6, [pc, #112]	; 102c78c0 <ATRsp_QBTGPROF_Hdlr+0xd0>
102c784c:	e12fff36 	blx	r6
    if (pHead)
102c7850:	e3500000 	cmp	r0, #0
102c7854:	0a000003 	beq	102c7868 <ATRsp_QBTGPROF_Hdlr+0x78>
    {  
       index = 0 ;
102c7858:	e59f3050 	ldr	r3, [pc, #80]	; 102c78b0 <ATRsp_QBTGPROF_Hdlr+0xc0>
       return  RIL_ATRSP_SUCCESS;
102c785c:	e1a00007 	mov	r0, r7
    }

    pHead = Ql_RIL_FindLine(line, len, "OK"); // find <CR><LF>OK<CR><LF>, <CR>OK<CR>£¬<LF>OK<LF>
    if (pHead)
    {  
       index = 0 ;
102c7860:	e5c37084 	strb	r7, [r3, #132]	; 0x84
       return  RIL_ATRSP_SUCCESS;
102c7864:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    }

    pHead = Ql_RIL_FindLine(line, len, "ERROR");// find <CR><LF>ERROR<CR><LF>, <CR>ERROR<CR>£¬<LF>ERROR<LF>
102c7868:	e1a00004 	mov	r0, r4
102c786c:	e1a01008 	mov	r1, r8
102c7870:	e59f204c 	ldr	r2, [pc, #76]	; 102c78c4 <ATRsp_QBTGPROF_Hdlr+0xd4>
102c7874:	e12fff36 	blx	r6
    if (pHead)
102c7878:	e3500000 	cmp	r0, #0
102c787c:	1a000007 	bne	102c78a0 <ATRsp_QBTGPROF_Hdlr+0xb0>
    {  
        return  RIL_ATRSP_FAILED;
    } 
    pHead = Ql_RIL_FindString(line, len, "+CME ERROR:");//fail
102c7880:	e1a00004 	mov	r0, r4
102c7884:	e1a01008 	mov	r1, r8
102c7888:	e59f2038 	ldr	r2, [pc, #56]	; 102c78c8 <ATRsp_QBTGPROF_Hdlr+0xd8>
102c788c:	e12fff35 	blx	r5
    if (pHead)
102c7890:	e3500000 	cmp	r0, #0
    {
        return  RIL_ATRSP_FAILED;
102c7894:	03a00001 	moveq	r0, #1
102c7898:	13e00000 	mvnne	r0, #0
102c789c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    }

    pHead = Ql_RIL_FindLine(line, len, "ERROR");// find <CR><LF>ERROR<CR><LF>, <CR>ERROR<CR>£¬<LF>ERROR<LF>
    if (pHead)
    {  
        return  RIL_ATRSP_FAILED;
102c78a0:	e3e00000 	mvn	r0, #0
    {
        return  RIL_ATRSP_FAILED;
    }
    
    return RIL_ATRSP_CONTINUE; //continue wait
}
102c78a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
102c78a8:	102cbee0 	.word	0x102cbee0
102c78ac:	102cec6c 	.word	0x102cec6c
102c78b0:	f03d2058 	.word	0xf03d2058
102c78b4:	f03d31f0 	.word	0xf03d31f0
102c78b8:	102cec7c 	.word	0x102cec7c
102c78bc:	102ceb70 	.word	0x102ceb70
102c78c0:	102cbf6c 	.word	0x102cbf6c
102c78c4:	102ceb74 	.word	0x102ceb74
102c78c8:	102ceb7c 	.word	0x102ceb7c

102c78cc <ATRsp_QBTVISB_Hdlr>:
    return RIL_ATRSP_FAILED; //not supported
}


static s32 ATRsp_QBTVISB_Hdlr(char* line, u32 len, void* param)
{
102c78cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
102c78d0:	e1a06002 	mov	r6, r2

    char* pHead = Ql_RIL_FindString(line, len, "\r\n+QBTVISB:");
102c78d4:	e59f508c 	ldr	r5, [pc, #140]	; 102c7968 <ATRsp_QBTVISB_Hdlr+0x9c>
102c78d8:	e59f208c 	ldr	r2, [pc, #140]	; 102c796c <ATRsp_QBTVISB_Hdlr+0xa0>
    return RIL_ATRSP_FAILED; //not supported
}


static s32 ATRsp_QBTVISB_Hdlr(char* line, u32 len, void* param)
{
102c78dc:	e1a04000 	mov	r4, r0
102c78e0:	e1a07001 	mov	r7, r1

    char* pHead = Ql_RIL_FindString(line, len, "\r\n+QBTVISB:");
102c78e4:	e12fff35 	blx	r5

    if (pHead)
102c78e8:	e2508000 	subs	r8, r0, #0
    {
        Ql_sscanf(line, "%*[^:]: %d\r\n", (s32 *)param);
102c78ec:	e1a00004 	mov	r0, r4
static s32 ATRsp_QBTVISB_Hdlr(char* line, u32 len, void* param)
{

    char* pHead = Ql_RIL_FindString(line, len, "\r\n+QBTVISB:");

    if (pHead)
102c78f0:	0a000006 	beq	102c7910 <ATRsp_QBTVISB_Hdlr+0x44>
    {
        Ql_sscanf(line, "%*[^:]: %d\r\n", (s32 *)param);
102c78f4:	e59f3074 	ldr	r3, [pc, #116]	; 102c7970 <ATRsp_QBTVISB_Hdlr+0xa4>
102c78f8:	e59f1074 	ldr	r1, [pc, #116]	; 102c7974 <ATRsp_QBTVISB_Hdlr+0xa8>
102c78fc:	e5933000 	ldr	r3, [r3]
102c7900:	e1a02006 	mov	r2, r6
102c7904:	e12fff33 	blx	r3

        return  RIL_ATRSP_CONTINUE;
102c7908:	e3a00001 	mov	r0, #1
102c790c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    }

    pHead = Ql_RIL_FindLine(line, len, "OK"); // find <CR><LF>OK<CR><LF>, <CR>OK<CR>£¬<LF>OK<LF>
102c7910:	e1a01007 	mov	r1, r7
102c7914:	e59f205c 	ldr	r2, [pc, #92]	; 102c7978 <ATRsp_QBTVISB_Hdlr+0xac>
102c7918:	e59f605c 	ldr	r6, [pc, #92]	; 102c797c <ATRsp_QBTVISB_Hdlr+0xb0>
102c791c:	e12fff36 	blx	r6
    if (pHead)
102c7920:	e3500000 	cmp	r0, #0
102c7924:	0a000001 	beq	102c7930 <ATRsp_QBTVISB_Hdlr+0x64>
    {  
       return  RIL_ATRSP_SUCCESS;
102c7928:	e1a00008 	mov	r0, r8
102c792c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    }

    pHead = Ql_RIL_FindLine(line, len, "ERROR");// find <CR><LF>ERROR<CR><LF>, <CR>ERROR<CR>£¬<LF>ERROR<LF>
102c7930:	e1a00004 	mov	r0, r4
102c7934:	e1a01007 	mov	r1, r7
102c7938:	e59f2040 	ldr	r2, [pc, #64]	; 102c7980 <ATRsp_QBTVISB_Hdlr+0xb4>
102c793c:	e12fff36 	blx	r6
    if (pHead)
102c7940:	e3500000 	cmp	r0, #0
102c7944:	0a000001 	beq	102c7950 <ATRsp_QBTVISB_Hdlr+0x84>
102c7948:	e3e00000 	mvn	r0, #0
    {
        return  RIL_ATRSP_FAILED;
    }

    return RIL_ATRSP_FAILED; //not supported
}
102c794c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    pHead = Ql_RIL_FindLine(line, len, "ERROR");// find <CR><LF>ERROR<CR><LF>, <CR>ERROR<CR>£¬<LF>ERROR<LF>
    if (pHead)
    {  
        return  RIL_ATRSP_FAILED;
    } 
    pHead = Ql_RIL_FindString(line, len, "+CME ERROR:");//fail
102c7950:	e1a00004 	mov	r0, r4
102c7954:	e1a01007 	mov	r1, r7
102c7958:	e59f2024 	ldr	r2, [pc, #36]	; 102c7984 <ATRsp_QBTVISB_Hdlr+0xb8>
102c795c:	e12fff35 	blx	r5
102c7960:	e3e00000 	mvn	r0, #0
102c7964:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
102c7968:	102cbee0 	.word	0x102cbee0
102c796c:	102cec90 	.word	0x102cec90
102c7970:	f03d31f0 	.word	0xf03d31f0
102c7974:	102ceb88 	.word	0x102ceb88
102c7978:	102ceb70 	.word	0x102ceb70
102c797c:	102cbf6c 	.word	0x102cbf6c
102c7980:	102ceb74 	.word	0x102ceb74
102c7984:	102ceb7c 	.word	0x102ceb7c

102c7988 <ATRsp_QBTADDR_Hdlr>:
        // error
    }
}

static s32 ATRsp_QBTADDR_Hdlr(char* line, u32 len, void* param)
{
102c7988:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
102c798c:	e1a06002 	mov	r6, r2
    char* pHead = Ql_RIL_FindString(line, len, "\r\n+QBTADDR:");
102c7990:	e59f508c 	ldr	r5, [pc, #140]	; 102c7a24 <ATRsp_QBTADDR_Hdlr+0x9c>
102c7994:	e59f208c 	ldr	r2, [pc, #140]	; 102c7a28 <ATRsp_QBTADDR_Hdlr+0xa0>
        // error
    }
}

static s32 ATRsp_QBTADDR_Hdlr(char* line, u32 len, void* param)
{
102c7998:	e1a04000 	mov	r4, r0
102c799c:	e1a07001 	mov	r7, r1
    char* pHead = Ql_RIL_FindString(line, len, "\r\n+QBTADDR:");
102c79a0:	e12fff35 	blx	r5

    if (pHead)
102c79a4:	e2508000 	subs	r8, r0, #0
    {
        // +QBTADDR: 1488CD1F6261
        Ql_sscanf(line, "%*[^:]: %[^\r\n]\r\n", (char*)param);
102c79a8:	e1a00004 	mov	r0, r4

static s32 ATRsp_QBTADDR_Hdlr(char* line, u32 len, void* param)
{
    char* pHead = Ql_RIL_FindString(line, len, "\r\n+QBTADDR:");

    if (pHead)
102c79ac:	0a000006 	beq	102c79cc <ATRsp_QBTADDR_Hdlr+0x44>
    {
        // +QBTADDR: 1488CD1F6261
        Ql_sscanf(line, "%*[^:]: %[^\r\n]\r\n", (char*)param);
102c79b0:	e59f3074 	ldr	r3, [pc, #116]	; 102c7a2c <ATRsp_QBTADDR_Hdlr+0xa4>
102c79b4:	e59f1074 	ldr	r1, [pc, #116]	; 102c7a30 <ATRsp_QBTADDR_Hdlr+0xa8>
102c79b8:	e5933000 	ldr	r3, [r3]
102c79bc:	e1a02006 	mov	r2, r6
102c79c0:	e12fff33 	blx	r3
        return  RIL_ATRSP_CONTINUE;
102c79c4:	e3a00001 	mov	r0, #1
102c79c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    }

    pHead = Ql_RIL_FindLine(line, len, "OK"); // find <CR><LF>OK<CR><LF>, <CR>OK<CR>£¬<LF>OK<LF>
102c79cc:	e1a01007 	mov	r1, r7
102c79d0:	e59f205c 	ldr	r2, [pc, #92]	; 102c7a34 <ATRsp_QBTADDR_Hdlr+0xac>
102c79d4:	e59f605c 	ldr	r6, [pc, #92]	; 102c7a38 <ATRsp_QBTADDR_Hdlr+0xb0>
102c79d8:	e12fff36 	blx	r6
    if (pHead)
102c79dc:	e3500000 	cmp	r0, #0
102c79e0:	0a000001 	beq	102c79ec <ATRsp_QBTADDR_Hdlr+0x64>
    {  
       return  RIL_ATRSP_SUCCESS;
102c79e4:	e1a00008 	mov	r0, r8
102c79e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    }

    pHead = Ql_RIL_FindLine(line, len, "ERROR");// find <CR><LF>ERROR<CR><LF>, <CR>ERROR<CR>£¬<LF>ERROR<LF>
102c79ec:	e1a00004 	mov	r0, r4
102c79f0:	e1a01007 	mov	r1, r7
102c79f4:	e59f2040 	ldr	r2, [pc, #64]	; 102c7a3c <ATRsp_QBTADDR_Hdlr+0xb4>
102c79f8:	e12fff36 	blx	r6
    if (pHead)
102c79fc:	e3500000 	cmp	r0, #0
102c7a00:	0a000001 	beq	102c7a0c <ATRsp_QBTADDR_Hdlr+0x84>
102c7a04:	e3e00000 	mvn	r0, #0
    {
        return  RIL_ATRSP_FAILED;
    }

    return RIL_ATRSP_FAILED; //not supported
}
102c7a08:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    pHead = Ql_RIL_FindLine(line, len, "ERROR");// find <CR><LF>ERROR<CR><LF>, <CR>ERROR<CR>£¬<LF>ERROR<LF>
    if (pHead)
    {  
        return  RIL_ATRSP_FAILED;
    } 
    pHead = Ql_RIL_FindString(line, len, "+CME ERROR:");//fail
102c7a0c:	e1a00004 	mov	r0, r4
102c7a10:	e1a01007 	mov	r1, r7
102c7a14:	e59f2024 	ldr	r2, [pc, #36]	; 102c7a40 <ATRsp_QBTADDR_Hdlr+0xb8>
102c7a18:	e12fff35 	blx	r5
102c7a1c:	e3e00000 	mvn	r0, #0
102c7a20:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
102c7a24:	102cbee0 	.word	0x102cbee0
102c7a28:	102cec9c 	.word	0x102cec9c
102c7a2c:	f03d31f0 	.word	0xf03d31f0
102c7a30:	102ceca8 	.word	0x102ceca8
102c7a34:	102ceb70 	.word	0x102ceb70
102c7a38:	102cbf6c 	.word	0x102cbf6c
102c7a3c:	102ceb74 	.word	0x102ceb74
102c7a40:	102ceb7c 	.word	0x102ceb7c

102c7a44 <ATRsp_QBTNAME_Hdlr>:
}



static s32 ATRsp_QBTNAME_Hdlr(char* line, u32 len, void* param)
{
102c7a44:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
102c7a48:	e1a06002 	mov	r6, r2

    char* pHead = Ql_RIL_FindString(line, len, "\r\n+QBTNAME:");
102c7a4c:	e59f508c 	ldr	r5, [pc, #140]	; 102c7ae0 <ATRsp_QBTNAME_Hdlr+0x9c>
102c7a50:	e59f208c 	ldr	r2, [pc, #140]	; 102c7ae4 <ATRsp_QBTNAME_Hdlr+0xa0>
}



static s32 ATRsp_QBTNAME_Hdlr(char* line, u32 len, void* param)
{
102c7a54:	e1a04000 	mov	r4, r0
102c7a58:	e1a07001 	mov	r7, r1

    char* pHead = Ql_RIL_FindString(line, len, "\r\n+QBTNAME:");
102c7a5c:	e12fff35 	blx	r5

    if (pHead)
102c7a60:	e2508000 	subs	r8, r0, #0
    {
        Ql_sscanf(line, "%*[^\"]\"%[^\"]%*[^\r\n]\r\n", (char*)param);
102c7a64:	e1a00004 	mov	r0, r4
static s32 ATRsp_QBTNAME_Hdlr(char* line, u32 len, void* param)
{

    char* pHead = Ql_RIL_FindString(line, len, "\r\n+QBTNAME:");

    if (pHead)
102c7a68:	0a000006 	beq	102c7a88 <ATRsp_QBTNAME_Hdlr+0x44>
    {
        Ql_sscanf(line, "%*[^\"]\"%[^\"]%*[^\r\n]\r\n", (char*)param);
102c7a6c:	e59f3074 	ldr	r3, [pc, #116]	; 102c7ae8 <ATRsp_QBTNAME_Hdlr+0xa4>
102c7a70:	e59f1074 	ldr	r1, [pc, #116]	; 102c7aec <ATRsp_QBTNAME_Hdlr+0xa8>
102c7a74:	e5933000 	ldr	r3, [r3]
102c7a78:	e1a02006 	mov	r2, r6
102c7a7c:	e12fff33 	blx	r3

        return  RIL_ATRSP_CONTINUE;
102c7a80:	e3a00001 	mov	r0, #1
102c7a84:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    }

    pHead = Ql_RIL_FindLine(line, len, "OK"); // find <CR><LF>OK<CR><LF>, <CR>OK<CR>£¬<LF>OK<LF>
102c7a88:	e1a01007 	mov	r1, r7
102c7a8c:	e59f205c 	ldr	r2, [pc, #92]	; 102c7af0 <ATRsp_QBTNAME_Hdlr+0xac>
102c7a90:	e59f605c 	ldr	r6, [pc, #92]	; 102c7af4 <ATRsp_QBTNAME_Hdlr+0xb0>
102c7a94:	e12fff36 	blx	r6
    if (pHead)
102c7a98:	e3500000 	cmp	r0, #0
102c7a9c:	0a000001 	beq	102c7aa8 <ATRsp_QBTNAME_Hdlr+0x64>
    {  
       return  RIL_ATRSP_SUCCESS;
102c7aa0:	e1a00008 	mov	r0, r8
102c7aa4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    }

    pHead = Ql_RIL_FindLine(line, len, "ERROR");// find <CR><LF>ERROR<CR><LF>, <CR>ERROR<CR>£¬<LF>ERROR<LF>
102c7aa8:	e1a00004 	mov	r0, r4
102c7aac:	e1a01007 	mov	r1, r7
102c7ab0:	e59f2040 	ldr	r2, [pc, #64]	; 102c7af8 <ATRsp_QBTNAME_Hdlr+0xb4>
102c7ab4:	e12fff36 	blx	r6
    if (pHead)
102c7ab8:	e3500000 	cmp	r0, #0
102c7abc:	0a000001 	beq	102c7ac8 <ATRsp_QBTNAME_Hdlr+0x84>
102c7ac0:	e3e00000 	mvn	r0, #0
    {
        return  RIL_ATRSP_FAILED;
    }

    return RIL_ATRSP_FAILED; //not supported
}
102c7ac4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    pHead = Ql_RIL_FindLine(line, len, "ERROR");// find <CR><LF>ERROR<CR><LF>, <CR>ERROR<CR>£¬<LF>ERROR<LF>
    if (pHead)
    {  
        return  RIL_ATRSP_FAILED;
    } 
    pHead = Ql_RIL_FindString(line, len, "+CME ERROR:");//fail
102c7ac8:	e1a00004 	mov	r0, r4
102c7acc:	e1a01007 	mov	r1, r7
102c7ad0:	e59f2024 	ldr	r2, [pc, #36]	; 102c7afc <ATRsp_QBTNAME_Hdlr+0xb8>
102c7ad4:	e12fff35 	blx	r5
102c7ad8:	e3e00000 	mvn	r0, #0
102c7adc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
102c7ae0:	102cbee0 	.word	0x102cbee0
102c7ae4:	102cecbc 	.word	0x102cecbc
102c7ae8:	f03d31f0 	.word	0xf03d31f0
102c7aec:	102cebdc 	.word	0x102cebdc
102c7af0:	102ceb70 	.word	0x102ceb70
102c7af4:	102cbf6c 	.word	0x102cbf6c
102c7af8:	102ceb74 	.word	0x102ceb74
102c7afc:	102ceb7c 	.word	0x102ceb7c

102c7b00 <ATRsp_QBTPWR_Hdlr>:
    return RIL_ATRSP_CONTINUE; //continue wait
}


static s32 ATRsp_QBTPWR_Hdlr(char* line, u32 len, void* param)
{
102c7b00:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
102c7b04:	e1a06002 	mov	r6, r2

    char* pHead = Ql_RIL_FindString(line, len, "\r\n+QBTPWR:");
102c7b08:	e59f508c 	ldr	r5, [pc, #140]	; 102c7b9c <ATRsp_QBTPWR_Hdlr+0x9c>
102c7b0c:	e59f208c 	ldr	r2, [pc, #140]	; 102c7ba0 <ATRsp_QBTPWR_Hdlr+0xa0>
    return RIL_ATRSP_CONTINUE; //continue wait
}


static s32 ATRsp_QBTPWR_Hdlr(char* line, u32 len, void* param)
{
102c7b10:	e1a04000 	mov	r4, r0
102c7b14:	e1a07001 	mov	r7, r1

    char* pHead = Ql_RIL_FindString(line, len, "\r\n+QBTPWR:");
102c7b18:	e12fff35 	blx	r5
  
    if (pHead)
102c7b1c:	e2508000 	subs	r8, r0, #0
    {
        Ql_sscanf(line, "%*[^:]: %d\r\n", (s32*)param);
102c7b20:	e1a00004 	mov	r0, r4
static s32 ATRsp_QBTPWR_Hdlr(char* line, u32 len, void* param)
{

    char* pHead = Ql_RIL_FindString(line, len, "\r\n+QBTPWR:");
  
    if (pHead)
102c7b24:	0a000006 	beq	102c7b44 <ATRsp_QBTPWR_Hdlr+0x44>
    {
        Ql_sscanf(line, "%*[^:]: %d\r\n", (s32*)param);
102c7b28:	e59f3074 	ldr	r3, [pc, #116]	; 102c7ba4 <ATRsp_QBTPWR_Hdlr+0xa4>
102c7b2c:	e59f1074 	ldr	r1, [pc, #116]	; 102c7ba8 <ATRsp_QBTPWR_Hdlr+0xa8>
102c7b30:	e5933000 	ldr	r3, [r3]
102c7b34:	e1a02006 	mov	r2, r6
102c7b38:	e12fff33 	blx	r3

        return  RIL_ATRSP_CONTINUE;
102c7b3c:	e3a00001 	mov	r0, #1
102c7b40:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    }

    pHead = Ql_RIL_FindLine(line, len, "OK"); // find <CR><LF>OK<CR><LF>, <CR>OK<CR>£¬<LF>OK<LF>
102c7b44:	e1a01007 	mov	r1, r7
102c7b48:	e59f205c 	ldr	r2, [pc, #92]	; 102c7bac <ATRsp_QBTPWR_Hdlr+0xac>
102c7b4c:	e59f605c 	ldr	r6, [pc, #92]	; 102c7bb0 <ATRsp_QBTPWR_Hdlr+0xb0>
102c7b50:	e12fff36 	blx	r6
    if (pHead)
102c7b54:	e3500000 	cmp	r0, #0
102c7b58:	0a000001 	beq	102c7b64 <ATRsp_QBTPWR_Hdlr+0x64>
    {  
       return  RIL_ATRSP_SUCCESS;
102c7b5c:	e1a00008 	mov	r0, r8
102c7b60:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    }

    pHead = Ql_RIL_FindLine(line, len, "ERROR");// find <CR><LF>ERROR<CR><LF>, <CR>ERROR<CR>£¬<LF>ERROR<LF>
102c7b64:	e1a00004 	mov	r0, r4
102c7b68:	e1a01007 	mov	r1, r7
102c7b6c:	e59f2040 	ldr	r2, [pc, #64]	; 102c7bb4 <ATRsp_QBTPWR_Hdlr+0xb4>
102c7b70:	e12fff36 	blx	r6
    if (pHead)
102c7b74:	e3500000 	cmp	r0, #0
102c7b78:	0a000001 	beq	102c7b84 <ATRsp_QBTPWR_Hdlr+0x84>
102c7b7c:	e3e00000 	mvn	r0, #0
    {
        return  RIL_ATRSP_FAILED;
    }

    return RIL_ATRSP_FAILED; //not supported
}
102c7b80:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    pHead = Ql_RIL_FindLine(line, len, "ERROR");// find <CR><LF>ERROR<CR><LF>, <CR>ERROR<CR>£¬<LF>ERROR<LF>
    if (pHead)
    {  
        return  RIL_ATRSP_FAILED;
    } 
    pHead = Ql_RIL_FindString(line, len, "+CME ERROR:");//fail
102c7b84:	e1a00004 	mov	r0, r4
102c7b88:	e1a01007 	mov	r1, r7
102c7b8c:	e59f2024 	ldr	r2, [pc, #36]	; 102c7bb8 <ATRsp_QBTPWR_Hdlr+0xb8>
102c7b90:	e12fff35 	blx	r5
102c7b94:	e3e00000 	mvn	r0, #0
102c7b98:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
102c7b9c:	102cbee0 	.word	0x102cbee0
102c7ba0:	102cecc8 	.word	0x102cecc8
102c7ba4:	f03d31f0 	.word	0xf03d31f0
102c7ba8:	102ceb88 	.word	0x102ceb88
102c7bac:	102ceb70 	.word	0x102ceb70
102c7bb0:	102cbf6c 	.word	0x102cbf6c
102c7bb4:	102ceb74 	.word	0x102ceb74
102c7bb8:	102ceb7c 	.word	0x102ceb7c

102c7bbc <ATRsp_QBTSPPSEND_Hdlr>:
    }

    return RIL_ATRSP_FAILED; //not supported
}
static s32 ATRsp_QBTSPPSEND_Hdlr(char* line, u32 len, void* param)
{
102c7bbc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
102c7bc0:	e1a04002 	mov	r4, r2
    
    char* pHead = Ql_RIL_FindString(line, len, ">\r\n");
102c7bc4:	e59f50a8 	ldr	r5, [pc, #168]	; 102c7c74 <ATRsp_QBTSPPSEND_Hdlr+0xb8>
102c7bc8:	e59f20a8 	ldr	r2, [pc, #168]	; 102c7c78 <ATRsp_QBTSPPSEND_Hdlr+0xbc>
    }

    return RIL_ATRSP_FAILED; //not supported
}
static s32 ATRsp_QBTSPPSEND_Hdlr(char* line, u32 len, void* param)
{
102c7bcc:	e1a07000 	mov	r7, r0
102c7bd0:	e1a06001 	mov	r6, r1
    
    char* pHead = Ql_RIL_FindString(line, len, ">\r\n");
102c7bd4:	e12fff35 	blx	r5
    u32 ret = 0;
    
    if (pHead)
102c7bd8:	e2508000 	subs	r8, r0, #0
102c7bdc:	0a000009 	beq	102c7c08 <ATRsp_QBTSPPSEND_Hdlr+0x4c>
    {
        
        ret = Ql_RIL_WriteDataToCore(m_ptrSppData, m_nSppDataLenToSnd);
102c7be0:	e59f3094 	ldr	r3, [pc, #148]	; 102c7c7c <ATRsp_QBTSPPSEND_Hdlr+0xc0>
102c7be4:	e5930088 	ldr	r0, [r3, #136]	; 0x88
102c7be8:	e593108c 	ldr	r1, [r3, #140]	; 0x8c
102c7bec:	e59f308c 	ldr	r3, [pc, #140]	; 102c7c80 <ATRsp_QBTSPPSEND_Hdlr+0xc4>
102c7bf0:	e12fff33 	blx	r3

        if(NULL != param && ret >= 0 )
102c7bf4:	e3540000 	cmp	r4, #0
102c7bf8:	0a00000b 	beq	102c7c2c <ATRsp_QBTSPPSEND_Hdlr+0x70>
        {
            *(u32 *)param = ret ;
102c7bfc:	e5840000 	str	r0, [r4]
        }
        return  RIL_ATRSP_CONTINUE;
102c7c00:	e3a00001 	mov	r0, #1
102c7c04:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    }

    pHead = Ql_RIL_FindLine(line, len, "OK"); // find <CR><LF>OK<CR><LF>, <CR>OK<CR>£¬<LF>OK<LF>
102c7c08:	e1a00007 	mov	r0, r7
102c7c0c:	e1a01006 	mov	r1, r6
102c7c10:	e59f206c 	ldr	r2, [pc, #108]	; 102c7c84 <ATRsp_QBTSPPSEND_Hdlr+0xc8>
102c7c14:	e59f406c 	ldr	r4, [pc, #108]	; 102c7c88 <ATRsp_QBTSPPSEND_Hdlr+0xcc>
102c7c18:	e12fff34 	blx	r4
    if (pHead)
102c7c1c:	e3500000 	cmp	r0, #0
102c7c20:	0a000003 	beq	102c7c34 <ATRsp_QBTSPPSEND_Hdlr+0x78>
    {  
        return  RIL_ATRSP_SUCCESS;
102c7c24:	e1a00008 	mov	r0, r8
102c7c28:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

        if(NULL != param && ret >= 0 )
        {
            *(u32 *)param = ret ;
        }
        return  RIL_ATRSP_CONTINUE;
102c7c2c:	e3a00001 	mov	r0, #1
102c7c30:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    if (pHead)
    {  
        return  RIL_ATRSP_SUCCESS;
    }

    pHead = Ql_RIL_FindLine(line, len, "ERROR");// find <CR><LF>ERROR<CR><LF>, <CR>ERROR<CR>£¬<LF>ERROR<LF>
102c7c34:	e1a00007 	mov	r0, r7
102c7c38:	e1a01006 	mov	r1, r6
102c7c3c:	e59f2048 	ldr	r2, [pc, #72]	; 102c7c8c <ATRsp_QBTSPPSEND_Hdlr+0xd0>
102c7c40:	e12fff34 	blx	r4
    if (pHead)
102c7c44:	e3500000 	cmp	r0, #0
102c7c48:	1a000007 	bne	102c7c6c <ATRsp_QBTSPPSEND_Hdlr+0xb0>
    {  
        return  RIL_ATRSP_FAILED;
    } 

    pHead = Ql_RIL_FindString(line, len, "+CME ERROR:");//fail
102c7c4c:	e1a00007 	mov	r0, r7
102c7c50:	e1a01006 	mov	r1, r6
102c7c54:	e59f2034 	ldr	r2, [pc, #52]	; 102c7c90 <ATRsp_QBTSPPSEND_Hdlr+0xd4>
102c7c58:	e12fff35 	blx	r5
    if (pHead)
102c7c5c:	e3500000 	cmp	r0, #0
    {
        return  RIL_ATRSP_FAILED;
102c7c60:	03a00001 	moveq	r0, #1
102c7c64:	13e00000 	mvnne	r0, #0
102c7c68:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    }

    pHead = Ql_RIL_FindLine(line, len, "ERROR");// find <CR><LF>ERROR<CR><LF>, <CR>ERROR<CR>£¬<LF>ERROR<LF>
    if (pHead)
    {  
        return  RIL_ATRSP_FAILED;
102c7c6c:	e3e00000 	mvn	r0, #0
    {
        return  RIL_ATRSP_FAILED;
    }

    return RIL_ATRSP_CONTINUE; //continue wait
}
102c7c70:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
102c7c74:	102cbee0 	.word	0x102cbee0
102c7c78:	102cf590 	.word	0x102cf590
102c7c7c:	f03d2058 	.word	0xf03d2058
102c7c80:	102cd37c 	.word	0x102cd37c
102c7c84:	102ceb70 	.word	0x102ceb70
102c7c88:	102cbf6c 	.word	0x102cbf6c
102c7c8c:	102ceb74 	.word	0x102ceb74
102c7c90:	102ceb7c 	.word	0x102ceb7c

102c7c94 <BT_DevMngmt_GetDeviceId>:
    return 0;
}


s32 BT_DevMngmt_GetDeviceId(const u32 hdl)
{
102c7c94:	e59f302c 	ldr	r3, [pc, #44]	; 102c7cc8 <BT_DevMngmt_GetDeviceId+0x34>
    }
    return 0;
}


s32 BT_DevMngmt_GetDeviceId(const u32 hdl)
102c7c98:	e283c078 	add	ip, r3, #120	; 0x78
102c7c9c:	ea000001 	b	102c7ca8 <BT_DevMngmt_GetDeviceId+0x14>
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c7ca0:	e153000c 	cmp	r3, ip
102c7ca4:	0a000005 	beq	102c7cc0 <BT_DevMngmt_GetDeviceId+0x2c>
    {
        if (hdl == m_arrBTDev[i]->btDevice.devHdl)
102c7ca8:	e5b32004 	ldr	r2, [r3, #4]!
102c7cac:	e5921000 	ldr	r1, [r2]
102c7cb0:	e1510000 	cmp	r1, r0
102c7cb4:	1afffff9 	bne	102c7ca0 <BT_DevMngmt_GetDeviceId+0xc>
        {
            return m_arrBTDev[i]->devId;
102c7cb8:	e592004c 	ldr	r0, [r2, #76]	; 0x4c
102c7cbc:	e12fff1e 	bx	lr
        }
    }
    return 0;
102c7cc0:	e3a00000 	mov	r0, #0
}
102c7cc4:	e12fff1e 	bx	lr
102c7cc8:	f03d2054 	.word	0xf03d2054

102c7ccc <BT_DevMngmt_GetPairedId>:


s32 BT_DevMngmt_GetPairedId(const u32 hdl)
{
102c7ccc:	e59f302c 	ldr	r3, [pc, #44]	; 102c7d00 <BT_DevMngmt_GetPairedId+0x34>
    }
    return 0;
}


s32 BT_DevMngmt_GetPairedId(const u32 hdl)
102c7cd0:	e283c078 	add	ip, r3, #120	; 0x78
102c7cd4:	ea000001 	b	102c7ce0 <BT_DevMngmt_GetPairedId+0x14>
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c7cd8:	e153000c 	cmp	r3, ip
102c7cdc:	0a000005 	beq	102c7cf8 <BT_DevMngmt_GetPairedId+0x2c>
    {
        if (hdl == m_arrBTDev[i]->btDevice.devHdl)
102c7ce0:	e5b32004 	ldr	r2, [r3, #4]!
102c7ce4:	e5921000 	ldr	r1, [r2]
102c7ce8:	e1510000 	cmp	r1, r0
102c7cec:	1afffff9 	bne	102c7cd8 <BT_DevMngmt_GetPairedId+0xc>
        {
            return m_arrBTDev[i]->pairId;
102c7cf0:	e5920050 	ldr	r0, [r2, #80]	; 0x50
102c7cf4:	e12fff1e 	bx	lr
        }
    }
    return 0;
102c7cf8:	e3a00000 	mov	r0, #0
}
102c7cfc:	e12fff1e 	bx	lr
102c7d00:	f03d2054 	.word	0xf03d2054

102c7d04 <BT_DevMngmt_GetConnId>:
s32 BT_DevMngmt_GetConnId(const u32 hdl)
{
102c7d04:	e59f302c 	ldr	r3, [pc, #44]	; 102c7d38 <BT_DevMngmt_GetConnId+0x34>
            return m_arrBTDev[i]->pairId;
        }
    }
    return 0;
}
s32 BT_DevMngmt_GetConnId(const u32 hdl)
102c7d08:	e283c078 	add	ip, r3, #120	; 0x78
102c7d0c:	ea000001 	b	102c7d18 <BT_DevMngmt_GetConnId+0x14>
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c7d10:	e153000c 	cmp	r3, ip
102c7d14:	0a000005 	beq	102c7d30 <BT_DevMngmt_GetConnId+0x2c>
    {
        if (hdl == m_arrBTDev[i]->btDevice.devHdl)
102c7d18:	e5b32004 	ldr	r2, [r3, #4]!
102c7d1c:	e5921000 	ldr	r1, [r2]
102c7d20:	e1510000 	cmp	r1, r0
102c7d24:	1afffff9 	bne	102c7d10 <BT_DevMngmt_GetConnId+0xc>
        {
            return m_arrBTDev[i]->connId;
102c7d28:	e5920054 	ldr	r0, [r2, #84]	; 0x54
102c7d2c:	e12fff1e 	bx	lr
        }
    }
    return 0;
102c7d30:	e3a00000 	mov	r0, #0
}
102c7d34:	e12fff1e 	bx	lr
102c7d38:	f03d2054 	.word	0xf03d2054

102c7d3c <BT_DevMngmt_GetProfileId>:

s32 BT_DevMngmt_GetProfileId(const u32 hdl)
{
102c7d3c:	e59f302c 	ldr	r3, [pc, #44]	; 102c7d70 <BT_DevMngmt_GetProfileId+0x34>
        }
    }
    return 0;
}

s32 BT_DevMngmt_GetProfileId(const u32 hdl)
102c7d40:	e283c078 	add	ip, r3, #120	; 0x78
102c7d44:	ea000001 	b	102c7d50 <BT_DevMngmt_GetProfileId+0x14>
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c7d48:	e153000c 	cmp	r3, ip
102c7d4c:	0a000005 	beq	102c7d68 <BT_DevMngmt_GetProfileId+0x2c>
    {
        if (hdl == m_arrBTDev[i]->btDevice.devHdl)
102c7d50:	e5b32004 	ldr	r2, [r3, #4]!
102c7d54:	e5921000 	ldr	r1, [r2]
102c7d58:	e1510000 	cmp	r1, r0
102c7d5c:	1afffff9 	bne	102c7d48 <BT_DevMngmt_GetProfileId+0xc>
        {
            return m_arrBTDev[i]->profileId;
102c7d60:	e5920058 	ldr	r0, [r2, #88]	; 0x58
102c7d64:	e12fff1e 	bx	lr
        }
    }
    return 0;
102c7d68:	e3a00000 	mov	r0, #0
}
102c7d6c:	e12fff1e 	bx	lr
102c7d70:	f03d2054 	.word	0xf03d2054

102c7d74 <BT_DevMngmt_GetDevName>:

char *BT_DevMngmt_GetDevName(const u32 hdl)
{
102c7d74:	e59f302c 	ldr	r3, [pc, #44]	; 102c7da8 <BT_DevMngmt_GetDevName+0x34>
        }
    }
    return 0;
}

char *BT_DevMngmt_GetDevName(const u32 hdl)
102c7d78:	e283c078 	add	ip, r3, #120	; 0x78
102c7d7c:	ea000001 	b	102c7d88 <BT_DevMngmt_GetDevName+0x14>
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c7d80:	e153000c 	cmp	r3, ip
102c7d84:	0a000005 	beq	102c7da0 <BT_DevMngmt_GetDevName+0x2c>
    {
        if (hdl == m_arrBTDev[i]->btDevice.devHdl)
102c7d88:	e5b32004 	ldr	r2, [r3, #4]!
102c7d8c:	e5921000 	ldr	r1, [r2]
102c7d90:	e1510000 	cmp	r1, r0
102c7d94:	1afffff9 	bne	102c7d80 <BT_DevMngmt_GetDevName+0xc>
        {
            return m_arrBTDev[i]->btDevice.name;
102c7d98:	e2820004 	add	r0, r2, #4
102c7d9c:	e12fff1e 	bx	lr
        }
    }
    return NULL;
102c7da0:	e3a00000 	mov	r0, #0
}
102c7da4:	e12fff1e 	bx	lr
102c7da8:	f03d2054 	.word	0xf03d2054

102c7dac <BT_DevMngmt_GetDevAddr>:


char * BT_DevMngmt_GetDevAddr(const u32 hdl)
{
102c7dac:	e59f302c 	ldr	r3, [pc, #44]	; 102c7de0 <BT_DevMngmt_GetDevAddr+0x34>
    }
    return NULL;
}


char * BT_DevMngmt_GetDevAddr(const u32 hdl)
102c7db0:	e283c078 	add	ip, r3, #120	; 0x78
102c7db4:	ea000001 	b	102c7dc0 <BT_DevMngmt_GetDevAddr+0x14>
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c7db8:	e153000c 	cmp	r3, ip
102c7dbc:	0a000005 	beq	102c7dd8 <BT_DevMngmt_GetDevAddr+0x2c>
    {
        if (hdl == m_arrBTDev[i]->btDevice.devHdl)
102c7dc0:	e5b32004 	ldr	r2, [r3, #4]!
102c7dc4:	e5921000 	ldr	r1, [r2]
102c7dc8:	e1510000 	cmp	r1, r0
102c7dcc:	1afffff9 	bne	102c7db8 <BT_DevMngmt_GetDevAddr+0xc>
        {
            return m_arrBTDev[i]->btDevice.addr;
102c7dd0:	e282003c 	add	r0, r2, #60	; 0x3c
102c7dd4:	e12fff1e 	bx	lr
        }
    }
    return NULL;
102c7dd8:	e3a00000 	mov	r0, #0
}
102c7ddc:	e12fff1e 	bx	lr
102c7de0:	f03d2054 	.word	0xf03d2054

102c7de4 <RIL_BT_Switch>:
*****************************************************************/
s32 RIL_BT_Switch(u8 on_off)
{
    char strAT[20];

    if (on_off < BT_OFF || on_off > BT_ON)
102c7de4:	e3500001 	cmp	r0, #1
*                RIL_AT_BUSY,   sending AT.
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_Switch(u8 on_off)
{
102c7de8:	e92d4010 	push	{r4, lr}
102c7dec:	e1a04000 	mov	r4, r0
102c7df0:	e24dd020 	sub	sp, sp, #32
    char strAT[20];

    if (on_off < BT_OFF || on_off > BT_ON)
    {
        return RIL_AT_INVALID_PARAM;
102c7df4:	83e00003 	mvnhi	r0, #3
*****************************************************************/
s32 RIL_BT_Switch(u8 on_off)
{
    char strAT[20];

    if (on_off < BT_OFF || on_off > BT_ON)
102c7df8:	8a000014 	bhi	102c7e50 <RIL_BT_Switch+0x6c>
    {
        return RIL_AT_INVALID_PARAM;
    }
    
    Ql_memset(strAT, 0x0, sizeof(strAT));
102c7dfc:	e3a01000 	mov	r1, #0
102c7e00:	e3a02014 	mov	r2, #20
102c7e04:	e59f304c 	ldr	r3, [pc, #76]	; 102c7e58 <RIL_BT_Switch+0x74>
102c7e08:	e28d000c 	add	r0, sp, #12
102c7e0c:	e12fff33 	blx	r3
    Ql_sprintf(strAT, "AT+QBTPWR=%d", on_off);
102c7e10:	e59f3044 	ldr	r3, [pc, #68]	; 102c7e5c <RIL_BT_Switch+0x78>
102c7e14:	e59f1044 	ldr	r1, [pc, #68]	; 102c7e60 <RIL_BT_Switch+0x7c>
102c7e18:	e1a02004 	mov	r2, r4
102c7e1c:	e5933000 	ldr	r3, [r3]
102c7e20:	e28d000c 	add	r0, sp, #12
102c7e24:	e12fff33 	blx	r3
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), NULL, NULL, 0);
102c7e28:	e59f3034 	ldr	r3, [pc, #52]	; 102c7e64 <RIL_BT_Switch+0x80>
102c7e2c:	e28d000c 	add	r0, sp, #12
102c7e30:	e12fff33 	blx	r3
102c7e34:	e3a03000 	mov	r3, #0
102c7e38:	e1a02003 	mov	r2, r3
102c7e3c:	e58d3000 	str	r3, [sp]
102c7e40:	e59fc020 	ldr	ip, [pc, #32]	; 102c7e68 <RIL_BT_Switch+0x84>
102c7e44:	e1a01000 	mov	r1, r0
102c7e48:	e28d000c 	add	r0, sp, #12
102c7e4c:	e12fff3c 	blx	ip
}
102c7e50:	e28dd020 	add	sp, sp, #32
102c7e54:	e8bd8010 	pop	{r4, pc}
102c7e58:	102cd6b0 	.word	0x102cd6b0
102c7e5c:	f03d31e8 	.word	0xf03d31e8
102c7e60:	102cecd4 	.word	0x102cecd4
102c7e64:	102cd560 	.word	0x102cd560
102c7e68:	102cd11c 	.word	0x102cd11c

102c7e6c <RIL_BT_GetPwrState>:
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_GetPwrState(s32 *p_on_off)
{
    char strAT[] = "AT+QBTPWR?\0";
102c7e6c:	e59f2058 	ldr	r2, [pc, #88]	; 102c7ecc <RIL_BT_GetPwrState+0x60>
*                RIL_AT_BUSY,   sending AT.
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_GetPwrState(s32 *p_on_off)
{
102c7e70:	e92d4030 	push	{r4, r5, lr}
102c7e74:	e1a05000 	mov	r5, r0
    char strAT[] = "AT+QBTPWR?\0";
102c7e78:	e8920007 	ldm	r2, {r0, r1, r2}
*                RIL_AT_BUSY,   sending AT.
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_GetPwrState(s32 *p_on_off)
{
102c7e7c:	e24dd01c 	sub	sp, sp, #28
    char strAT[] = "AT+QBTPWR?\0";
102c7e80:	e28d400c 	add	r4, sp, #12
    
    if (NULL == p_on_off)
102c7e84:	e3550000 	cmp	r5, #0
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_GetPwrState(s32 *p_on_off)
{
    char strAT[] = "AT+QBTPWR?\0";
102c7e88:	e8840007 	stm	r4, {r0, r1, r2}
    
    if (NULL == p_on_off)
102c7e8c:	0a00000c 	beq	102c7ec4 <RIL_BT_GetPwrState+0x58>
    {
        return RIL_AT_INVALID_PARAM;
    }
    
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), ATRsp_QBTPWR_Hdlr, (void*)p_on_off, 0);
102c7e90:	e59f3038 	ldr	r3, [pc, #56]	; 102c7ed0 <RIL_BT_GetPwrState+0x64>
102c7e94:	e1a00004 	mov	r0, r4
102c7e98:	e12fff33 	blx	r3
102c7e9c:	e3a03000 	mov	r3, #0
102c7ea0:	e58d3000 	str	r3, [sp]
102c7ea4:	e59f2028 	ldr	r2, [pc, #40]	; 102c7ed4 <RIL_BT_GetPwrState+0x68>
102c7ea8:	e1a03005 	mov	r3, r5
102c7eac:	e59fc024 	ldr	ip, [pc, #36]	; 102c7ed8 <RIL_BT_GetPwrState+0x6c>
102c7eb0:	e1a01000 	mov	r1, r0
102c7eb4:	e1a00004 	mov	r0, r4
102c7eb8:	e12fff3c 	blx	ip
}
102c7ebc:	e28dd01c 	add	sp, sp, #28
102c7ec0:	e8bd8030 	pop	{r4, r5, pc}
{
    char strAT[] = "AT+QBTPWR?\0";
    
    if (NULL == p_on_off)
    {
        return RIL_AT_INVALID_PARAM;
102c7ec4:	e3e00003 	mvn	r0, #3
102c7ec8:	eafffffb 	b	102c7ebc <RIL_BT_GetPwrState+0x50>
102c7ecc:	102ce084 	.word	0x102ce084
102c7ed0:	102cd560 	.word	0x102cd560
102c7ed4:	102c7b00 	.word	0x102c7b00
102c7ed8:	102cd11c 	.word	0x102cd11c

102c7edc <RIL_BT_SetName>:
*                RIL_AT_BUSY,   sending AT.
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_SetName(char *name,u8 len)
{
102c7edc:	e92d4030 	push	{r4, r5, lr}
    char strAT[80];
    
    if(NULL == name || (len > BT_NAME_LEN - 2)) 
102c7ee0:	e2704001 	rsbs	r4, r0, #1
102c7ee4:	33a04000 	movcc	r4, #0
102c7ee8:	e3510036 	cmp	r1, #54	; 0x36
102c7eec:	83844001 	orrhi	r4, r4, #1
102c7ef0:	e3540000 	cmp	r4, #0
*                RIL_AT_BUSY,   sending AT.
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_SetName(char *name,u8 len)
{
102c7ef4:	e24dd05c 	sub	sp, sp, #92	; 0x5c
    char strAT[80];
    
    if(NULL == name || (len > BT_NAME_LEN - 2)) 
102c7ef8:	e1a05000 	mov	r5, r0
102c7efc:	1a000016 	bne	102c7f5c <RIL_BT_SetName+0x80>
    {
        return RIL_AT_INVALID_PARAM ;
    }

    Ql_memset(strAT, 0x0, sizeof(strAT));
102c7f00:	e1a01004 	mov	r1, r4
102c7f04:	e3a02050 	mov	r2, #80	; 0x50
102c7f08:	e59f3054 	ldr	r3, [pc, #84]	; 102c7f64 <RIL_BT_SetName+0x88>
102c7f0c:	e28d0008 	add	r0, sp, #8
102c7f10:	e12fff33 	blx	r3
    Ql_sprintf(strAT, "AT+QBTNAME=\"%s\"", name);
102c7f14:	e59f304c 	ldr	r3, [pc, #76]	; 102c7f68 <RIL_BT_SetName+0x8c>
102c7f18:	e59f104c 	ldr	r1, [pc, #76]	; 102c7f6c <RIL_BT_SetName+0x90>
102c7f1c:	e1a02005 	mov	r2, r5
102c7f20:	e5933000 	ldr	r3, [r3]
102c7f24:	e28d0008 	add	r0, sp, #8
102c7f28:	e12fff33 	blx	r3
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), NULL, NULL, 0);
102c7f2c:	e59f303c 	ldr	r3, [pc, #60]	; 102c7f70 <RIL_BT_SetName+0x94>
102c7f30:	e28d0008 	add	r0, sp, #8
102c7f34:	e12fff33 	blx	r3
102c7f38:	e1a02004 	mov	r2, r4
102c7f3c:	e58d4000 	str	r4, [sp]
102c7f40:	e1a03004 	mov	r3, r4
102c7f44:	e59fc028 	ldr	ip, [pc, #40]	; 102c7f74 <RIL_BT_SetName+0x98>
102c7f48:	e1a01000 	mov	r1, r0
102c7f4c:	e28d0008 	add	r0, sp, #8
102c7f50:	e12fff3c 	blx	ip
}
102c7f54:	e28dd05c 	add	sp, sp, #92	; 0x5c
102c7f58:	e8bd8030 	pop	{r4, r5, pc}
{
    char strAT[80];
    
    if(NULL == name || (len > BT_NAME_LEN - 2)) 
    {
        return RIL_AT_INVALID_PARAM ;
102c7f5c:	e3e00003 	mvn	r0, #3
102c7f60:	eafffffb 	b	102c7f54 <RIL_BT_SetName+0x78>
102c7f64:	102cd6b0 	.word	0x102cd6b0
102c7f68:	f03d31e8 	.word	0xf03d31e8
102c7f6c:	102cece4 	.word	0x102cece4
102c7f70:	102cd560 	.word	0x102cd560
102c7f74:	102cd11c 	.word	0x102cd11c

102c7f78 <RIL_BT_GetName>:
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_GetName(char *name/*char addr[BT_NAME_LEN]*/,u8 len)

{
    char strAT[20]="AT+QBTNAME?\0";
102c7f78:	e59f311c 	ldr	r3, [pc, #284]	; 102c809c <RIL_BT_GetName+0x124>
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_GetName(char *name/*char addr[BT_NAME_LEN]*/,u8 len)

{
102c7f7c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
102c7f80:	e1a05000 	mov	r5, r0
102c7f84:	e1a06001 	mov	r6, r1
    char strAT[20]="AT+QBTNAME?\0";
102c7f88:	e893000f 	ldm	r3, {r0, r1, r2, r3}
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_GetName(char *name/*char addr[BT_NAME_LEN]*/,u8 len)

{
102c7f8c:	e24dd05c 	sub	sp, sp, #92	; 0x5c
    char strAT[20]="AT+QBTNAME?\0";
102c7f90:	e3a04000 	mov	r4, #0
102c7f94:	e28dc00c 	add	ip, sp, #12
    s32 ret = RIL_AT_SUCCESS;
    char in_name[BT_NAME_LEN] = {0};
    
    
    if(NULL == name )
102c7f98:	e1550004 	cmp	r5, r4
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_GetName(char *name/*char addr[BT_NAME_LEN]*/,u8 len)

{
    char strAT[20]="AT+QBTNAME?\0";
102c7f9c:	e8ac0007 	stmia	ip!, {r0, r1, r2}
102c7fa0:	e5cd4019 	strb	r4, [sp, #25]
102c7fa4:	e5cc3000 	strb	r3, [ip]
102c7fa8:	e5cd401a 	strb	r4, [sp, #26]
102c7fac:	e5cd401b 	strb	r4, [sp, #27]
102c7fb0:	e5cd401c 	strb	r4, [sp, #28]
102c7fb4:	e5cd401d 	strb	r4, [sp, #29]
102c7fb8:	e5cd401e 	strb	r4, [sp, #30]
102c7fbc:	e5cd401f 	strb	r4, [sp, #31]
    s32 ret = RIL_AT_SUCCESS;
    char in_name[BT_NAME_LEN] = {0};
102c7fc0:	e58d4020 	str	r4, [sp, #32]
102c7fc4:	e58d4024 	str	r4, [sp, #36]	; 0x24
102c7fc8:	e58d4028 	str	r4, [sp, #40]	; 0x28
102c7fcc:	e58d402c 	str	r4, [sp, #44]	; 0x2c
102c7fd0:	e58d4030 	str	r4, [sp, #48]	; 0x30
102c7fd4:	e58d4034 	str	r4, [sp, #52]	; 0x34
102c7fd8:	e58d4038 	str	r4, [sp, #56]	; 0x38
102c7fdc:	e58d403c 	str	r4, [sp, #60]	; 0x3c
102c7fe0:	e58d4040 	str	r4, [sp, #64]	; 0x40
102c7fe4:	e58d4044 	str	r4, [sp, #68]	; 0x44
102c7fe8:	e58d4048 	str	r4, [sp, #72]	; 0x48
102c7fec:	e58d404c 	str	r4, [sp, #76]	; 0x4c
102c7ff0:	e58d4050 	str	r4, [sp, #80]	; 0x50
102c7ff4:	e58d4054 	str	r4, [sp, #84]	; 0x54
    
    
    if(NULL == name )
102c7ff8:	0a000025 	beq	102c8094 <RIL_BT_GetName+0x11c>
    {
        return RIL_AT_INVALID_PARAM ;
    }

	Ql_memset(name,0,len);
102c7ffc:	e1a01004 	mov	r1, r4
102c8000:	e1a02006 	mov	r2, r6
102c8004:	e59f3094 	ldr	r3, [pc, #148]	; 102c80a0 <RIL_BT_GetName+0x128>
102c8008:	e1a00005 	mov	r0, r5
102c800c:	e12fff33 	blx	r3

    ret = Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), ATRsp_QBTNAME_Hdlr,(void *)in_name, 0);
102c8010:	e59f708c 	ldr	r7, [pc, #140]	; 102c80a4 <RIL_BT_GetName+0x12c>
102c8014:	e28d000c 	add	r0, sp, #12
102c8018:	e12fff37 	blx	r7
102c801c:	e58d4000 	str	r4, [sp]
102c8020:	e59f2080 	ldr	r2, [pc, #128]	; 102c80a8 <RIL_BT_GetName+0x130>
102c8024:	e28d3020 	add	r3, sp, #32
102c8028:	e59fc07c 	ldr	ip, [pc, #124]	; 102c80ac <RIL_BT_GetName+0x134>
102c802c:	e1a01000 	mov	r1, r0
102c8030:	e28d000c 	add	r0, sp, #12
102c8034:	e12fff3c 	blx	ip

    if(ret == RIL_AT_SUCCESS)
102c8038:	e2504000 	subs	r4, r0, #0
102c803c:	0a000002 	beq	102c804c <RIL_BT_GetName+0xd4>
            Ql_strncpy(name,in_name,Ql_strlen(in_name));
        }
    }

    return ret;
}
102c8040:	e1a00004 	mov	r0, r4
102c8044:	e28dd05c 	add	sp, sp, #92	; 0x5c
102c8048:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

    ret = Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), ATRsp_QBTNAME_Hdlr,(void *)in_name, 0);

    if(ret == RIL_AT_SUCCESS)
    {
        if(len < Ql_strlen(in_name))
102c804c:	e28d0020 	add	r0, sp, #32
102c8050:	e12fff37 	blx	r7
102c8054:	e1560000 	cmp	r6, r0
102c8058:	2a000005 	bcs	102c8074 <RIL_BT_GetName+0xfc>
        {
            Ql_strncpy(name,in_name,len-1);
102c805c:	e1a00005 	mov	r0, r5
102c8060:	e28d1020 	add	r1, sp, #32
102c8064:	e2462001 	sub	r2, r6, #1
102c8068:	e59f3040 	ldr	r3, [pc, #64]	; 102c80b0 <RIL_BT_GetName+0x138>
102c806c:	e12fff33 	blx	r3
102c8070:	eafffff2 	b	102c8040 <RIL_BT_GetName+0xc8>
        }
        else
        {
            Ql_strncpy(name,in_name,Ql_strlen(in_name));
102c8074:	e28d0020 	add	r0, sp, #32
102c8078:	e12fff37 	blx	r7
102c807c:	e28d1020 	add	r1, sp, #32
102c8080:	e59f3028 	ldr	r3, [pc, #40]	; 102c80b0 <RIL_BT_GetName+0x138>
102c8084:	e1a02000 	mov	r2, r0
102c8088:	e1a00005 	mov	r0, r5
102c808c:	e12fff33 	blx	r3
102c8090:	eaffffea 	b	102c8040 <RIL_BT_GetName+0xc8>
    char in_name[BT_NAME_LEN] = {0};
    
    
    if(NULL == name )
    {
        return RIL_AT_INVALID_PARAM ;
102c8094:	e3e04003 	mvn	r4, #3
102c8098:	eaffffe8 	b	102c8040 <RIL_BT_GetName+0xc8>
102c809c:	102ce090 	.word	0x102ce090
102c80a0:	102cd6b0 	.word	0x102cd6b0
102c80a4:	102cd560 	.word	0x102cd560
102c80a8:	102c7a44 	.word	0x102c7a44
102c80ac:	102cd11c 	.word	0x102cd11c
102c80b0:	102cd4d8 	.word	0x102cd4d8

102c80b4 <RIL_BT_GetLocalAddr>:
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/

s32 RIL_BT_GetLocalAddr(char* ptrAddr/*char addr[BT_ADDR_LEN]*/,u8 len)
{
    char strAT[] = "AT+QBTADDR?\0";
102c80b4:	e59f30d8 	ldr	r3, [pc, #216]	; 102c8194 <RIL_BT_GetLocalAddr+0xe0>
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/

s32 RIL_BT_GetLocalAddr(char* ptrAddr/*char addr[BT_ADDR_LEN]*/,u8 len)
{
102c80b8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
102c80bc:	e1a05000 	mov	r5, r0
102c80c0:	e1a06001 	mov	r6, r1
    char strAT[] = "AT+QBTADDR?\0";
102c80c4:	e893000f 	ldm	r3, {r0, r1, r2, r3}
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/

s32 RIL_BT_GetLocalAddr(char* ptrAddr/*char addr[BT_ADDR_LEN]*/,u8 len)
{
102c80c8:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    char strAT[] = "AT+QBTADDR?\0";
    s32 ret = RIL_AT_SUCCESS;
    char in_addr[BT_ADDR_LEN] = {0};
102c80cc:	e3a04000 	mov	r4, #0
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/

s32 RIL_BT_GetLocalAddr(char* ptrAddr/*char addr[BT_ADDR_LEN]*/,u8 len)
{
    char strAT[] = "AT+QBTADDR?\0";
102c80d0:	e28dc008 	add	ip, sp, #8
    s32 ret = RIL_AT_SUCCESS;
    char in_addr[BT_ADDR_LEN] = {0};
    
    if (NULL == ptrAddr)
102c80d4:	e1550004 	cmp	r5, r4
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/

s32 RIL_BT_GetLocalAddr(char* ptrAddr/*char addr[BT_ADDR_LEN]*/,u8 len)
{
    char strAT[] = "AT+QBTADDR?\0";
102c80d8:	e8ac0007 	stmia	ip!, {r0, r1, r2}
    s32 ret = RIL_AT_SUCCESS;
    char in_addr[BT_ADDR_LEN] = {0};
102c80dc:	e58d4018 	str	r4, [sp, #24]
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/

s32 RIL_BT_GetLocalAddr(char* ptrAddr/*char addr[BT_ADDR_LEN]*/,u8 len)
{
    char strAT[] = "AT+QBTADDR?\0";
102c80e0:	e5cc3000 	strb	r3, [ip]
    s32 ret = RIL_AT_SUCCESS;
    char in_addr[BT_ADDR_LEN] = {0};
102c80e4:	e58d401c 	str	r4, [sp, #28]
102c80e8:	e58d4020 	str	r4, [sp, #32]
102c80ec:	e5cd4024 	strb	r4, [sp, #36]	; 0x24
    
    if (NULL == ptrAddr)
102c80f0:	0a000025 	beq	102c818c <RIL_BT_GetLocalAddr+0xd8>
    {
        return RIL_AT_INVALID_PARAM;
    }

	Ql_memset(ptrAddr,0,len);
102c80f4:	e1a01004 	mov	r1, r4
102c80f8:	e1a02006 	mov	r2, r6
102c80fc:	e59f3094 	ldr	r3, [pc, #148]	; 102c8198 <RIL_BT_GetLocalAddr+0xe4>
102c8100:	e1a00005 	mov	r0, r5
102c8104:	e12fff33 	blx	r3

    ret = Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), ATRsp_QBTADDR_Hdlr,(void *)in_addr, 0);
102c8108:	e59f708c 	ldr	r7, [pc, #140]	; 102c819c <RIL_BT_GetLocalAddr+0xe8>
102c810c:	e28d0008 	add	r0, sp, #8
102c8110:	e12fff37 	blx	r7
102c8114:	e58d4000 	str	r4, [sp]
102c8118:	e59f2080 	ldr	r2, [pc, #128]	; 102c81a0 <RIL_BT_GetLocalAddr+0xec>
102c811c:	e28d3018 	add	r3, sp, #24
102c8120:	e59fc07c 	ldr	ip, [pc, #124]	; 102c81a4 <RIL_BT_GetLocalAddr+0xf0>
102c8124:	e1a01000 	mov	r1, r0
102c8128:	e28d0008 	add	r0, sp, #8
102c812c:	e12fff3c 	blx	ip

    if(ret == RIL_AT_SUCCESS)
102c8130:	e2504000 	subs	r4, r0, #0
102c8134:	0a000002 	beq	102c8144 <RIL_BT_GetLocalAddr+0x90>
            Ql_strncpy(ptrAddr,in_addr,Ql_strlen(in_addr));
        }
    }

    return ret;
}
102c8138:	e1a00004 	mov	r0, r4
102c813c:	e28dd02c 	add	sp, sp, #44	; 0x2c
102c8140:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

    ret = Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), ATRsp_QBTADDR_Hdlr,(void *)in_addr, 0);

    if(ret == RIL_AT_SUCCESS)
    {
        if(len < Ql_strlen(in_addr))
102c8144:	e28d0018 	add	r0, sp, #24
102c8148:	e12fff37 	blx	r7
102c814c:	e1560000 	cmp	r6, r0
102c8150:	2a000005 	bcs	102c816c <RIL_BT_GetLocalAddr+0xb8>
        {
            Ql_strncpy(ptrAddr,in_addr,len-1);
102c8154:	e1a00005 	mov	r0, r5
102c8158:	e28d1018 	add	r1, sp, #24
102c815c:	e2462001 	sub	r2, r6, #1
102c8160:	e59f3040 	ldr	r3, [pc, #64]	; 102c81a8 <RIL_BT_GetLocalAddr+0xf4>
102c8164:	e12fff33 	blx	r3
102c8168:	eafffff2 	b	102c8138 <RIL_BT_GetLocalAddr+0x84>
        }
        else
        {
            Ql_strncpy(ptrAddr,in_addr,Ql_strlen(in_addr));
102c816c:	e28d0018 	add	r0, sp, #24
102c8170:	e12fff37 	blx	r7
102c8174:	e28d1018 	add	r1, sp, #24
102c8178:	e59f3028 	ldr	r3, [pc, #40]	; 102c81a8 <RIL_BT_GetLocalAddr+0xf4>
102c817c:	e1a02000 	mov	r2, r0
102c8180:	e1a00005 	mov	r0, r5
102c8184:	e12fff33 	blx	r3
102c8188:	eaffffea 	b	102c8138 <RIL_BT_GetLocalAddr+0x84>
    s32 ret = RIL_AT_SUCCESS;
    char in_addr[BT_ADDR_LEN] = {0};
    
    if (NULL == ptrAddr)
    {
        return RIL_AT_INVALID_PARAM;
102c818c:	e3e04003 	mvn	r4, #3
102c8190:	eaffffe8 	b	102c8138 <RIL_BT_GetLocalAddr+0x84>
102c8194:	102ce0a4 	.word	0x102ce0a4
102c8198:	102cd6b0 	.word	0x102cd6b0
102c819c:	102cd560 	.word	0x102cd560
102c81a0:	102c7988 	.word	0x102c7988
102c81a4:	102cd11c 	.word	0x102cd11c
102c81a8:	102cd4d8 	.word	0x102cd4d8

102c81ac <RIL_BT_SetVisble>:

s32 RIL_BT_SetVisble(Enum_VisibleMode mode,u8 timeout)
{
    char strAT[30];
    
    if(mode < BT_INVISIBLE || mode >= BT_VISIBLE_END)
102c81ac:	e3500002 	cmp	r0, #2
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/

s32 RIL_BT_SetVisble(Enum_VisibleMode mode,u8 timeout)
{
102c81b0:	e92d4030 	push	{r4, r5, lr}
102c81b4:	e1a04000 	mov	r4, r0
102c81b8:	e24dd02c 	sub	sp, sp, #44	; 0x2c
102c81bc:	e1a05001 	mov	r5, r1
    char strAT[30];
    
    if(mode < BT_INVISIBLE || mode >= BT_VISIBLE_END)
102c81c0:	8a00001e 	bhi	102c8240 <RIL_BT_SetVisble+0x94>
    {
        return RIL_AT_INVALID_PARAM;
    }

    Ql_memset(strAT, 0x0, sizeof(strAT));
102c81c4:	e28d0008 	add	r0, sp, #8
102c81c8:	e3a01000 	mov	r1, #0
102c81cc:	e3a0201e 	mov	r2, #30
102c81d0:	e59fc070 	ldr	ip, [pc, #112]	; 102c8248 <RIL_BT_SetVisble+0x9c>
102c81d4:	e12fff3c 	blx	ip

    if(BT_INVISIBLE == mode || BT_VISIBLE_FOREVER == mode)
102c81d8:	e3540002 	cmp	r4, #2
    {
         Ql_sprintf(strAT, "AT+QBTVISB=%d", mode);
102c81dc:	e28d0008 	add	r0, sp, #8
102c81e0:	e59f3064 	ldr	r3, [pc, #100]	; 102c824c <RIL_BT_SetVisble+0xa0>
        return RIL_AT_INVALID_PARAM;
    }

    Ql_memset(strAT, 0x0, sizeof(strAT));

    if(BT_INVISIBLE == mode || BT_VISIBLE_FOREVER == mode)
102c81e4:	1a000010 	bne	102c822c <RIL_BT_SetVisble+0x80>
    {
         Ql_sprintf(strAT, "AT+QBTVISB=%d", mode);
    }
    else
    {
         Ql_sprintf(strAT, "AT+QBTVISB=%d,%d", mode,timeout);
102c81e8:	e593c000 	ldr	ip, [r3]
102c81ec:	e59f105c 	ldr	r1, [pc, #92]	; 102c8250 <RIL_BT_SetVisble+0xa4>
102c81f0:	e1a02004 	mov	r2, r4
102c81f4:	e1a03005 	mov	r3, r5
102c81f8:	e12fff3c 	blx	ip
    }
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), NULL, NULL, 0);
102c81fc:	e59f3050 	ldr	r3, [pc, #80]	; 102c8254 <RIL_BT_SetVisble+0xa8>
102c8200:	e28d0008 	add	r0, sp, #8
102c8204:	e12fff33 	blx	r3
102c8208:	e3a03000 	mov	r3, #0
102c820c:	e1a02003 	mov	r2, r3
102c8210:	e58d3000 	str	r3, [sp]
102c8214:	e59fc03c 	ldr	ip, [pc, #60]	; 102c8258 <RIL_BT_SetVisble+0xac>
102c8218:	e1a01000 	mov	r1, r0
102c821c:	e28d0008 	add	r0, sp, #8
102c8220:	e12fff3c 	blx	ip
    
}
102c8224:	e28dd02c 	add	sp, sp, #44	; 0x2c
102c8228:	e8bd8030 	pop	{r4, r5, pc}

    Ql_memset(strAT, 0x0, sizeof(strAT));

    if(BT_INVISIBLE == mode || BT_VISIBLE_FOREVER == mode)
    {
         Ql_sprintf(strAT, "AT+QBTVISB=%d", mode);
102c822c:	e5933000 	ldr	r3, [r3]
102c8230:	e59f1024 	ldr	r1, [pc, #36]	; 102c825c <RIL_BT_SetVisble+0xb0>
102c8234:	e1a02004 	mov	r2, r4
102c8238:	e12fff33 	blx	r3
102c823c:	eaffffee 	b	102c81fc <RIL_BT_SetVisble+0x50>
{
    char strAT[30];
    
    if(mode < BT_INVISIBLE || mode >= BT_VISIBLE_END)
    {
        return RIL_AT_INVALID_PARAM;
102c8240:	e3e00003 	mvn	r0, #3
102c8244:	eafffff6 	b	102c8224 <RIL_BT_SetVisble+0x78>
102c8248:	102cd6b0 	.word	0x102cd6b0
102c824c:	f03d31e8 	.word	0xf03d31e8
102c8250:	102ced04 	.word	0x102ced04
102c8254:	102cd560 	.word	0x102cd560
102c8258:	102cd11c 	.word	0x102cd11c
102c825c:	102cecf4 	.word	0x102cecf4

102c8260 <OnURCHandler_BTVisible>:
    
}


void OnURCHandler_BTVisible(const char* strURC, void* reserved)
{
102c8260:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    s32 err_code = 0;
    char urcHead[30];

	if(callback_bt == NULL)
102c8264:	e59f40d0 	ldr	r4, [pc, #208]	; 102c833c <OnURCHandler_BTVisible+0xdc>
}


void OnURCHandler_BTVisible(const char* strURC, void* reserved)
{
    s32 err_code = 0;
102c8268:	e3a05000 	mov	r5, #0
    char urcHead[30];

	if(callback_bt == NULL)
102c826c:	e5943090 	ldr	r3, [r4, #144]	; 0x90
    
}


void OnURCHandler_BTVisible(const char* strURC, void* reserved)
{
102c8270:	e24dd028 	sub	sp, sp, #40	; 0x28
    s32 err_code = 0;
    char urcHead[30];

	if(callback_bt == NULL)
102c8274:	e1530005 	cmp	r3, r5
    
}


void OnURCHandler_BTVisible(const char* strURC, void* reserved)
{
102c8278:	e1a06000 	mov	r6, r0
    s32 err_code = 0;
102c827c:	e58d5004 	str	r5, [sp, #4]
    char urcHead[30];

	if(callback_bt == NULL)
102c8280:	0a000015 	beq	102c82dc <OnURCHandler_BTVisible+0x7c>
	{
	   return;
	}

    if (Ql_StrPrefixMatch(strURC, urcHead))
102c8284:	e28d1008 	add	r1, sp, #8
102c8288:	e59f70b0 	ldr	r7, [pc, #176]	; 102c8340 <OnURCHandler_BTVisible+0xe0>
102c828c:	e12fff37 	blx	r7
102c8290:	e2508000 	subs	r8, r0, #0
102c8294:	0a000012 	beq	102c82e4 <OnURCHandler_BTVisible+0x84>
    {
        Ql_sscanf(strURC, "%*[^:]: %d\r\n",&err_code);
102c8298:	e59f30a4 	ldr	r3, [pc, #164]	; 102c8344 <OnURCHandler_BTVisible+0xe4>
102c829c:	e28d2004 	add	r2, sp, #4
102c82a0:	e5933000 	ldr	r3, [r3]
102c82a4:	e59f109c 	ldr	r1, [pc, #156]	; 102c8348 <OnURCHandler_BTVisible+0xe8>
102c82a8:	e1a00006 	mov	r0, r6
102c82ac:	e12fff33 	blx	r3
        if(0 == err_code)
102c82b0:	e59d1004 	ldr	r1, [sp, #4]
102c82b4:	e1510005 	cmp	r1, r5
        {
           callback_bt(MSG_BT_VISIBLE_IND, URC_BT_INVISIBLE, NULL, NULL);
102c82b8:	01a02001 	moveq	r2, r1
        }
		else
		{
		   callback_bt(MSG_BT_VISIBLE_IND, err_code, NULL, NULL);
102c82bc:	11a02005 	movne	r2, r5
    if (Ql_StrPrefixMatch(strURC, urcHead))
    {
        Ql_sscanf(strURC, "%*[^:]: %d\r\n",&err_code);
        if(0 == err_code)
        {
           callback_bt(MSG_BT_VISIBLE_IND, URC_BT_INVISIBLE, NULL, NULL);
102c82c0:	0594c090 	ldreq	ip, [r4, #144]	; 0x90
102c82c4:	03a00009 	moveq	r0, #9
102c82c8:	03a01001 	moveq	r1, #1
        }
		else
		{
		   callback_bt(MSG_BT_VISIBLE_IND, err_code, NULL, NULL);
102c82cc:	1594c090 	ldrne	ip, [r4, #144]	; 0x90
102c82d0:	13a00009 	movne	r0, #9
102c82d4:	e1a03002 	mov	r3, r2
102c82d8:	e12fff3c 	blx	ip
    {
        Ql_sscanf(strURC, "%*[^:]: %d\r\n", &err_code);
        callback_bt(MSG_BT_VISIBLE_IND, err_code, NULL, NULL);
        return;
    }
}
102c82dc:	e28dd028 	add	sp, sp, #40	; 0x28
102c82e0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		{
		   callback_bt(MSG_BT_VISIBLE_IND, err_code, NULL, NULL);
		}
        return;
    }
    Ql_strcpy(urcHead, "+CME ERROR:\0");
102c82e4:	e59f1060 	ldr	r1, [pc, #96]	; 102c834c <OnURCHandler_BTVisible+0xec>
102c82e8:	e59f3060 	ldr	r3, [pc, #96]	; 102c8350 <OnURCHandler_BTVisible+0xf0>
102c82ec:	e28d0008 	add	r0, sp, #8
102c82f0:	e12fff33 	blx	r3
    if (Ql_StrPrefixMatch(strURC, urcHead))
102c82f4:	e1a00006 	mov	r0, r6
102c82f8:	e28d1008 	add	r1, sp, #8
102c82fc:	e12fff37 	blx	r7
102c8300:	e3500000 	cmp	r0, #0
102c8304:	0afffff4 	beq	102c82dc <OnURCHandler_BTVisible+0x7c>
    {
        Ql_sscanf(strURC, "%*[^:]: %d\r\n", &err_code);
102c8308:	e59f3034 	ldr	r3, [pc, #52]	; 102c8344 <OnURCHandler_BTVisible+0xe4>
102c830c:	e28d2004 	add	r2, sp, #4
102c8310:	e59f1030 	ldr	r1, [pc, #48]	; 102c8348 <OnURCHandler_BTVisible+0xe8>
102c8314:	e5933000 	ldr	r3, [r3]
102c8318:	e1a00006 	mov	r0, r6
102c831c:	e12fff33 	blx	r3
        callback_bt(MSG_BT_VISIBLE_IND, err_code, NULL, NULL);
102c8320:	e1a02008 	mov	r2, r8
102c8324:	e594c090 	ldr	ip, [r4, #144]	; 0x90
102c8328:	e3a00009 	mov	r0, #9
102c832c:	e59d1004 	ldr	r1, [sp, #4]
102c8330:	e1a03008 	mov	r3, r8
102c8334:	e12fff3c 	blx	ip
102c8338:	eaffffe7 	b	102c82dc <OnURCHandler_BTVisible+0x7c>
102c833c:	f03d2058 	.word	0xf03d2058
102c8340:	102cbda0 	.word	0x102cbda0
102c8344:	f03d31f0 	.word	0xf03d31f0
102c8348:	102ceb88 	.word	0x102ceb88
102c834c:	102ce0b4 	.word	0x102ce0b4
102c8350:	102cd438 	.word	0x102cd438

102c8354 <RIL_BT_GetVisble>:
*****************************************************************/
s32 RIL_BT_GetVisble(s32 *mode)

{
        
    char strAT[] = "AT+QBTVISB?\0";
102c8354:	e59f205c 	ldr	r2, [pc, #92]	; 102c83b8 <RIL_BT_GetVisble+0x64>
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_GetVisble(s32 *mode)

{
102c8358:	e92d4010 	push	{r4, lr}
102c835c:	e1a04000 	mov	r4, r0
        
    char strAT[] = "AT+QBTVISB?\0";
102c8360:	e892000f 	ldm	r2, {r0, r1, r2, r3}
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_GetVisble(s32 *mode)

{
102c8364:	e24dd018 	sub	sp, sp, #24
        
    char strAT[] = "AT+QBTVISB?\0";
102c8368:	e28dc008 	add	ip, sp, #8
    
    if(NULL == mode)
102c836c:	e3540000 	cmp	r4, #0
*****************************************************************/
s32 RIL_BT_GetVisble(s32 *mode)

{
        
    char strAT[] = "AT+QBTVISB?\0";
102c8370:	e8ac0007 	stmia	ip!, {r0, r1, r2}
102c8374:	e5cc3000 	strb	r3, [ip]
    
    if(NULL == mode)
102c8378:	0a00000c 	beq	102c83b0 <RIL_BT_GetVisble+0x5c>
    {
        return RIL_AT_INVALID_PARAM;
    }
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), ATRsp_QBTVISB_Hdlr, (void*)mode, 0);
102c837c:	e59f3038 	ldr	r3, [pc, #56]	; 102c83bc <RIL_BT_GetVisble+0x68>
102c8380:	e28d0008 	add	r0, sp, #8
102c8384:	e12fff33 	blx	r3
102c8388:	e3a03000 	mov	r3, #0
102c838c:	e58d3000 	str	r3, [sp]
102c8390:	e59f2028 	ldr	r2, [pc, #40]	; 102c83c0 <RIL_BT_GetVisble+0x6c>
102c8394:	e1a03004 	mov	r3, r4
102c8398:	e59fc024 	ldr	ip, [pc, #36]	; 102c83c4 <RIL_BT_GetVisble+0x70>
102c839c:	e1a01000 	mov	r1, r0
102c83a0:	e28d0008 	add	r0, sp, #8
102c83a4:	e12fff3c 	blx	ip
}
102c83a8:	e28dd018 	add	sp, sp, #24
102c83ac:	e8bd8010 	pop	{r4, pc}
        
    char strAT[] = "AT+QBTVISB?\0";
    
    if(NULL == mode)
    {
        return RIL_AT_INVALID_PARAM;
102c83b0:	e3e00003 	mvn	r0, #3
102c83b4:	eafffffb 	b	102c83a8 <RIL_BT_GetVisble+0x54>
102c83b8:	102ce0c4 	.word	0x102ce0c4
102c83bc:	102cd560 	.word	0x102cd560
102c83c0:	102c78cc 	.word	0x102c78cc
102c83c4:	102cd11c 	.word	0x102cd11c

102c83c8 <OnURCHandler_BTScan>:
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), NULL, NULL, 0);
}


void OnURCHandler_BTScan(const char* strURC, void* reserved)
{
102c83c8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // +QBTSCAN:3,"M26-test",397D0D816261
    // +QBTSCAN:0
    char urcHead[] = "\r\n+QBTSCAN:\0";
102c83cc:	e59f626c 	ldr	r6, [pc, #620]	; 102c8640 <OnURCHandler_BTScan+0x278>
    s32 deviceId = 0;
    ST_BT_DevInfo* pstrNewBtDev = NULL;
    bool ret = FALSE;
    s32 err_code = 0;

	if(callback_bt == NULL)
102c83d0:	e59f526c 	ldr	r5, [pc, #620]	; 102c8644 <OnURCHandler_BTScan+0x27c>
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), NULL, NULL, 0);
}


void OnURCHandler_BTScan(const char* strURC, void* reserved)
{
102c83d4:	e1a09000 	mov	r9, r0
    s32 deviceId = 0;
    ST_BT_DevInfo* pstrNewBtDev = NULL;
    bool ret = FALSE;
    s32 err_code = 0;

	if(callback_bt == NULL)
102c83d8:	e5957090 	ldr	r7, [r5, #144]	; 0x90

void OnURCHandler_BTScan(const char* strURC, void* reserved)
{
    // +QBTSCAN:3,"M26-test",397D0D816261
    // +QBTSCAN:0
    char urcHead[] = "\r\n+QBTSCAN:\0";
102c83dc:	e896000f 	ldm	r6, {r0, r1, r2, r3}
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), NULL, NULL, 0);
}


void OnURCHandler_BTScan(const char* strURC, void* reserved)
{
102c83e0:	e24dd01c 	sub	sp, sp, #28
    // +QBTSCAN:3,"M26-test",397D0D816261
    // +QBTSCAN:0
    char urcHead[] = "\r\n+QBTSCAN:\0";
    s32 deviceId = 0;
102c83e4:	e3a04000 	mov	r4, #0

void OnURCHandler_BTScan(const char* strURC, void* reserved)
{
    // +QBTSCAN:3,"M26-test",397D0D816261
    // +QBTSCAN:0
    char urcHead[] = "\r\n+QBTSCAN:\0";
102c83e8:	e28dc008 	add	ip, sp, #8
    s32 deviceId = 0;
    ST_BT_DevInfo* pstrNewBtDev = NULL;
    bool ret = FALSE;
    s32 err_code = 0;

	if(callback_bt == NULL)
102c83ec:	e1570004 	cmp	r7, r4

void OnURCHandler_BTScan(const char* strURC, void* reserved)
{
    // +QBTSCAN:3,"M26-test",397D0D816261
    // +QBTSCAN:0
    char urcHead[] = "\r\n+QBTSCAN:\0";
102c83f0:	e8ac0007 	stmia	ip!, {r0, r1, r2}
    s32 deviceId = 0;
102c83f4:	e58d4000 	str	r4, [sp]

void OnURCHandler_BTScan(const char* strURC, void* reserved)
{
    // +QBTSCAN:3,"M26-test",397D0D816261
    // +QBTSCAN:0
    char urcHead[] = "\r\n+QBTSCAN:\0";
102c83f8:	e5cc3000 	strb	r3, [ip]
    s32 deviceId = 0;
    ST_BT_DevInfo* pstrNewBtDev = NULL;
    bool ret = FALSE;
    s32 err_code = 0;
102c83fc:	e58d4004 	str	r4, [sp, #4]

	if(callback_bt == NULL)
102c8400:	0a000050 	beq	102c8548 <OnURCHandler_BTScan+0x180>
    {
       return;
	}
		
    if (Ql_StrPrefixMatch(strURC, urcHead))
102c8404:	e1a00009 	mov	r0, r9
102c8408:	e28d1008 	add	r1, sp, #8
102c840c:	e59f7234 	ldr	r7, [pc, #564]	; 102c8648 <OnURCHandler_BTScan+0x280>
102c8410:	e12fff37 	blx	r7
102c8414:	e2508000 	subs	r8, r0, #0
102c8418:	0a00004c 	beq	102c8550 <OnURCHandler_BTScan+0x188>
    {
        Ql_sscanf(strURC, "%*[^:]: %d%*[^\r\n]\r\n",&deviceId);
102c841c:	e59f6228 	ldr	r6, [pc, #552]	; 102c864c <OnURCHandler_BTScan+0x284>
102c8420:	e1a0200d 	mov	r2, sp
102c8424:	e1a00009 	mov	r0, r9
102c8428:	e5963000 	ldr	r3, [r6]
102c842c:	e59f121c 	ldr	r1, [pc, #540]	; 102c8650 <OnURCHandler_BTScan+0x288>
102c8430:	e12fff33 	blx	r3
        
        if (0 == deviceId)  // scan finished
102c8434:	e59d2000 	ldr	r2, [sp]
102c8438:	e1520004 	cmp	r2, r4
102c843c:	0a000059 	beq	102c85a8 <OnURCHandler_BTScan+0x1e0>
        {
            callback_bt(MSG_BT_SCAN_IND,URC_BT_SCAN_FINISHED, NULL, NULL);
            
        }else{  // scan new bt device
            // Create a new bt device
            pstrNewBtDev = (ST_BT_DevInfo*)Ql_MEM_Alloc(sizeof(ST_BT_DevInfo));
102c8440:	e59f320c 	ldr	r3, [pc, #524]	; 102c8654 <OnURCHandler_BTScan+0x28c>
102c8444:	e3a00060 	mov	r0, #96	; 0x60
102c8448:	e12fff33 	blx	r3
            Ql_memset(pstrNewBtDev, 0x0, sizeof(ST_BT_DevInfo));
102c844c:	e59fa204 	ldr	sl, [pc, #516]	; 102c8658 <OnURCHandler_BTScan+0x290>
102c8450:	e1a01004 	mov	r1, r4
102c8454:	e3a02060 	mov	r2, #96	; 0x60
        {
            callback_bt(MSG_BT_SCAN_IND,URC_BT_SCAN_FINISHED, NULL, NULL);
            
        }else{  // scan new bt device
            // Create a new bt device
            pstrNewBtDev = (ST_BT_DevInfo*)Ql_MEM_Alloc(sizeof(ST_BT_DevInfo));
102c8458:	e1a07000 	mov	r7, r0
            pstrNewBtDev->devId = deviceId;
            pstrNewBtDev->pairId = -1;
            pstrNewBtDev->connId = -1;
            pstrNewBtDev->profileId = -1;

            Ql_sscanf(strURC, "%*[^\"]\"%[^\"]%*[^\r\n]\r\n",pstrNewBtDev->btDevice.name);
102c845c:	e2878004 	add	r8, r7, #4
            callback_bt(MSG_BT_SCAN_IND,URC_BT_SCAN_FINISHED, NULL, NULL);
            
        }else{  // scan new bt device
            // Create a new bt device
            pstrNewBtDev = (ST_BT_DevInfo*)Ql_MEM_Alloc(sizeof(ST_BT_DevInfo));
            Ql_memset(pstrNewBtDev, 0x0, sizeof(ST_BT_DevInfo));
102c8460:	e12fff3a 	blx	sl
            pstrNewBtDev->devId = deviceId;
            pstrNewBtDev->pairId = -1;
102c8464:	e3e03000 	mvn	r3, #0
            
        }else{  // scan new bt device
            // Create a new bt device
            pstrNewBtDev = (ST_BT_DevInfo*)Ql_MEM_Alloc(sizeof(ST_BT_DevInfo));
            Ql_memset(pstrNewBtDev, 0x0, sizeof(ST_BT_DevInfo));
            pstrNewBtDev->devId = deviceId;
102c8468:	e59d0000 	ldr	r0, [sp]
            pstrNewBtDev->pairId = -1;
            pstrNewBtDev->connId = -1;
            pstrNewBtDev->profileId = -1;

            Ql_sscanf(strURC, "%*[^\"]\"%[^\"]%*[^\r\n]\r\n",pstrNewBtDev->btDevice.name);
            Ql_sscanf(strURC, "%*[^,],%*[^,],%[^\r\n]\r\n",pstrNewBtDev->btDevice.addr);
102c846c:	e287b03c 	add	fp, r7, #60	; 0x3c
            pstrNewBtDev->devId = deviceId;
            pstrNewBtDev->pairId = -1;
            pstrNewBtDev->connId = -1;
            pstrNewBtDev->profileId = -1;

            Ql_sscanf(strURC, "%*[^\"]\"%[^\"]%*[^\r\n]\r\n",pstrNewBtDev->btDevice.name);
102c8470:	e59f11e4 	ldr	r1, [pc, #484]	; 102c865c <OnURCHandler_BTScan+0x294>
102c8474:	e1a02008 	mov	r2, r8
            
        }else{  // scan new bt device
            // Create a new bt device
            pstrNewBtDev = (ST_BT_DevInfo*)Ql_MEM_Alloc(sizeof(ST_BT_DevInfo));
            Ql_memset(pstrNewBtDev, 0x0, sizeof(ST_BT_DevInfo));
            pstrNewBtDev->devId = deviceId;
102c8478:	e587004c 	str	r0, [r7, #76]	; 0x4c
            pstrNewBtDev->pairId = -1;
102c847c:	e5873050 	str	r3, [r7, #80]	; 0x50
            pstrNewBtDev->connId = -1;
102c8480:	e5873054 	str	r3, [r7, #84]	; 0x54
            pstrNewBtDev->profileId = -1;
102c8484:	e5873058 	str	r3, [r7, #88]	; 0x58

            Ql_sscanf(strURC, "%*[^\"]\"%[^\"]%*[^\r\n]\r\n",pstrNewBtDev->btDevice.name);
102c8488:	e1a00009 	mov	r0, r9
102c848c:	e5963000 	ldr	r3, [r6]
102c8490:	e12fff33 	blx	r3
            Ql_sscanf(strURC, "%*[^,],%*[^,],%[^\r\n]\r\n",pstrNewBtDev->btDevice.addr);
102c8494:	e1a0200b 	mov	r2, fp
102c8498:	e59f11c0 	ldr	r1, [pc, #448]	; 102c8660 <OnURCHandler_BTScan+0x298>
102c849c:	e5963000 	ldr	r3, [r6]
102c84a0:	e1a00009 	mov	r0, r9
102c84a4:	e12fff33 	blx	r3
            pstrNewBtDev->btDevice.devHdl = Ql_GenHash(pstrNewBtDev->btDevice.addr, Ql_strlen(pstrNewBtDev->btDevice.addr));
102c84a8:	e59f31b4 	ldr	r3, [pc, #436]	; 102c8664 <OnURCHandler_BTScan+0x29c>
102c84ac:	e1a0000b 	mov	r0, fp
102c84b0:	e12fff33 	blx	r3
102c84b4:	e59f31ac 	ldr	r3, [pc, #428]	; 102c8668 <OnURCHandler_BTScan+0x2a0>
102c84b8:	e2456004 	sub	r6, r5, #4
102c84bc:	e1a01000 	mov	r1, r0
102c84c0:	e1a0000b 	mov	r0, fp
102c84c4:	e12fff33 	blx	r3
            ret = BT_ScanUpdateConfirm(pstrNewBtDev->btDevice.devHdl,pstrNewBtDev->devId,pstrNewBtDev->btDevice.name);
102c84c8:	e597104c 	ldr	r1, [r7, #76]	; 0x4c
102c84cc:	e1a0c006 	mov	ip, r6
            pstrNewBtDev->connId = -1;
            pstrNewBtDev->profileId = -1;

            Ql_sscanf(strURC, "%*[^\"]\"%[^\"]%*[^\r\n]\r\n",pstrNewBtDev->btDevice.name);
            Ql_sscanf(strURC, "%*[^,],%*[^,],%[^\r\n]\r\n",pstrNewBtDev->btDevice.addr);
            pstrNewBtDev->btDevice.devHdl = Ql_GenHash(pstrNewBtDev->btDevice.addr, Ql_strlen(pstrNewBtDev->btDevice.addr));
102c84d0:	e5870000 	str	r0, [r7]
102c84d4:	ea000002 	b	102c84e4 <OnURCHandler_BTScan+0x11c>
102c84d8:	e2844001 	add	r4, r4, #1


static bool BT_ScanUpdateConfirm(BT_DEV_HDL devHdl,const s32 devid,const char *name)
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c84dc:	e354001e 	cmp	r4, #30
102c84e0:	0a000036 	beq	102c85c0 <OnURCHandler_BTScan+0x1f8>
    {
        if (NULL != m_arrBTDev[i])
102c84e4:	e5bc3004 	ldr	r3, [ip, #4]!
102c84e8:	e3530000 	cmp	r3, #0
102c84ec:	0afffff9 	beq	102c84d8 <OnURCHandler_BTScan+0x110>
        {
            if(devHdl == m_arrBTDev[i]->btDevice.devHdl)
102c84f0:	e593e000 	ldr	lr, [r3]
102c84f4:	e150000e 	cmp	r0, lr
102c84f8:	1afffff6 	bne	102c84d8 <OnURCHandler_BTScan+0x110>
            {
                m_arrBTDev[i]->devId = devid;
				Ql_memset(m_arrBTDev[i]->btDevice.name,0,BT_NAME_LEN);
102c84fc:	e3a02038 	mov	r2, #56	; 0x38
    {
        if (NULL != m_arrBTDev[i])
        {
            if(devHdl == m_arrBTDev[i]->btDevice.devHdl)
            {
                m_arrBTDev[i]->devId = devid;
102c8500:	e583104c 	str	r1, [r3, #76]	; 0x4c
				Ql_memset(m_arrBTDev[i]->btDevice.name,0,BT_NAME_LEN);
102c8504:	e2830004 	add	r0, r3, #4
102c8508:	e3a01000 	mov	r1, #0
102c850c:	e12fff3a 	blx	sl
                Ql_strcpy(m_arrBTDev[i]->btDevice.name,name);
102c8510:	e7950104 	ldr	r0, [r5, r4, lsl #2]
102c8514:	e1a01008 	mov	r1, r8
102c8518:	e59f314c 	ldr	r3, [pc, #332]	; 102c866c <OnURCHandler_BTScan+0x2a4>
102c851c:	e2800004 	add	r0, r0, #4
102c8520:	e12fff33 	blx	r3

            Ql_sscanf(strURC, "%*[^\"]\"%[^\"]%*[^\r\n]\r\n",pstrNewBtDev->btDevice.name);
            Ql_sscanf(strURC, "%*[^,],%*[^,],%[^\r\n]\r\n",pstrNewBtDev->btDevice.addr);
            pstrNewBtDev->btDevice.devHdl = Ql_GenHash(pstrNewBtDev->btDevice.addr, Ql_strlen(pstrNewBtDev->btDevice.addr));
            ret = BT_ScanUpdateConfirm(pstrNewBtDev->btDevice.devHdl,pstrNewBtDev->devId,pstrNewBtDev->btDevice.name);
			callback_bt(MSG_BT_SCAN_IND,URC_BT_SCAN_FOUND,&(pstrNewBtDev->btDevice), NULL);//customer own management
102c8524:	e3a03000 	mov	r3, #0
102c8528:	e3a00001 	mov	r0, #1
102c852c:	e595c090 	ldr	ip, [r5, #144]	; 0x90
102c8530:	e3a01003 	mov	r1, #3
102c8534:	e1a02007 	mov	r2, r7
102c8538:	e12fff3c 	blx	ip
	                Ql_MEM_Free(pstrNewBtDev);
	            }
            }
			else
			{
			    Ql_MEM_Free(pstrNewBtDev);
102c853c:	e1a00007 	mov	r0, r7
102c8540:	e59f3128 	ldr	r3, [pc, #296]	; 102c8670 <OnURCHandler_BTScan+0x2a8>
102c8544:	e12fff33 	blx	r3
    {
        Ql_sscanf(strURC, "%*[^:]: %d\r\n", &err_code);
        callback_bt(MSG_BT_SCAN_IND, err_code, NULL, NULL);
        return;
    }
}
102c8548:	e28dd01c 	add	sp, sp, #28
102c854c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
       
        }
        return;
    }

    Ql_strcpy(urcHead, "+CME ERROR:\0");
102c8550:	e2461020 	sub	r1, r6, #32
102c8554:	e59f3110 	ldr	r3, [pc, #272]	; 102c866c <OnURCHandler_BTScan+0x2a4>
102c8558:	e28d0008 	add	r0, sp, #8
102c855c:	e12fff33 	blx	r3
    if (Ql_StrPrefixMatch(strURC, urcHead))
102c8560:	e1a00009 	mov	r0, r9
102c8564:	e28d1008 	add	r1, sp, #8
102c8568:	e12fff37 	blx	r7
102c856c:	e3500000 	cmp	r0, #0
102c8570:	0afffff4 	beq	102c8548 <OnURCHandler_BTScan+0x180>
    {
        Ql_sscanf(strURC, "%*[^:]: %d\r\n", &err_code);
102c8574:	e59f30d0 	ldr	r3, [pc, #208]	; 102c864c <OnURCHandler_BTScan+0x284>
102c8578:	e28d2004 	add	r2, sp, #4
102c857c:	e5933000 	ldr	r3, [r3]
102c8580:	e1a00009 	mov	r0, r9
102c8584:	e59f10e8 	ldr	r1, [pc, #232]	; 102c8674 <OnURCHandler_BTScan+0x2ac>
102c8588:	e12fff33 	blx	r3
        callback_bt(MSG_BT_SCAN_IND, err_code, NULL, NULL);
102c858c:	e1a02008 	mov	r2, r8
102c8590:	e595c090 	ldr	ip, [r5, #144]	; 0x90
102c8594:	e3a00001 	mov	r0, #1
102c8598:	e59d1004 	ldr	r1, [sp, #4]
102c859c:	e1a03008 	mov	r3, r8
102c85a0:	e12fff3c 	blx	ip
102c85a4:	eaffffe7 	b	102c8548 <OnURCHandler_BTScan+0x180>
    {
        Ql_sscanf(strURC, "%*[^:]: %d%*[^\r\n]\r\n",&deviceId);
        
        if (0 == deviceId)  // scan finished
        {
            callback_bt(MSG_BT_SCAN_IND,URC_BT_SCAN_FINISHED, NULL, NULL);
102c85a8:	e595c090 	ldr	ip, [r5, #144]	; 0x90
102c85ac:	e3a00001 	mov	r0, #1
102c85b0:	e3a01002 	mov	r1, #2
102c85b4:	e1a03002 	mov	r3, r2
102c85b8:	e12fff3c 	blx	ip
102c85bc:	eaffffe1 	b	102c8548 <OnURCHandler_BTScan+0x180>

            Ql_sscanf(strURC, "%*[^\"]\"%[^\"]%*[^\r\n]\r\n",pstrNewBtDev->btDevice.name);
            Ql_sscanf(strURC, "%*[^,],%*[^,],%[^\r\n]\r\n",pstrNewBtDev->btDevice.addr);
            pstrNewBtDev->btDevice.devHdl = Ql_GenHash(pstrNewBtDev->btDevice.addr, Ql_strlen(pstrNewBtDev->btDevice.addr));
            ret = BT_ScanUpdateConfirm(pstrNewBtDev->btDevice.devHdl,pstrNewBtDev->devId,pstrNewBtDev->btDevice.name);
			callback_bt(MSG_BT_SCAN_IND,URC_BT_SCAN_FOUND,&(pstrNewBtDev->btDevice), NULL);//customer own management
102c85c0:	e1a02007 	mov	r2, r7
102c85c4:	e3a03000 	mov	r3, #0
102c85c8:	e595c090 	ldr	ip, [r5, #144]	; 0x90
102c85cc:	e3a00001 	mov	r0, #1
102c85d0:	e3a01003 	mov	r1, #3
102c85d4:	e12fff3c 	blx	ip
    Ql_sprintf(strAT, "AT+QBTSCAN=%d,%d,%d", timeout, maxDevCount, CoD);
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), NULL, NULL, 0);
}


void OnURCHandler_BTScan(const char* strURC, void* reserved)
102c85d8:	e59f2098 	ldr	r2, [pc, #152]	; 102c8678 <OnURCHandler_BTScan+0x2b0>
102c85dc:	e3a04000 	mov	r4, #0
102c85e0:	e2423078 	sub	r3, r2, #120	; 0x78
{
    u16 i;
    u16 count = 0 ;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
    {
        if (NULL != m_arrBTDev[i])
102c85e4:	e5b31004 	ldr	r1, [r3, #4]!
        {
            count++;
102c85e8:	e284c001 	add	ip, r4, #1
{
    u16 i;
    u16 count = 0 ;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
    {
        if (NULL != m_arrBTDev[i])
102c85ec:	e3510000 	cmp	r1, #0
        {
            count++;
102c85f0:	e1a0c80c 	lsl	ip, ip, #16
102c85f4:	11a0482c 	lsrne	r4, ip, #16

static bool BT_DevMngmt_isFull(void)
{
    u16 i;
    u16 count = 0 ;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c85f8:	e1530002 	cmp	r3, r2
102c85fc:	1afffff8 	bne	102c85e4 <OnURCHandler_BTScan+0x21c>
        {
            count++;
        }
    }

    if(count >= MAX_BT_DEV_CNT)
102c8600:	e354001d 	cmp	r4, #29
102c8604:	8a000009 	bhi	102c8630 <OnURCHandler_BTScan+0x268>
102c8608:	e3a03000 	mov	r3, #0
102c860c:	ea000002 	b	102c861c <OnURCHandler_BTScan+0x254>
102c8610:	e2833001 	add	r3, r3, #1
//
// Append a bt device
static void BT_DevMngmt_Append(ST_BT_DevInfo* pstBtDev)
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c8614:	e353001e 	cmp	r3, #30
102c8618:	0affffca 	beq	102c8548 <OnURCHandler_BTScan+0x180>
    {
        if (NULL == m_arrBTDev[i])
102c861c:	e5b62004 	ldr	r2, [r6, #4]!
102c8620:	e3520000 	cmp	r2, #0
102c8624:	1afffff9 	bne	102c8610 <OnURCHandler_BTScan+0x248>
        {
            m_arrBTDev[i] = pstBtDev;
102c8628:	e7857103 	str	r7, [r5, r3, lsl #2]
102c862c:	eaffffc5 	b	102c8548 <OnURCHandler_BTScan+0x180>
	            {
	               BT_DevMngmt_Append(pstrNewBtDev);
	            }
	            else
	            {
	                Ql_MEM_Free(pstrNewBtDev);
102c8630:	e1a00007 	mov	r0, r7
102c8634:	e59f3034 	ldr	r3, [pc, #52]	; 102c8670 <OnURCHandler_BTScan+0x2a8>
102c8638:	e12fff33 	blx	r3
102c863c:	eaffffc1 	b	102c8548 <OnURCHandler_BTScan+0x180>
102c8640:	102ce0d4 	.word	0x102ce0d4
102c8644:	f03d2058 	.word	0xf03d2058
102c8648:	102cbda0 	.word	0x102cbda0
102c864c:	f03d31f0 	.word	0xf03d31f0
102c8650:	102cebb4 	.word	0x102cebb4
102c8654:	102cc7f4 	.word	0x102cc7f4
102c8658:	102cd6b0 	.word	0x102cd6b0
102c865c:	102cebdc 	.word	0x102cebdc
102c8660:	102ced18 	.word	0x102ced18
102c8664:	102cd560 	.word	0x102cd560
102c8668:	102cc1ec 	.word	0x102cc1ec
102c866c:	102cd438 	.word	0x102cd438
102c8670:	102cc86c 	.word	0x102cc86c
102c8674:	102ceb88 	.word	0x102ceb88
102c8678:	f03d20cc 	.word	0xf03d20cc

102c867c <RIL_BT_GetDevListInfo>:
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/

s32 RIL_BT_GetDevListInfo(void)
{
102c867c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
102c8680:	e59f4060 	ldr	r4, [pc, #96]	; 102c86e8 <RIL_BT_GetDevListInfo+0x6c>
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
    {
        if (NULL != m_arrBTDev[i])
        {
            Ql_Debug_Trace("%s %2d 0x%08x %2d %2d %2d %s\r\n",m_arrBTDev[i]->btDevice.addr,m_arrBTDev[i]->devId,\
102c8684:	e59f7060 	ldr	r7, [pc, #96]	; 102c86ec <RIL_BT_GetDevListInfo+0x70>
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/

s32 RIL_BT_GetDevListInfo(void)
{
102c8688:	e24dd014 	sub	sp, sp, #20
*                RIL_AT_BUSY,   sending AT.
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/

s32 RIL_BT_GetDevListInfo(void)
102c868c:	e2846078 	add	r6, r4, #120	; 0x78
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
    {
        if (NULL != m_arrBTDev[i])
102c8690:	e5b4c004 	ldr	ip, [r4, #4]!
        {
            Ql_Debug_Trace("%s %2d 0x%08x %2d %2d %2d %s\r\n",m_arrBTDev[i]->btDevice.addr,m_arrBTDev[i]->devId,\
102c8694:	e59f0054 	ldr	r0, [pc, #84]	; 102c86f0 <RIL_BT_GetDevListInfo+0x74>
s32 RIL_BT_GetDevListInfo(void)
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
    {
        if (NULL != m_arrBTDev[i])
102c8698:	e35c0000 	cmp	ip, #0
        {
            Ql_Debug_Trace("%s %2d 0x%08x %2d %2d %2d %s\r\n",m_arrBTDev[i]->btDevice.addr,m_arrBTDev[i]->devId,\
                m_arrBTDev[i]->btDevice.devHdl,m_arrBTDev[i]->pairId,m_arrBTDev[i]->connId,m_arrBTDev[i]->profileId,m_arrBTDev[i]->btDevice.name);
102c869c:	e28c5004 	add	r5, ip, #4
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
    {
        if (NULL != m_arrBTDev[i])
        {
            Ql_Debug_Trace("%s %2d 0x%08x %2d %2d %2d %s\r\n",m_arrBTDev[i]->btDevice.addr,m_arrBTDev[i]->devId,\
102c86a0:	e28c103c 	add	r1, ip, #60	; 0x3c
s32 RIL_BT_GetDevListInfo(void)
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
    {
        if (NULL != m_arrBTDev[i])
102c86a4:	0a00000a 	beq	102c86d4 <RIL_BT_GetDevListInfo+0x58>
        {
            Ql_Debug_Trace("%s %2d 0x%08x %2d %2d %2d %s\r\n",m_arrBTDev[i]->btDevice.addr,m_arrBTDev[i]->devId,\
102c86a8:	e59ce050 	ldr	lr, [ip, #80]	; 0x50
102c86ac:	e59c204c 	ldr	r2, [ip, #76]	; 0x4c
102c86b0:	e59c3000 	ldr	r3, [ip]
102c86b4:	e58de000 	str	lr, [sp]
102c86b8:	e59ce054 	ldr	lr, [ip, #84]	; 0x54
102c86bc:	e58de004 	str	lr, [sp, #4]
102c86c0:	e59cc058 	ldr	ip, [ip, #88]	; 0x58
102c86c4:	e58dc008 	str	ip, [sp, #8]
102c86c8:	e58d500c 	str	r5, [sp, #12]
102c86cc:	e597c000 	ldr	ip, [r7]
102c86d0:	e12fff3c 	blx	ip
*****************************************************************/

s32 RIL_BT_GetDevListInfo(void)
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c86d4:	e1540006 	cmp	r4, r6
102c86d8:	1affffec 	bne	102c8690 <RIL_BT_GetDevListInfo+0x14>
            Ql_Debug_Trace("%s %2d 0x%08x %2d %2d %2d %s\r\n",m_arrBTDev[i]->btDevice.addr,m_arrBTDev[i]->devId,\
                m_arrBTDev[i]->btDevice.devHdl,m_arrBTDev[i]->pairId,m_arrBTDev[i]->connId,m_arrBTDev[i]->profileId,m_arrBTDev[i]->btDevice.name);
        }
    }
    return RIL_AT_SUCCESS;
}
102c86dc:	e3a00000 	mov	r0, #0
102c86e0:	e28dd014 	add	sp, sp, #20
102c86e4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
102c86e8:	f03d2054 	.word	0xf03d2054
102c86ec:	f03d31ec 	.word	0xf03d31ec
102c86f0:	102ced30 	.word	0x102ced30

102c86f4 <RIL_BT_GetDevListPointer>:
*****************************************************************/

ST_BT_DevInfo ** RIL_BT_GetDevListPointer(void)
{
    return m_arrBTDev;
}
102c86f4:	e59f0000 	ldr	r0, [pc]	; 102c86fc <RIL_BT_GetDevListPointer+0x8>
102c86f8:	e12fff1e 	bx	lr
102c86fc:	f03d2058 	.word	0xf03d2058

102c8700 <RIL_BT_StopScan>:
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_StopScan(void)
{
    char strAT[] = "AT+QBTSCANC\0";
102c8700:	e59f3044 	ldr	r3, [pc, #68]	; 102c874c <RIL_BT_StopScan+0x4c>
*                RIL_AT_BUSY,   sending AT.
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_StopScan(void)
{
102c8704:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    char strAT[] = "AT+QBTSCANC\0";
102c8708:	e893000f 	ldm	r3, {r0, r1, r2, r3}
*                RIL_AT_BUSY,   sending AT.
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_StopScan(void)
{
102c870c:	e24dd01c 	sub	sp, sp, #28
    char strAT[] = "AT+QBTSCANC\0";
102c8710:	e28dc008 	add	ip, sp, #8
102c8714:	e8ac0007 	stmia	ip!, {r0, r1, r2}
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), NULL, NULL, 0);
102c8718:	e28d0008 	add	r0, sp, #8
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_StopScan(void)
{
    char strAT[] = "AT+QBTSCANC\0";
102c871c:	e5cc3000 	strb	r3, [ip]
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), NULL, NULL, 0);
102c8720:	e59f3028 	ldr	r3, [pc, #40]	; 102c8750 <RIL_BT_StopScan+0x50>
102c8724:	e12fff33 	blx	r3
102c8728:	e3a03000 	mov	r3, #0
102c872c:	e1a02003 	mov	r2, r3
102c8730:	e58d3000 	str	r3, [sp]
102c8734:	e59fc018 	ldr	ip, [pc, #24]	; 102c8754 <RIL_BT_StopScan+0x54>
102c8738:	e1a01000 	mov	r1, r0
102c873c:	e28d0008 	add	r0, sp, #8
102c8740:	e12fff3c 	blx	ip
}
102c8744:	e28dd01c 	add	sp, sp, #28
102c8748:	e8bd8000 	ldmfd	sp!, {pc}
102c874c:	102ce0e4 	.word	0x102ce0e4
102c8750:	102cd560 	.word	0x102cd560
102c8754:	102cd11c 	.word	0x102cd11c

102c8758 <RIL_BT_QueryState>:
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_QueryState(s32 *status)
{
    char strAT[] = "AT+QBTSTATE\0";
102c8758:	e59f204c 	ldr	r2, [pc, #76]	; 102c87ac <RIL_BT_QueryState+0x54>
*                RIL_AT_BUSY,   sending AT.
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_QueryState(s32 *status)
{
102c875c:	e92d4010 	push	{r4, lr}
102c8760:	e1a04000 	mov	r4, r0
    char strAT[] = "AT+QBTSTATE\0";
102c8764:	e892000f 	ldm	r2, {r0, r1, r2, r3}
*                RIL_AT_BUSY,   sending AT.
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_QueryState(s32 *status)
{
102c8768:	e24dd018 	sub	sp, sp, #24
    char strAT[] = "AT+QBTSTATE\0";
102c876c:	e28dc008 	add	ip, sp, #8
102c8770:	e8ac0007 	stmia	ip!, {r0, r1, r2}
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), ATRsp_QBTSTATE_Hdlr, (void *)status, 0);
102c8774:	e28d0008 	add	r0, sp, #8
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_QueryState(s32 *status)
{
    char strAT[] = "AT+QBTSTATE\0";
102c8778:	e5cc3000 	strb	r3, [ip]
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), ATRsp_QBTSTATE_Hdlr, (void *)status, 0);
102c877c:	e59f302c 	ldr	r3, [pc, #44]	; 102c87b0 <RIL_BT_QueryState+0x58>
102c8780:	e12fff33 	blx	r3
102c8784:	e3a03000 	mov	r3, #0
102c8788:	e58d3000 	str	r3, [sp]
102c878c:	e59f2020 	ldr	r2, [pc, #32]	; 102c87b4 <RIL_BT_QueryState+0x5c>
102c8790:	e1a03004 	mov	r3, r4
102c8794:	e59fc01c 	ldr	ip, [pc, #28]	; 102c87b8 <RIL_BT_QueryState+0x60>
102c8798:	e1a01000 	mov	r1, r0
102c879c:	e28d0008 	add	r0, sp, #8
102c87a0:	e12fff3c 	blx	ip
}
102c87a4:	e28dd018 	add	sp, sp, #24
102c87a8:	e8bd8010 	pop	{r4, pc}
102c87ac:	102ce0f4 	.word	0x102ce0f4
102c87b0:	102cd560 	.word	0x102cd560
102c87b4:	102c71c8 	.word	0x102c71c8
102c87b8:	102cd11c 	.word	0x102cd11c

102c87bc <RIL_BT_StartScan>:

s32 RIL_BT_StartScan(u16 maxDevCount, u16 CoD, u16 timeout)
{
    char strAT[20];

    if(maxDevCount < 0 || maxDevCount > MAX_BT_SCAN_CNT)
102c87bc:	e3500014 	cmp	r0, #20
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/

s32 RIL_BT_StartScan(u16 maxDevCount, u16 CoD, u16 timeout)
{
102c87c0:	e92d4070 	push	{r4, r5, r6, lr}
102c87c4:	e1a04000 	mov	r4, r0
102c87c8:	e24dd020 	sub	sp, sp, #32
102c87cc:	e1a05001 	mov	r5, r1
102c87d0:	e1a06002 	mov	r6, r2
    char strAT[20];

    if(maxDevCount < 0 || maxDevCount > MAX_BT_SCAN_CNT)
102c87d4:	8a000021 	bhi	102c8860 <RIL_BT_StartScan+0xa4>
    {
        return  RIL_AT_INVALID_PARAM ;
    }

    if(CoD < 0 || CoD > MAX_BT_SCAN_COD)
102c87d8:	e35100ff 	cmp	r1, #255	; 0xff
102c87dc:	8a00001f 	bhi	102c8860 <RIL_BT_StartScan+0xa4>
    {
        return  RIL_AT_INVALID_PARAM ;
    }

    if(timeout < 1 || timeout > MAX_BT_SCAN_TIMEOUT)
102c87e0:	e2423001 	sub	r3, r2, #1
102c87e4:	e1a03803 	lsl	r3, r3, #16
102c87e8:	e35308fe 	cmp	r3, #16646144	; 0xfe0000
102c87ec:	8a00001b 	bhi	102c8860 <RIL_BT_StartScan+0xa4>
    {
        return  RIL_AT_INVALID_PARAM ;
    }

    BT_DevMngmt_Clean();
102c87f0:	ebfffa65 	bl	102c718c <BT_DevMngmt_Clean>

    RIL_BT_QueryState(NULL);
102c87f4:	e3a00000 	mov	r0, #0
102c87f8:	ebffffd6 	bl	102c8758 <RIL_BT_QueryState>

    // Start to scan bt devices
    Ql_memset(strAT, 0x0, sizeof(strAT));
102c87fc:	e3a01000 	mov	r1, #0
102c8800:	e3a02014 	mov	r2, #20
102c8804:	e59f305c 	ldr	r3, [pc, #92]	; 102c8868 <RIL_BT_StartScan+0xac>
102c8808:	e28d000c 	add	r0, sp, #12
102c880c:	e12fff33 	blx	r3
    Ql_sprintf(strAT, "AT+QBTSCAN=%d,%d,%d", timeout, maxDevCount, CoD);
102c8810:	e59f0054 	ldr	r0, [pc, #84]	; 102c886c <RIL_BT_StartScan+0xb0>
102c8814:	e59f1054 	ldr	r1, [pc, #84]	; 102c8870 <RIL_BT_StartScan+0xb4>
102c8818:	e1a02006 	mov	r2, r6
102c881c:	e1a03004 	mov	r3, r4
102c8820:	e58d5000 	str	r5, [sp]
102c8824:	e590c000 	ldr	ip, [r0]
102c8828:	e28d000c 	add	r0, sp, #12
102c882c:	e12fff3c 	blx	ip
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), NULL, NULL, 0);
102c8830:	e59f303c 	ldr	r3, [pc, #60]	; 102c8874 <RIL_BT_StartScan+0xb8>
102c8834:	e28d000c 	add	r0, sp, #12
102c8838:	e12fff33 	blx	r3
102c883c:	e3a03000 	mov	r3, #0
102c8840:	e1a02003 	mov	r2, r3
102c8844:	e58d3000 	str	r3, [sp]
102c8848:	e59fc028 	ldr	ip, [pc, #40]	; 102c8878 <RIL_BT_StartScan+0xbc>
102c884c:	e1a01000 	mov	r1, r0
102c8850:	e28d000c 	add	r0, sp, #12
102c8854:	e12fff3c 	blx	ip
}
102c8858:	e28dd020 	add	sp, sp, #32
102c885c:	e8bd8070 	pop	{r4, r5, r6, pc}
{
    char strAT[20];

    if(maxDevCount < 0 || maxDevCount > MAX_BT_SCAN_CNT)
    {
        return  RIL_AT_INVALID_PARAM ;
102c8860:	e3e00003 	mvn	r0, #3
102c8864:	eafffffb 	b	102c8858 <RIL_BT_StartScan+0x9c>
102c8868:	102cd6b0 	.word	0x102cd6b0
102c886c:	f03d31e8 	.word	0xf03d31e8
102c8870:	102ced50 	.word	0x102ced50
102c8874:	102cd560 	.word	0x102cd560
102c8878:	102cd11c 	.word	0x102cd11c

102c887c <RIL_BT_Initialize>:
*                RIL_AT_BUSY,   sending AT.
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_Initialize(CALLBACK_BT_IND cb)
{
102c887c:	e92d4010 	push	{r4, lr}
    
    if (!cb)
102c8880:	e2504000 	subs	r4, r0, #0
102c8884:	0a000006 	beq	102c88a4 <RIL_BT_Initialize+0x28>
    {
        return RIL_AT_INVALID_PARAM;
    }
    
    BT_DevMngmt_Clean();
102c8888:	ebfffa3f 	bl	102c718c <BT_DevMngmt_Clean>
    
    callback_bt = cb;
102c888c:	e59f3018 	ldr	r3, [pc, #24]	; 102c88ac <RIL_BT_Initialize+0x30>

    RIL_BT_QueryState(NULL); //update paired items
102c8890:	e3a00000 	mov	r0, #0
        return RIL_AT_INVALID_PARAM;
    }
    
    BT_DevMngmt_Clean();
    
    callback_bt = cb;
102c8894:	e5834090 	str	r4, [r3, #144]	; 0x90

    RIL_BT_QueryState(NULL); //update paired items
102c8898:	ebffffae 	bl	102c8758 <RIL_BT_QueryState>
    
    return RIL_AT_SUCCESS;
102c889c:	e3a00000 	mov	r0, #0
102c88a0:	e8bd8010 	pop	{r4, pc}
s32 RIL_BT_Initialize(CALLBACK_BT_IND cb)
{
    
    if (!cb)
    {
        return RIL_AT_INVALID_PARAM;
102c88a4:	e3e00003 	mvn	r0, #3
    callback_bt = cb;

    RIL_BT_QueryState(NULL); //update paired items
    
    return RIL_AT_SUCCESS;
}
102c88a8:	e8bd8010 	pop	{r4, pc}
102c88ac:	f03d2058 	.word	0xf03d2058

102c88b0 <RIL_BT_PairReq>:
*                RIL_AT_BUSY,   sending AT.
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_PairReq(BT_DEV_HDL hdlDevice)
{
102c88b0:	e59f307c 	ldr	r3, [pc, #124]	; 102c8934 <RIL_BT_PairReq+0x84>
102c88b4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
*                RIL_AT_TIMEOUT,send AT timeout.
*                RIL_AT_BUSY,   sending AT.
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_PairReq(BT_DEV_HDL hdlDevice)
102c88b8:	e283c078 	add	ip, r3, #120	; 0x78
{
102c88bc:	e24dd024 	sub	sp, sp, #36	; 0x24
102c88c0:	ea000001 	b	102c88cc <RIL_BT_PairReq+0x1c>


s32 BT_DevMngmt_GetDeviceId(const u32 hdl)
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c88c4:	e153000c 	cmp	r3, ip
102c88c8:	0a000017 	beq	102c892c <RIL_BT_PairReq+0x7c>
    {
        if (hdl == m_arrBTDev[i]->btDevice.devHdl)
102c88cc:	e5b32004 	ldr	r2, [r3, #4]!
102c88d0:	e5921000 	ldr	r1, [r2]
102c88d4:	e1500001 	cmp	r0, r1
102c88d8:	1afffff9 	bne	102c88c4 <RIL_BT_PairReq+0x14>
        {
            return m_arrBTDev[i]->devId;
102c88dc:	e592204c 	ldr	r2, [r2, #76]	; 0x4c
{
    char strAT[20];
    s32  devId ;
    
    devId = BT_DevMngmt_GetDeviceId(hdlDevice);
    if(devId == 0)
102c88e0:	e3520000 	cmp	r2, #0
102c88e4:	0a000010 	beq	102c892c <RIL_BT_PairReq+0x7c>
    {
        return RIL_AT_INVALID_PARAM;
    }    
    Ql_sprintf(strAT, "AT+QBTPAIR=%d", devId);
102c88e8:	e59f3048 	ldr	r3, [pc, #72]	; 102c8938 <RIL_BT_PairReq+0x88>
102c88ec:	e59f1048 	ldr	r1, [pc, #72]	; 102c893c <RIL_BT_PairReq+0x8c>
102c88f0:	e5933000 	ldr	r3, [r3]
102c88f4:	e28d000c 	add	r0, sp, #12
102c88f8:	e12fff33 	blx	r3
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), NULL, NULL, 0);
102c88fc:	e59f303c 	ldr	r3, [pc, #60]	; 102c8940 <RIL_BT_PairReq+0x90>
102c8900:	e28d000c 	add	r0, sp, #12
102c8904:	e12fff33 	blx	r3
102c8908:	e3a03000 	mov	r3, #0
102c890c:	e1a02003 	mov	r2, r3
102c8910:	e58d3000 	str	r3, [sp]
102c8914:	e59fc028 	ldr	ip, [pc, #40]	; 102c8944 <RIL_BT_PairReq+0x94>
102c8918:	e1a01000 	mov	r1, r0
102c891c:	e28d000c 	add	r0, sp, #12
102c8920:	e12fff3c 	blx	ip
}
102c8924:	e28dd024 	add	sp, sp, #36	; 0x24
102c8928:	e8bd8000 	ldmfd	sp!, {pc}
    s32  devId ;
    
    devId = BT_DevMngmt_GetDeviceId(hdlDevice);
    if(devId == 0)
    {
        return RIL_AT_INVALID_PARAM;
102c892c:	e3e00003 	mvn	r0, #3
102c8930:	eafffffb 	b	102c8924 <RIL_BT_PairReq+0x74>
102c8934:	f03d2054 	.word	0xf03d2054
102c8938:	f03d31e8 	.word	0xf03d31e8
102c893c:	102ced64 	.word	0x102ced64
102c8940:	102cd560 	.word	0x102cd560
102c8944:	102cd11c 	.word	0x102cd11c

102c8948 <OnURCHandler_BTPair>:




void OnURCHandler_BTPair(const char* strURC, void* reserved)
{
102c8948:	e92d45f0 	push	{r4, r5, r6, r7, r8, sl, lr}
    char urcHead[30];
    char pinCode[BT_PIN_LEN] = {0};
    ST_BT_BasicInfo bt_dev;
    char temp[30]={0};

    Ql_memset(&bt_dev, 0x0, sizeof(ST_BT_BasicInfo));
102c894c:	e3a0204c 	mov	r2, #76	; 0x4c




void OnURCHandler_BTPair(const char* strURC, void* reserved)
{
102c8950:	e24dd09c 	sub	sp, sp, #156	; 0x9c
    s32 err_code = 0;
102c8954:	e3a04000 	mov	r4, #0
    char urcHead[30];
    char pinCode[BT_PIN_LEN] = {0};
    ST_BT_BasicInfo bt_dev;
    char temp[30]={0};

    Ql_memset(&bt_dev, 0x0, sizeof(ST_BT_BasicInfo));
102c8958:	e1a01004 	mov	r1, r4
102c895c:	e59f61b8 	ldr	r6, [pc, #440]	; 102c8b1c <OnURCHandler_BTPair+0x1d4>




void OnURCHandler_BTPair(const char* strURC, void* reserved)
{
102c8960:	e1a05000 	mov	r5, r0
    char temp[30]={0};

    Ql_memset(&bt_dev, 0x0, sizeof(ST_BT_BasicInfo));
    Ql_memset(pinCode, 0x0, sizeof(pinCode));

	if(callback_bt == NULL)
102c8964:	e59f71b4 	ldr	r7, [pc, #436]	; 102c8b20 <OnURCHandler_BTPair+0x1d8>
    char urcHead[30];
    char pinCode[BT_PIN_LEN] = {0};
    ST_BT_BasicInfo bt_dev;
    char temp[30]={0};

    Ql_memset(&bt_dev, 0x0, sizeof(ST_BT_BasicInfo));
102c8968:	e08d0002 	add	r0, sp, r2



void OnURCHandler_BTPair(const char* strURC, void* reserved)
{
    s32 err_code = 0;
102c896c:	e58d4000 	str	r4, [sp]
    char urcHead[30];
    char pinCode[BT_PIN_LEN] = {0};
102c8970:	e58d4004 	str	r4, [sp, #4]
102c8974:	e1cd40b8 	strh	r4, [sp, #8]
102c8978:	e5cd400a 	strb	r4, [sp, #10]
    ST_BT_BasicInfo bt_dev;
    char temp[30]={0};
102c897c:	e58d402c 	str	r4, [sp, #44]	; 0x2c
102c8980:	e58d4030 	str	r4, [sp, #48]	; 0x30
102c8984:	e58d4034 	str	r4, [sp, #52]	; 0x34
102c8988:	e58d4038 	str	r4, [sp, #56]	; 0x38
102c898c:	e58d403c 	str	r4, [sp, #60]	; 0x3c
102c8990:	e58d4040 	str	r4, [sp, #64]	; 0x40
102c8994:	e58d4044 	str	r4, [sp, #68]	; 0x44
102c8998:	e1cd44b8 	strh	r4, [sp, #72]	; 0x48

    Ql_memset(&bt_dev, 0x0, sizeof(ST_BT_BasicInfo));
102c899c:	e12fff36 	blx	r6
    Ql_memset(pinCode, 0x0, sizeof(pinCode));
102c89a0:	e28d0004 	add	r0, sp, #4
102c89a4:	e1a01004 	mov	r1, r4
102c89a8:	e3a02007 	mov	r2, #7
102c89ac:	e12fff36 	blx	r6

	if(callback_bt == NULL)
102c89b0:	e5973090 	ldr	r3, [r7, #144]	; 0x90
102c89b4:	e1530004 	cmp	r3, r4
102c89b8:	0a000030 	beq	102c8a80 <OnURCHandler_BTPair+0x138>
	}

    // +QBTPAIR: "H60-L01",F4E3FBE47920,724242

    
    Ql_strcpy(urcHead, "\r\n+QBTPAIR:\0");
102c89bc:	e59f1160 	ldr	r1, [pc, #352]	; 102c8b24 <OnURCHandler_BTPair+0x1dc>
102c89c0:	e28d000c 	add	r0, sp, #12
102c89c4:	e59f815c 	ldr	r8, [pc, #348]	; 102c8b28 <OnURCHandler_BTPair+0x1e0>
102c89c8:	e12fff38 	blx	r8
    if (Ql_StrPrefixMatch(strURC, urcHead))
102c89cc:	e59f6158 	ldr	r6, [pc, #344]	; 102c8b2c <OnURCHandler_BTPair+0x1e4>
102c89d0:	e1a00005 	mov	r0, r5
102c89d4:	e28d100c 	add	r1, sp, #12
102c89d8:	e12fff36 	blx	r6
102c89dc:	e250a000 	subs	sl, r0, #0
102c89e0:	0a000028 	beq	102c8a88 <OnURCHandler_BTPair+0x140>
    {
        Ql_sscanf(strURC, "%*[^\"]\"%[^\"]%*[^\r\n]\r\n", bt_dev.name);
102c89e4:	e59f6144 	ldr	r6, [pc, #324]	; 102c8b30 <OnURCHandler_BTPair+0x1e8>
102c89e8:	e59f1144 	ldr	r1, [pc, #324]	; 102c8b34 <OnURCHandler_BTPair+0x1ec>
102c89ec:	e28d2050 	add	r2, sp, #80	; 0x50
102c89f0:	e5963000 	ldr	r3, [r6]
102c89f4:	e1a00005 	mov	r0, r5
102c89f8:	e12fff33 	blx	r3
        Ql_sscanf(strURC, "%*[^,],%[^\r\n]\r\n", temp);
102c89fc:	e28d202c 	add	r2, sp, #44	; 0x2c
102c8a00:	e5963000 	ldr	r3, [r6]
102c8a04:	e59f112c 	ldr	r1, [pc, #300]	; 102c8b38 <OnURCHandler_BTPair+0x1f0>
102c8a08:	e1a00005 	mov	r0, r5
102c8a0c:	e12fff33 	blx	r3
       
        if(Ql_strlen(temp) == (BT_ADDR_LEN - 1))
102c8a10:	e59f8124 	ldr	r8, [pc, #292]	; 102c8b3c <OnURCHandler_BTPair+0x1f4>
102c8a14:	e28d002c 	add	r0, sp, #44	; 0x2c
102c8a18:	e12fff38 	blx	r8
        {
             Ql_sscanf(strURC, "%*[^,],%[^\r\n]\r\n", bt_dev.addr);
102c8a1c:	e28d2088 	add	r2, sp, #136	; 0x88
102c8a20:	e5963000 	ldr	r3, [r6]
    if (Ql_StrPrefixMatch(strURC, urcHead))
    {
        Ql_sscanf(strURC, "%*[^\"]\"%[^\"]%*[^\r\n]\r\n", bt_dev.name);
        Ql_sscanf(strURC, "%*[^,],%[^\r\n]\r\n", temp);
       
        if(Ql_strlen(temp) == (BT_ADDR_LEN - 1))
102c8a24:	e350000c 	cmp	r0, #12
        {
             Ql_sscanf(strURC, "%*[^,],%[^\r\n]\r\n", bt_dev.addr);
102c8a28:	e1a00005 	mov	r0, r5
    if (Ql_StrPrefixMatch(strURC, urcHead))
    {
        Ql_sscanf(strURC, "%*[^\"]\"%[^\"]%*[^\r\n]\r\n", bt_dev.name);
        Ql_sscanf(strURC, "%*[^,],%[^\r\n]\r\n", temp);
       
        if(Ql_strlen(temp) == (BT_ADDR_LEN - 1))
102c8a2c:	0a00002a 	beq	102c8adc <OnURCHandler_BTPair+0x194>
             bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr));
             callback_bt(MSG_BT_PAIR_IND, URC_BT_NEED_PASSKEY, &bt_dev, NULL); // need paaskey
        }
        else
        {
            Ql_sscanf(strURC, "%*[^,],%[^,]%*[^\r\n]\r\n",bt_dev.addr);
102c8a30:	e59f1108 	ldr	r1, [pc, #264]	; 102c8b40 <OnURCHandler_BTPair+0x1f8>
102c8a34:	e12fff33 	blx	r3
            Ql_sscanf(strURC, "%*[^,],%*[^,],%[^\r\n]\r\n",pinCode);
102c8a38:	e28d2004 	add	r2, sp, #4
102c8a3c:	e5963000 	ldr	r3, [r6]
102c8a40:	e59f10fc 	ldr	r1, [pc, #252]	; 102c8b44 <OnURCHandler_BTPair+0x1fc>
102c8a44:	e1a00005 	mov	r0, r5
102c8a48:	e12fff33 	blx	r3
            bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr));
102c8a4c:	e28d0088 	add	r0, sp, #136	; 0x88
102c8a50:	e12fff38 	blx	r8
102c8a54:	e59f30ec 	ldr	r3, [pc, #236]	; 102c8b48 <OnURCHandler_BTPair+0x200>
102c8a58:	e1a01000 	mov	r1, r0
102c8a5c:	e28d0088 	add	r0, sp, #136	; 0x88
102c8a60:	e12fff33 	blx	r3
            callback_bt(MSG_BT_PAIR_IND, URC_BT_NO_NEED_PASSKEY, &bt_dev, pinCode); //direct confirm
102c8a64:	e597c090 	ldr	ip, [r7, #144]	; 0x90
102c8a68:	e3a01005 	mov	r1, #5
102c8a6c:	e28d204c 	add	r2, sp, #76	; 0x4c
102c8a70:	e28d3004 	add	r3, sp, #4
        }
        else
        {
            Ql_sscanf(strURC, "%*[^,],%[^,]%*[^\r\n]\r\n",bt_dev.addr);
            Ql_sscanf(strURC, "%*[^,],%*[^,],%[^\r\n]\r\n",pinCode);
            bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr));
102c8a74:	e58d004c 	str	r0, [sp, #76]	; 0x4c
            callback_bt(MSG_BT_PAIR_IND, URC_BT_NO_NEED_PASSKEY, &bt_dev, pinCode); //direct confirm
102c8a78:	e3a00002 	mov	r0, #2
102c8a7c:	e12fff3c 	blx	ip
        Ql_sscanf(strURC, "%*[^:]: %d\r\n", &err_code);
        callback_bt(MSG_BT_PAIR_IND, err_code, NULL, NULL);
        return;
    }

}
102c8a80:	e28dd09c 	add	sp, sp, #156	; 0x9c
102c8a84:	e8bd85f0 	pop	{r4, r5, r6, r7, r8, sl, pc}
            callback_bt(MSG_BT_PAIR_IND, URC_BT_NO_NEED_PASSKEY, &bt_dev, pinCode); //direct confirm
        }   
        return;
    }

    Ql_strcpy(urcHead, "+CME ERROR:\0");
102c8a88:	e59f10bc 	ldr	r1, [pc, #188]	; 102c8b4c <OnURCHandler_BTPair+0x204>
102c8a8c:	e28d000c 	add	r0, sp, #12
102c8a90:	e12fff38 	blx	r8
    if (Ql_StrPrefixMatch(strURC, urcHead))
102c8a94:	e1a00005 	mov	r0, r5
102c8a98:	e28d100c 	add	r1, sp, #12
102c8a9c:	e12fff36 	blx	r6
102c8aa0:	e3500000 	cmp	r0, #0
102c8aa4:	0afffff5 	beq	102c8a80 <OnURCHandler_BTPair+0x138>
    {
        Ql_sscanf(strURC, "%*[^:]: %d\r\n", &err_code);
102c8aa8:	e59f3080 	ldr	r3, [pc, #128]	; 102c8b30 <OnURCHandler_BTPair+0x1e8>
102c8aac:	e1a0200d 	mov	r2, sp
102c8ab0:	e59f1098 	ldr	r1, [pc, #152]	; 102c8b50 <OnURCHandler_BTPair+0x208>
102c8ab4:	e5933000 	ldr	r3, [r3]
102c8ab8:	e1a00005 	mov	r0, r5
102c8abc:	e12fff33 	blx	r3
        callback_bt(MSG_BT_PAIR_IND, err_code, NULL, NULL);
102c8ac0:	e1a0200a 	mov	r2, sl
102c8ac4:	e597c090 	ldr	ip, [r7, #144]	; 0x90
102c8ac8:	e3a00002 	mov	r0, #2
102c8acc:	e59d1000 	ldr	r1, [sp]
102c8ad0:	e1a0300a 	mov	r3, sl
102c8ad4:	e12fff3c 	blx	ip
102c8ad8:	eaffffe8 	b	102c8a80 <OnURCHandler_BTPair+0x138>
        Ql_sscanf(strURC, "%*[^\"]\"%[^\"]%*[^\r\n]\r\n", bt_dev.name);
        Ql_sscanf(strURC, "%*[^,],%[^\r\n]\r\n", temp);
       
        if(Ql_strlen(temp) == (BT_ADDR_LEN - 1))
        {
             Ql_sscanf(strURC, "%*[^,],%[^\r\n]\r\n", bt_dev.addr);
102c8adc:	e59f1054 	ldr	r1, [pc, #84]	; 102c8b38 <OnURCHandler_BTPair+0x1f0>
102c8ae0:	e12fff33 	blx	r3
             bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr));
102c8ae4:	e28d0088 	add	r0, sp, #136	; 0x88
102c8ae8:	e12fff38 	blx	r8
102c8aec:	e59f3054 	ldr	r3, [pc, #84]	; 102c8b48 <OnURCHandler_BTPair+0x200>
102c8af0:	e1a01000 	mov	r1, r0
102c8af4:	e28d0088 	add	r0, sp, #136	; 0x88
102c8af8:	e12fff33 	blx	r3
             callback_bt(MSG_BT_PAIR_IND, URC_BT_NEED_PASSKEY, &bt_dev, NULL); // need paaskey
102c8afc:	e597c090 	ldr	ip, [r7, #144]	; 0x90
102c8b00:	e3a01004 	mov	r1, #4
102c8b04:	e28d204c 	add	r2, sp, #76	; 0x4c
102c8b08:	e1a03004 	mov	r3, r4
        Ql_sscanf(strURC, "%*[^,],%[^\r\n]\r\n", temp);
       
        if(Ql_strlen(temp) == (BT_ADDR_LEN - 1))
        {
             Ql_sscanf(strURC, "%*[^,],%[^\r\n]\r\n", bt_dev.addr);
             bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr));
102c8b0c:	e58d004c 	str	r0, [sp, #76]	; 0x4c
             callback_bt(MSG_BT_PAIR_IND, URC_BT_NEED_PASSKEY, &bt_dev, NULL); // need paaskey
102c8b10:	e3a00002 	mov	r0, #2
102c8b14:	e12fff3c 	blx	ip
102c8b18:	eaffffd8 	b	102c8a80 <OnURCHandler_BTPair+0x138>
102c8b1c:	102cd6b0 	.word	0x102cd6b0
102c8b20:	f03d2058 	.word	0xf03d2058
102c8b24:	102ce104 	.word	0x102ce104
102c8b28:	102cd438 	.word	0x102cd438
102c8b2c:	102cbda0 	.word	0x102cbda0
102c8b30:	f03d31f0 	.word	0xf03d31f0
102c8b34:	102cebdc 	.word	0x102cebdc
102c8b38:	102ced74 	.word	0x102ced74
102c8b3c:	102cd560 	.word	0x102cd560
102c8b40:	102ced84 	.word	0x102ced84
102c8b44:	102ced18 	.word	0x102ced18
102c8b48:	102cc1ec 	.word	0x102cc1ec
102c8b4c:	102ce0b4 	.word	0x102ce0b4
102c8b50:	102ceb88 	.word	0x102ceb88

102c8b54 <RIL_BT_PairConfirm>:
*                RIL_AT_BUSY,   sending AT.
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_PairConfirm(bool accept, char* pinCode)
{
102c8b54:	e92d4010 	push	{r4, lr}
    char strAT[20] = {0};
102c8b58:	e3a0c000 	mov	ip, #0
*                RIL_AT_BUSY,   sending AT.
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_PairConfirm(bool accept, char* pinCode)
{
102c8b5c:	e24dd020 	sub	sp, sp, #32
    char strAT[20] = {0};

    if(accept != 0 && accept != 1)
102c8b60:	e3500001 	cmp	r0, #1
*                RIL_AT_BUSY,   sending AT.
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_PairConfirm(bool accept, char* pinCode)
{
102c8b64:	e1a02000 	mov	r2, r0
102c8b68:	e1a03001 	mov	r3, r1
    char strAT[20] = {0};
102c8b6c:	e58dc00c 	str	ip, [sp, #12]
102c8b70:	e58dc010 	str	ip, [sp, #16]
102c8b74:	e58dc014 	str	ip, [sp, #20]
102c8b78:	e58dc018 	str	ip, [sp, #24]
102c8b7c:	e58dc01c 	str	ip, [sp, #28]

    if(accept != 0 && accept != 1)
102c8b80:	8a000019 	bhi	102c8bec <RIL_BT_PairConfirm+0x98>
    {
        return RIL_AT_INVALID_PARAM;
    }

    if (NULL != pinCode)//not numeric code ,is passkey(4bit digits)
102c8b84:	e151000c 	cmp	r1, ip
    {
        Ql_sprintf(strAT, "AT+QBTPAIRCNF=%d,\"%s\"", (u8)accept, pinCode);
102c8b88:	e28d400c 	add	r4, sp, #12
    if(accept != 0 && accept != 1)
    {
        return RIL_AT_INVALID_PARAM;
    }

    if (NULL != pinCode)//not numeric code ,is passkey(4bit digits)
102c8b8c:	0a000010 	beq	102c8bd4 <RIL_BT_PairConfirm+0x80>
    {
        Ql_sprintf(strAT, "AT+QBTPAIRCNF=%d,\"%s\"", (u8)accept, pinCode);
102c8b90:	e59f105c 	ldr	r1, [pc, #92]	; 102c8bf4 <RIL_BT_PairConfirm+0xa0>
102c8b94:	e1a00004 	mov	r0, r4
102c8b98:	e591c000 	ldr	ip, [r1]
102c8b9c:	e59f1054 	ldr	r1, [pc, #84]	; 102c8bf8 <RIL_BT_PairConfirm+0xa4>
102c8ba0:	e12fff3c 	blx	ip
    }else{
        Ql_sprintf(strAT, "AT+QBTPAIRCNF=%d", (u8)accept);
    }
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), NULL, NULL, 0);
102c8ba4:	e59f3050 	ldr	r3, [pc, #80]	; 102c8bfc <RIL_BT_PairConfirm+0xa8>
102c8ba8:	e1a00004 	mov	r0, r4
102c8bac:	e12fff33 	blx	r3
102c8bb0:	e3a03000 	mov	r3, #0
102c8bb4:	e1a02003 	mov	r2, r3
102c8bb8:	e58d3000 	str	r3, [sp]
102c8bbc:	e59fc03c 	ldr	ip, [pc, #60]	; 102c8c00 <RIL_BT_PairConfirm+0xac>
102c8bc0:	e1a01000 	mov	r1, r0
102c8bc4:	e1a00004 	mov	r0, r4
102c8bc8:	e12fff3c 	blx	ip
}
102c8bcc:	e28dd020 	add	sp, sp, #32
102c8bd0:	e8bd8010 	pop	{r4, pc}

    if (NULL != pinCode)//not numeric code ,is passkey(4bit digits)
    {
        Ql_sprintf(strAT, "AT+QBTPAIRCNF=%d,\"%s\"", (u8)accept, pinCode);
    }else{
        Ql_sprintf(strAT, "AT+QBTPAIRCNF=%d", (u8)accept);
102c8bd4:	e59f3018 	ldr	r3, [pc, #24]	; 102c8bf4 <RIL_BT_PairConfirm+0xa0>
102c8bd8:	e1a00004 	mov	r0, r4
102c8bdc:	e5933000 	ldr	r3, [r3]
102c8be0:	e59f101c 	ldr	r1, [pc, #28]	; 102c8c04 <RIL_BT_PairConfirm+0xb0>
102c8be4:	e12fff33 	blx	r3
102c8be8:	eaffffed 	b	102c8ba4 <RIL_BT_PairConfirm+0x50>
{
    char strAT[20] = {0};

    if(accept != 0 && accept != 1)
    {
        return RIL_AT_INVALID_PARAM;
102c8bec:	e3e00003 	mvn	r0, #3
102c8bf0:	eafffff5 	b	102c8bcc <RIL_BT_PairConfirm+0x78>
102c8bf4:	f03d31e8 	.word	0xf03d31e8
102c8bf8:	102ced9c 	.word	0x102ced9c
102c8bfc:	102cd560 	.word	0x102cd560
102c8c00:	102cd11c 	.word	0x102cd11c
102c8c04:	102cedb4 	.word	0x102cedb4

102c8c08 <OnURCHandler_BTPairCnf>:
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), NULL, NULL, 0);
}


void OnURCHandler_BTPairCnf(const char* strURC, void* reserved)
{
102c8c08:	e92d45f0 	push	{r4, r5, r6, r7, r8, sl, lr}
    s32 err_code = 0;
102c8c0c:	e3a05000 	mov	r5, #0
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), NULL, NULL, 0);
}


void OnURCHandler_BTPairCnf(const char* strURC, void* reserved)
{
102c8c10:	e24dd07c 	sub	sp, sp, #124	; 0x7c
    char urcHead[30];
    ST_BT_BasicInfo bt_dev;

    Ql_memset(&bt_dev,  0x0, sizeof(ST_BT_BasicInfo));

    if(callback_bt == NULL)
102c8c14:	e59f61d8 	ldr	r6, [pc, #472]	; 102c8df4 <OnURCHandler_BTPairCnf+0x1ec>
    s32  pairedId;
    s32  is1stPaired;
    char urcHead[30];
    ST_BT_BasicInfo bt_dev;

    Ql_memset(&bt_dev,  0x0, sizeof(ST_BT_BasicInfo));
102c8c18:	e59f31d8 	ldr	r3, [pc, #472]	; 102c8df8 <OnURCHandler_BTPairCnf+0x1f0>
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), NULL, NULL, 0);
}


void OnURCHandler_BTPairCnf(const char* strURC, void* reserved)
{
102c8c1c:	e1a04000 	mov	r4, r0
    s32  pairedId;
    s32  is1stPaired;
    char urcHead[30];
    ST_BT_BasicInfo bt_dev;

    Ql_memset(&bt_dev,  0x0, sizeof(ST_BT_BasicInfo));
102c8c20:	e1a01005 	mov	r1, r5
102c8c24:	e28d002c 	add	r0, sp, #44	; 0x2c
102c8c28:	e3a0204c 	mov	r2, #76	; 0x4c
}


void OnURCHandler_BTPairCnf(const char* strURC, void* reserved)
{
    s32 err_code = 0;
102c8c2c:	e58d5000 	str	r5, [sp]
    s32  pairedId;
    s32  is1stPaired;
    char urcHead[30];
    ST_BT_BasicInfo bt_dev;

    Ql_memset(&bt_dev,  0x0, sizeof(ST_BT_BasicInfo));
102c8c30:	e12fff33 	blx	r3

    if(callback_bt == NULL)
102c8c34:	e5963090 	ldr	r3, [r6, #144]	; 0x90
102c8c38:	e1530005 	cmp	r3, r5
102c8c3c:	0a000036 	beq	102c8d1c <OnURCHandler_BTPairCnf+0x114>
       return;
	}

    
    // +QBTPAIRCNF:1,1,1,"H60-L01",F4E3FBE47920
    Ql_strcpy(urcHead, "\r\n+QBTPAIRCNF:\0");
102c8c40:	e59f11b4 	ldr	r1, [pc, #436]	; 102c8dfc <OnURCHandler_BTPairCnf+0x1f4>
102c8c44:	e28d000c 	add	r0, sp, #12
102c8c48:	e59f81b0 	ldr	r8, [pc, #432]	; 102c8e00 <OnURCHandler_BTPairCnf+0x1f8>
102c8c4c:	e12fff38 	blx	r8
    if (Ql_StrPrefixMatch(strURC, urcHead))
102c8c50:	e59f71ac 	ldr	r7, [pc, #428]	; 102c8e04 <OnURCHandler_BTPairCnf+0x1fc>
102c8c54:	e1a00004 	mov	r0, r4
102c8c58:	e28d100c 	add	r1, sp, #12
102c8c5c:	e12fff37 	blx	r7
102c8c60:	e250a000 	subs	sl, r0, #0
102c8c64:	0a00002e 	beq	102c8d24 <OnURCHandler_BTPairCnf+0x11c>
    {
        Ql_sscanf(strURC, "%*[^:]: %d%*[^\r\n]\r\n", &err_code);
102c8c68:	e59f7198 	ldr	r7, [pc, #408]	; 102c8e08 <OnURCHandler_BTPairCnf+0x200>
102c8c6c:	e1a00004 	mov	r0, r4
102c8c70:	e5973000 	ldr	r3, [r7]
102c8c74:	e59f1190 	ldr	r1, [pc, #400]	; 102c8e0c <OnURCHandler_BTPairCnf+0x204>
102c8c78:	e1a0200d 	mov	r2, sp
102c8c7c:	e12fff33 	blx	r3
        if (err_code > 0)
102c8c80:	e59d3000 	ldr	r3, [sp]
102c8c84:	e1530005 	cmp	r3, r5
102c8c88:	da00003a 	ble	102c8d78 <OnURCHandler_BTPairCnf+0x170>
        {
			Ql_sscanf(strURC, "%*[^,],%d%*[^\r\n]\r\n",&pairedId);
102c8c8c:	e28d2004 	add	r2, sp, #4
102c8c90:	e5973000 	ldr	r3, [r7]
102c8c94:	e59f1174 	ldr	r1, [pc, #372]	; 102c8e10 <OnURCHandler_BTPairCnf+0x208>
102c8c98:	e1a00004 	mov	r0, r4
102c8c9c:	e12fff33 	blx	r3
			Ql_sscanf(strURC, "%*[^,]%*[^,],%d%*[^\r\n]\r\n",&is1stPaired);
102c8ca0:	e28d2008 	add	r2, sp, #8
102c8ca4:	e5973000 	ldr	r3, [r7]
102c8ca8:	e59f1164 	ldr	r1, [pc, #356]	; 102c8e14 <OnURCHandler_BTPairCnf+0x20c>
102c8cac:	e1a00004 	mov	r0, r4
102c8cb0:	e12fff33 	blx	r3
            Ql_sscanf(strURC, "%*[^\"]\"%[^\"]%*[^\r\n]\r\n",bt_dev.name);
102c8cb4:	e28d2030 	add	r2, sp, #48	; 0x30
102c8cb8:	e5973000 	ldr	r3, [r7]
102c8cbc:	e59f1154 	ldr	r1, [pc, #340]	; 102c8e18 <OnURCHandler_BTPairCnf+0x210>
102c8cc0:	e1a00004 	mov	r0, r4
102c8cc4:	e12fff33 	blx	r3
            Ql_sscanf(strURC, "%*[^\"]\"%*[^\"]\",%[^\r\n]\r\n",bt_dev.addr);
102c8cc8:	e28d2068 	add	r2, sp, #104	; 0x68
102c8ccc:	e59f1148 	ldr	r1, [pc, #328]	; 102c8e1c <OnURCHandler_BTPairCnf+0x214>
102c8cd0:	e5973000 	ldr	r3, [r7]
102c8cd4:	e1a00004 	mov	r0, r4
102c8cd8:	e12fff33 	blx	r3
            bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr));
102c8cdc:	e59f313c 	ldr	r3, [pc, #316]	; 102c8e20 <OnURCHandler_BTPairCnf+0x218>
102c8ce0:	e28d0068 	add	r0, sp, #104	; 0x68
102c8ce4:	e12fff33 	blx	r3
102c8ce8:	e59f3134 	ldr	r3, [pc, #308]	; 102c8e24 <OnURCHandler_BTPairCnf+0x21c>
102c8cec:	e1a01000 	mov	r1, r0
102c8cf0:	e28d0068 	add	r0, sp, #104	; 0x68
102c8cf4:	e12fff33 	blx	r3
102c8cf8:	e58d002c 	str	r0, [sp, #44]	; 0x2c
            RIL_BT_QueryState(NULL);
102c8cfc:	e1a00005 	mov	r0, r5
102c8d00:	ebfffe94 	bl	102c8758 <RIL_BT_QueryState>
            callback_bt(MSG_BT_PAIR_CNF_IND, URC_BT_PAIR_CNF_SUCCESS, &bt_dev, NULL);
102c8d04:	e596c090 	ldr	ip, [r6, #144]	; 0x90
102c8d08:	e3a00003 	mov	r0, #3
102c8d0c:	e3a01006 	mov	r1, #6
102c8d10:	e28d202c 	add	r2, sp, #44	; 0x2c
102c8d14:	e1a03005 	mov	r3, r5
102c8d18:	e12fff3c 	blx	ip
    {
        Ql_sscanf(strURC, "%*[^:]: %d[^\r\n]", &err_code);
        callback_bt(MSG_BT_PAIR_CNF_IND, err_code, NULL, NULL);
        return;
    }
}
102c8d1c:	e28dd07c 	add	sp, sp, #124	; 0x7c
102c8d20:	e8bd85f0 	pop	{r4, r5, r6, r7, r8, sl, pc}
        }
        
        return;
    }

    Ql_strcpy(urcHead, "+CME ERROR:\0");
102c8d24:	e59f10fc 	ldr	r1, [pc, #252]	; 102c8e28 <OnURCHandler_BTPairCnf+0x220>
102c8d28:	e28d000c 	add	r0, sp, #12
102c8d2c:	e12fff38 	blx	r8
    if (Ql_StrPrefixMatch(strURC, urcHead))
102c8d30:	e1a00004 	mov	r0, r4
102c8d34:	e28d100c 	add	r1, sp, #12
102c8d38:	e12fff37 	blx	r7
102c8d3c:	e3500000 	cmp	r0, #0
102c8d40:	0afffff5 	beq	102c8d1c <OnURCHandler_BTPairCnf+0x114>
    {
        Ql_sscanf(strURC, "%*[^:]: %d[^\r\n]", &err_code);
102c8d44:	e59f30bc 	ldr	r3, [pc, #188]	; 102c8e08 <OnURCHandler_BTPairCnf+0x200>
102c8d48:	e1a0200d 	mov	r2, sp
102c8d4c:	e59f10d8 	ldr	r1, [pc, #216]	; 102c8e2c <OnURCHandler_BTPairCnf+0x224>
102c8d50:	e5933000 	ldr	r3, [r3]
102c8d54:	e1a00004 	mov	r0, r4
102c8d58:	e12fff33 	blx	r3
        callback_bt(MSG_BT_PAIR_CNF_IND, err_code, NULL, NULL);
102c8d5c:	e1a0200a 	mov	r2, sl
102c8d60:	e596c090 	ldr	ip, [r6, #144]	; 0x90
102c8d64:	e3a00003 	mov	r0, #3
102c8d68:	e59d1000 	ldr	r1, [sp]
102c8d6c:	e1a0300a 	mov	r3, sl
102c8d70:	e12fff3c 	blx	ip
102c8d74:	eaffffe8 	b	102c8d1c <OnURCHandler_BTPairCnf+0x114>
            Ql_sscanf(strURC, "%*[^\"]\"%*[^\"]\",%[^\r\n]\r\n",bt_dev.addr);
            bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr));
            RIL_BT_QueryState(NULL);
            callback_bt(MSG_BT_PAIR_CNF_IND, URC_BT_PAIR_CNF_SUCCESS, &bt_dev, NULL);
        }else{
            Ql_sscanf(strURC, "%*[^,],%[^\r\n]\r\n",bt_dev.addr);
102c8d78:	e28d2068 	add	r2, sp, #104	; 0x68
102c8d7c:	e59f10ac 	ldr	r1, [pc, #172]	; 102c8e30 <OnURCHandler_BTPairCnf+0x228>
102c8d80:	e5973000 	ldr	r3, [r7]
102c8d84:	e1a00004 	mov	r0, r4
102c8d88:	e12fff33 	blx	r3
            bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr));
102c8d8c:	e59f308c 	ldr	r3, [pc, #140]	; 102c8e20 <OnURCHandler_BTPairCnf+0x218>
102c8d90:	e28d0068 	add	r0, sp, #104	; 0x68
102c8d94:	e12fff33 	blx	r3
102c8d98:	e59f3084 	ldr	r3, [pc, #132]	; 102c8e24 <OnURCHandler_BTPairCnf+0x21c>
102c8d9c:	e1a01000 	mov	r1, r0
102c8da0:	e28d0068 	add	r0, sp, #104	; 0x68
102c8da4:	e12fff33 	blx	r3
102c8da8:	e2463004 	sub	r3, r6, #4
    }
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), NULL, NULL, 0);
}


void OnURCHandler_BTPairCnf(const char* strURC, void* reserved)
102c8dac:	e286c074 	add	ip, r6, #116	; 0x74
            bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr));
            RIL_BT_QueryState(NULL);
            callback_bt(MSG_BT_PAIR_CNF_IND, URC_BT_PAIR_CNF_SUCCESS, &bt_dev, NULL);
        }else{
            Ql_sscanf(strURC, "%*[^,],%[^\r\n]\r\n",bt_dev.addr);
            bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr));
102c8db0:	e58d002c 	str	r0, [sp, #44]	; 0x2c
102c8db4:	ea000001 	b	102c8dc0 <OnURCHandler_BTPairCnf+0x1b8>
//
// Update pair id
static void BT_DevMngmt_UpdatePairId(const u32 hdl, const s32 pairId)
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c8db8:	e153000c 	cmp	r3, ip
102c8dbc:	0a000005 	beq	102c8dd8 <OnURCHandler_BTPairCnf+0x1d0>
    {
        if (hdl == m_arrBTDev[i]->btDevice.devHdl)
102c8dc0:	e5b32004 	ldr	r2, [r3, #4]!
102c8dc4:	e5921000 	ldr	r1, [r2]
102c8dc8:	e1500001 	cmp	r0, r1
102c8dcc:	1afffff9 	bne	102c8db8 <OnURCHandler_BTPairCnf+0x1b0>
        {
            m_arrBTDev[i]->pairId= pairId;
102c8dd0:	e3e03000 	mvn	r3, #0
102c8dd4:	e5823050 	str	r3, [r2, #80]	; 0x50
            callback_bt(MSG_BT_PAIR_CNF_IND, URC_BT_PAIR_CNF_SUCCESS, &bt_dev, NULL);
        }else{
            Ql_sscanf(strURC, "%*[^,],%[^\r\n]\r\n",bt_dev.addr);
            bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr));
            BT_DevMngmt_UpdatePairId(bt_dev.devHdl,-1);
            callback_bt(MSG_BT_PAIR_CNF_IND, URC_BT_PAIR_CNF_FAIL, NULL, NULL);
102c8dd8:	e3a02000 	mov	r2, #0
102c8ddc:	e596c090 	ldr	ip, [r6, #144]	; 0x90
102c8de0:	e3a00003 	mov	r0, #3
102c8de4:	e3a01007 	mov	r1, #7
102c8de8:	e1a03002 	mov	r3, r2
102c8dec:	e12fff3c 	blx	ip
102c8df0:	eaffffc9 	b	102c8d1c <OnURCHandler_BTPairCnf+0x114>
102c8df4:	f03d2058 	.word	0xf03d2058
102c8df8:	102cd6b0 	.word	0x102cd6b0
102c8dfc:	102ce114 	.word	0x102ce114
102c8e00:	102cd438 	.word	0x102cd438
102c8e04:	102cbda0 	.word	0x102cbda0
102c8e08:	f03d31f0 	.word	0xf03d31f0
102c8e0c:	102cebb4 	.word	0x102cebb4
102c8e10:	102cebc8 	.word	0x102cebc8
102c8e14:	102cedc8 	.word	0x102cedc8
102c8e18:	102cebdc 	.word	0x102cebdc
102c8e1c:	102cede4 	.word	0x102cede4
102c8e20:	102cd560 	.word	0x102cd560
102c8e24:	102cc1ec 	.word	0x102cc1ec
102c8e28:	102ce0b4 	.word	0x102ce0b4
102c8e2c:	102cedfc 	.word	0x102cedfc
102c8e30:	102ced74 	.word	0x102ced74

102c8e34 <RIL_BT_Unpair>:
*                RIL_AT_BUSY,   sending AT.
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_Unpair(BT_DEV_HDL hdlDevice)
{
102c8e34:	e92d4070 	push	{r4, r5, r6, lr}
102c8e38:	e59f610c 	ldr	r6, [pc, #268]	; 102c8f4c <RIL_BT_Unpair+0x118>
102c8e3c:	e24dd020 	sub	sp, sp, #32
102c8e40:	e1a04000 	mov	r4, r0
*                RIL_AT_TIMEOUT,send AT timeout.
*                RIL_AT_BUSY,   sending AT.
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_Unpair(BT_DEV_HDL hdlDevice)
102c8e44:	e2865078 	add	r5, r6, #120	; 0x78
102c8e48:	e1a03006 	mov	r3, r6
102c8e4c:	ea000001 	b	102c8e58 <RIL_BT_Unpair+0x24>


s32 BT_DevMngmt_GetPairedId(const u32 hdl)
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c8e50:	e1530005 	cmp	r3, r5
102c8e54:	0a00003a 	beq	102c8f44 <RIL_BT_Unpair+0x110>
    {
        if (hdl == m_arrBTDev[i]->btDevice.devHdl)
102c8e58:	e5b32004 	ldr	r2, [r3, #4]!
102c8e5c:	e5921000 	ldr	r1, [r2]
102c8e60:	e1540001 	cmp	r4, r1
102c8e64:	1afffff9 	bne	102c8e50 <RIL_BT_Unpair+0x1c>
        {
            return m_arrBTDev[i]->pairId;
102c8e68:	e5922050 	ldr	r2, [r2, #80]	; 0x50
    s32  pairedId = -1 ;
    s32 ret = RIL_AT_SUCCESS ;
    
    pairedId = BT_DevMngmt_GetPairedId(hdlDevice);

    if(pairedId <=0 || pairedId >MAX_BT_PAIRED_CNT)
102c8e6c:	e2423001 	sub	r3, r2, #1
102c8e70:	e3530009 	cmp	r3, #9
102c8e74:	8a000032 	bhi	102c8f44 <RIL_BT_Unpair+0x110>
    {
        return RIL_AT_INVALID_PARAM;
    }
    
    Ql_sprintf(strAT, "AT+QBTUNPAIR=%d", pairedId);
102c8e78:	e59f30d0 	ldr	r3, [pc, #208]	; 102c8f50 <RIL_BT_Unpair+0x11c>
102c8e7c:	e59f10d0 	ldr	r1, [pc, #208]	; 102c8f54 <RIL_BT_Unpair+0x120>
102c8e80:	e5933000 	ldr	r3, [r3]
102c8e84:	e28d000c 	add	r0, sp, #12
102c8e88:	e12fff33 	blx	r3
    ret = Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), NULL, NULL, 0);
102c8e8c:	e59f30c4 	ldr	r3, [pc, #196]	; 102c8f58 <RIL_BT_Unpair+0x124>
102c8e90:	e28d000c 	add	r0, sp, #12
102c8e94:	e12fff33 	blx	r3
102c8e98:	e3a03000 	mov	r3, #0
102c8e9c:	e1a02003 	mov	r2, r3
102c8ea0:	e58d3000 	str	r3, [sp]
102c8ea4:	e59fc0b0 	ldr	ip, [pc, #176]	; 102c8f5c <RIL_BT_Unpair+0x128>
102c8ea8:	e1a01000 	mov	r1, r0
102c8eac:	e28d000c 	add	r0, sp, #12
102c8eb0:	e12fff3c 	blx	ip


    if(RIL_AT_SUCCESS == ret)
102c8eb4:	e3500000 	cmp	r0, #0
102c8eb8:	1a00001f 	bne	102c8f3c <RIL_BT_Unpair+0x108>
102c8ebc:	e59f3088 	ldr	r3, [pc, #136]	; 102c8f4c <RIL_BT_Unpair+0x118>
102c8ec0:	ea000001 	b	102c8ecc <RIL_BT_Unpair+0x98>
//
// Update pair id
static void BT_DevMngmt_UpdatePairId(const u32 hdl, const s32 pairId)
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c8ec4:	e1530005 	cmp	r3, r5
102c8ec8:	0a000005 	beq	102c8ee4 <RIL_BT_Unpair+0xb0>
    {
        if (hdl == m_arrBTDev[i]->btDevice.devHdl)
102c8ecc:	e5b32004 	ldr	r2, [r3, #4]!
102c8ed0:	e5921000 	ldr	r1, [r2]
102c8ed4:	e1540001 	cmp	r4, r1
102c8ed8:	1afffff9 	bne	102c8ec4 <RIL_BT_Unpair+0x90>
        {
            m_arrBTDev[i]->pairId= pairId;
102c8edc:	e3e03000 	mvn	r3, #0
102c8ee0:	e5823050 	str	r3, [r2, #80]	; 0x50
    
    Ql_sprintf(strAT, "AT+QBTUNPAIR=%d", pairedId);
    ret = Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), NULL, NULL, 0);


    if(RIL_AT_SUCCESS == ret)
102c8ee4:	e59f3060 	ldr	r3, [pc, #96]	; 102c8f4c <RIL_BT_Unpair+0x118>
102c8ee8:	ea000001 	b	102c8ef4 <RIL_BT_Unpair+0xc0>
//
// Update connect id
static void BT_DevMngmt_UpdateConnId(const u32 hdl, const s32 connId)
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c8eec:	e1530005 	cmp	r3, r5
102c8ef0:	0a00000b 	beq	102c8f24 <RIL_BT_Unpair+0xf0>
    {
        if (hdl == m_arrBTDev[i]->btDevice.devHdl)
102c8ef4:	e5b32004 	ldr	r2, [r3, #4]!
102c8ef8:	e5921000 	ldr	r1, [r2]
102c8efc:	e1540001 	cmp	r4, r1
102c8f00:	1afffff9 	bne	102c8eec <RIL_BT_Unpair+0xb8>
        {
            m_arrBTDev[i]->connId= connId;
102c8f04:	e3e03000 	mvn	r3, #0
102c8f08:	e5823054 	str	r3, [r2, #84]	; 0x54
static void BT_DevMngmt_UpdateProfileId(const u32 hdl, const s32 profileId)
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
    {
        if (hdl == m_arrBTDev[i]->btDevice.devHdl)
102c8f0c:	e5b63004 	ldr	r3, [r6, #4]!
102c8f10:	e5932000 	ldr	r2, [r3]
102c8f14:	e1540002 	cmp	r4, r2
102c8f18:	0a000005 	beq	102c8f34 <RIL_BT_Unpair+0x100>
}

static void BT_DevMngmt_UpdateProfileId(const u32 hdl, const s32 profileId)
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c8f1c:	e1560005 	cmp	r6, r5
102c8f20:	0a000005 	beq	102c8f3c <RIL_BT_Unpair+0x108>
    {
        if (hdl == m_arrBTDev[i]->btDevice.devHdl)
102c8f24:	e5b63004 	ldr	r3, [r6, #4]!
102c8f28:	e5932000 	ldr	r2, [r3]
102c8f2c:	e1540002 	cmp	r4, r2
102c8f30:	1afffff9 	bne	102c8f1c <RIL_BT_Unpair+0xe8>
        {
            m_arrBTDev[i]->profileId= profileId;
102c8f34:	e3e02000 	mvn	r2, #0
102c8f38:	e5832058 	str	r2, [r3, #88]	; 0x58
         BT_DevMngmt_UpdateConnId(hdlDevice,-1);
         BT_DevMngmt_UpdateProfileId(hdlDevice,-1);
    }

    return ret ;
}
102c8f3c:	e28dd020 	add	sp, sp, #32
102c8f40:	e8bd8070 	pop	{r4, r5, r6, pc}
    
    pairedId = BT_DevMngmt_GetPairedId(hdlDevice);

    if(pairedId <=0 || pairedId >MAX_BT_PAIRED_CNT)
    {
        return RIL_AT_INVALID_PARAM;
102c8f44:	e3e00003 	mvn	r0, #3
102c8f48:	eafffffb 	b	102c8f3c <RIL_BT_Unpair+0x108>
102c8f4c:	f03d2054 	.word	0xf03d2054
102c8f50:	f03d31e8 	.word	0xf03d31e8
102c8f54:	102cee0c 	.word	0x102cee0c
102c8f58:	102cd560 	.word	0x102cd560
102c8f5c:	102cd11c 	.word	0x102cd11c

102c8f60 <RIL_BT_GetSupportedProfile>:
*                RIL_AT_BUSY,   sending AT.
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_GetSupportedProfile(BT_DEV_HDL hdlDevice,s32 *profile_support,u8 len)
{
102c8f60:	e59f3104 	ldr	r3, [pc, #260]	; 102c906c <RIL_BT_GetSupportedProfile+0x10c>
102c8f64:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    char strAT[20];
    s32  pairedId = -1 ;
	s32 ret;
	s32 in_profile_get[BT_PROFILE_END] = {-1};
102c8f68:	e3a0c000 	mov	ip, #0
*                RIL_AT_BUSY,   sending AT.
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_GetSupportedProfile(BT_DEV_HDL hdlDevice,s32 *profile_support,u8 len)
{
102c8f6c:	e24dd038 	sub	sp, sp, #56	; 0x38
102c8f70:	e1a06002 	mov	r6, r2
    char strAT[20];
    s32  pairedId = -1 ;
	s32 ret;
	s32 in_profile_get[BT_PROFILE_END] = {-1};
102c8f74:	e3e02000 	mvn	r2, #0
*                RIL_AT_BUSY,   sending AT.
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_GetSupportedProfile(BT_DEV_HDL hdlDevice,s32 *profile_support,u8 len)
{
102c8f78:	e1a07001 	mov	r7, r1
*                RIL_AT_TIMEOUT,send AT timeout.
*                RIL_AT_BUSY,   sending AT.
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_GetSupportedProfile(BT_DEV_HDL hdlDevice,s32 *profile_support,u8 len)
102c8f7c:	e2835078 	add	r5, r3, #120	; 0x78
{
    char strAT[20];
    s32  pairedId = -1 ;
	s32 ret;
	s32 in_profile_get[BT_PROFILE_END] = {-1};
102c8f80:	e58dc020 	str	ip, [sp, #32]
102c8f84:	e58dc024 	str	ip, [sp, #36]	; 0x24
102c8f88:	e58dc028 	str	ip, [sp, #40]	; 0x28
102c8f8c:	e58dc02c 	str	ip, [sp, #44]	; 0x2c
102c8f90:	e58dc030 	str	ip, [sp, #48]	; 0x30
102c8f94:	e58dc034 	str	ip, [sp, #52]	; 0x34
102c8f98:	e58d201c 	str	r2, [sp, #28]
102c8f9c:	ea000001 	b	102c8fa8 <RIL_BT_GetSupportedProfile+0x48>


s32 BT_DevMngmt_GetPairedId(const u32 hdl)
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c8fa0:	e1530005 	cmp	r3, r5
102c8fa4:	0a00002e 	beq	102c9064 <RIL_BT_GetSupportedProfile+0x104>
    {
        if (hdl == m_arrBTDev[i]->btDevice.devHdl)
102c8fa8:	e5b3c004 	ldr	ip, [r3, #4]!
102c8fac:	e59c4000 	ldr	r4, [ip]
102c8fb0:	e1500004 	cmp	r0, r4
102c8fb4:	1afffff9 	bne	102c8fa0 <RIL_BT_GetSupportedProfile+0x40>
        {
            return m_arrBTDev[i]->pairId;
102c8fb8:	e59c5050 	ldr	r5, [ip, #80]	; 0x50
	s32 ret;
	s32 in_profile_get[BT_PROFILE_END] = {-1};
    
    pairedId = BT_DevMngmt_GetPairedId(hdlDevice);

    if(pairedId <= 0 || pairedId > MAX_BT_PAIRED_CNT || NULL == profile_support || len <= 0 )
102c8fbc:	e2453001 	sub	r3, r5, #1
102c8fc0:	e3530009 	cmp	r3, #9
102c8fc4:	8a000026 	bhi	102c9064 <RIL_BT_GetSupportedProfile+0x104>
102c8fc8:	e3570000 	cmp	r7, #0
102c8fcc:	13560000 	cmpne	r6, #0
102c8fd0:	13a04000 	movne	r4, #0
102c8fd4:	03a04001 	moveq	r4, #1
102c8fd8:	0a000021 	beq	102c9064 <RIL_BT_GetSupportedProfile+0x104>
    {
        return RIL_AT_INVALID_PARAM;
    }

	Ql_memset(profile_support,0,len*sizeof(profile_support[0]));
102c8fdc:	e1a08106 	lsl	r8, r6, #2
102c8fe0:	e1a01004 	mov	r1, r4
102c8fe4:	e1a02008 	mov	r2, r8
102c8fe8:	e59f3080 	ldr	r3, [pc, #128]	; 102c9070 <RIL_BT_GetSupportedProfile+0x110>
102c8fec:	e1a00007 	mov	r0, r7
102c8ff0:	e12fff33 	blx	r3
    
    Ql_sprintf(strAT, "AT+QBTGPROF=%d", pairedId);
102c8ff4:	e59f3078 	ldr	r3, [pc, #120]	; 102c9074 <RIL_BT_GetSupportedProfile+0x114>
102c8ff8:	e59f1078 	ldr	r1, [pc, #120]	; 102c9078 <RIL_BT_GetSupportedProfile+0x118>
102c8ffc:	e1a02005 	mov	r2, r5
102c9000:	e5933000 	ldr	r3, [r3]
102c9004:	e28d0008 	add	r0, sp, #8
102c9008:	e12fff33 	blx	r3
    ret =  Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), ATRsp_QBTGPROF_Hdlr, (void *)in_profile_get, 0);
102c900c:	e59f3068 	ldr	r3, [pc, #104]	; 102c907c <RIL_BT_GetSupportedProfile+0x11c>
102c9010:	e28d0008 	add	r0, sp, #8
102c9014:	e12fff33 	blx	r3
102c9018:	e58d4000 	str	r4, [sp]
102c901c:	e59f205c 	ldr	r2, [pc, #92]	; 102c9080 <RIL_BT_GetSupportedProfile+0x120>
102c9020:	e28d301c 	add	r3, sp, #28
102c9024:	e59fc058 	ldr	ip, [pc, #88]	; 102c9084 <RIL_BT_GetSupportedProfile+0x124>
102c9028:	e1a01000 	mov	r1, r0
102c902c:	e28d0008 	add	r0, sp, #8
102c9030:	e12fff3c 	blx	ip

	if(RIL_AT_SUCCESS == ret)
102c9034:	e2504000 	subs	r4, r0, #0
102c9038:	1a000006 	bne	102c9058 <RIL_BT_GetSupportedProfile+0xf8>
	{
	   if(len < BT_PROFILE_END)
102c903c:	e3560006 	cmp	r6, #6
	   {
	      Ql_memcpy(profile_support,in_profile_get,len*sizeof(in_profile_get[0]));
102c9040:	e1a00007 	mov	r0, r7
102c9044:	e28d101c 	add	r1, sp, #28
102c9048:	91a02008 	movls	r2, r8
	   }
	   else
	   {
	      Ql_memcpy(profile_support,in_profile_get,BT_PROFILE_END*sizeof(in_profile_get[0]));
102c904c:	83a0201c 	movhi	r2, #28
102c9050:	e59f3030 	ldr	r3, [pc, #48]	; 102c9088 <RIL_BT_GetSupportedProfile+0x128>
102c9054:	e12fff33 	blx	r3
	   }
	}
	return ret;
}
102c9058:	e1a00004 	mov	r0, r4
102c905c:	e28dd038 	add	sp, sp, #56	; 0x38
102c9060:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    
    pairedId = BT_DevMngmt_GetPairedId(hdlDevice);

    if(pairedId <= 0 || pairedId > MAX_BT_PAIRED_CNT || NULL == profile_support || len <= 0 )
    {
        return RIL_AT_INVALID_PARAM;
102c9064:	e3e04003 	mvn	r4, #3
102c9068:	eafffffa 	b	102c9058 <RIL_BT_GetSupportedProfile+0xf8>
102c906c:	f03d2054 	.word	0xf03d2054
102c9070:	102cd6b0 	.word	0x102cd6b0
102c9074:	f03d31e8 	.word	0xf03d31e8
102c9078:	102cee1c 	.word	0x102cee1c
102c907c:	102cd560 	.word	0x102cd560
102c9080:	102c77f0 	.word	0x102c77f0
102c9084:	102cd11c 	.word	0x102cd11c
102c9088:	102cd738 	.word	0x102cd738

102c908c <RIL_BT_ConnReq>:
s32 RIL_BT_ConnReq(BT_DEV_HDL hdlDevice, u8 profileId, u8 mode)
{
    char strAT[20];
    s32 pairedId;
    
    if (profileId < BT_PROFILE_SPP || profileId >= BT_PROFILE_END)
102c908c:	e3510006 	cmp	r1, #6
*                RIL_AT_BUSY,   sending AT.
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_ConnReq(BT_DEV_HDL hdlDevice, u8 profileId, u8 mode)
{
102c9090:	e92d40f0 	push	{r4, r5, r6, r7, lr}
102c9094:	e1a03001 	mov	r3, r1
102c9098:	e24dd024 	sub	sp, sp, #36	; 0x24
102c909c:	e1a07002 	mov	r7, r2
    char strAT[20];
    s32 pairedId;
    
    if (profileId < BT_PROFILE_SPP || profileId >= BT_PROFILE_END)
102c90a0:	8a000020 	bhi	102c9128 <RIL_BT_ConnReq+0x9c>
    {
        return RIL_AT_INVALID_PARAM;
    }

    if(mode < BT_SPP_CONN_MODE_AT || mode > BT_SPP_CONN_MODE_TRANS)
102c90a4:	e3520002 	cmp	r2, #2
102c90a8:	8a00001e 	bhi	102c9128 <RIL_BT_ConnReq+0x9c>
102c90ac:	e59fc07c 	ldr	ip, [pc, #124]	; 102c9130 <RIL_BT_ConnReq+0xa4>
*                RIL_AT_TIMEOUT,send AT timeout.
*                RIL_AT_BUSY,   sending AT.
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_ConnReq(BT_DEV_HDL hdlDevice, u8 profileId, u8 mode)
102c90b0:	e28c6078 	add	r6, ip, #120	; 0x78
102c90b4:	ea000001 	b	102c90c0 <RIL_BT_ConnReq+0x34>


s32 BT_DevMngmt_GetPairedId(const u32 hdl)
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c90b8:	e15c0006 	cmp	ip, r6
102c90bc:	0a000019 	beq	102c9128 <RIL_BT_ConnReq+0x9c>
    {
        if (hdl == m_arrBTDev[i]->btDevice.devHdl)
102c90c0:	e5bc4004 	ldr	r4, [ip, #4]!
102c90c4:	e5945000 	ldr	r5, [r4]
102c90c8:	e1500005 	cmp	r0, r5
102c90cc:	1afffff9 	bne	102c90b8 <RIL_BT_ConnReq+0x2c>
        {
            return m_arrBTDev[i]->pairId;
102c90d0:	e5942050 	ldr	r2, [r4, #80]	; 0x50
        return RIL_AT_INVALID_PARAM;
    }
    
    pairedId = BT_DevMngmt_GetPairedId(hdlDevice);

    if(pairedId <= 0 || pairedId > MAX_BT_PAIRED_CNT)
102c90d4:	e2421001 	sub	r1, r2, #1
102c90d8:	e3510009 	cmp	r1, #9
102c90dc:	8a000011 	bhi	102c9128 <RIL_BT_ConnReq+0x9c>
    {
        return RIL_AT_INVALID_PARAM;
    }

    Ql_sprintf(strAT, "AT+QBTCONN=%d,%d,%d", pairedId, profileId, mode);
102c90e0:	e59f004c 	ldr	r0, [pc, #76]	; 102c9134 <RIL_BT_ConnReq+0xa8>
102c90e4:	e59f104c 	ldr	r1, [pc, #76]	; 102c9138 <RIL_BT_ConnReq+0xac>
102c90e8:	e58d7000 	str	r7, [sp]
102c90ec:	e590c000 	ldr	ip, [r0]
102c90f0:	e28d000c 	add	r0, sp, #12
102c90f4:	e12fff3c 	blx	ip
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), NULL, NULL, 0);
102c90f8:	e59f303c 	ldr	r3, [pc, #60]	; 102c913c <RIL_BT_ConnReq+0xb0>
102c90fc:	e28d000c 	add	r0, sp, #12
102c9100:	e12fff33 	blx	r3
102c9104:	e3a03000 	mov	r3, #0
102c9108:	e1a02003 	mov	r2, r3
102c910c:	e58d3000 	str	r3, [sp]
102c9110:	e59fc028 	ldr	ip, [pc, #40]	; 102c9140 <RIL_BT_ConnReq+0xb4>
102c9114:	e1a01000 	mov	r1, r0
102c9118:	e28d000c 	add	r0, sp, #12
102c911c:	e12fff3c 	blx	ip
    
}
102c9120:	e28dd024 	add	sp, sp, #36	; 0x24
102c9124:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    char strAT[20];
    s32 pairedId;
    
    if (profileId < BT_PROFILE_SPP || profileId >= BT_PROFILE_END)
    {
        return RIL_AT_INVALID_PARAM;
102c9128:	e3e00003 	mvn	r0, #3
102c912c:	eafffffb 	b	102c9120 <RIL_BT_ConnReq+0x94>
102c9130:	f03d2054 	.word	0xf03d2054
102c9134:	f03d31e8 	.word	0xf03d31e8
102c9138:	102cee2c 	.word	0x102cee2c
102c913c:	102cd560 	.word	0x102cd560
102c9140:	102cd11c 	.word	0x102cd11c

102c9144 <OnURCHandler_BTConn>:
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), NULL, NULL, 0);
    
}

void OnURCHandler_BTConn(const char* strURC, void* reserved)
{
102c9144:	e92d45f0 	push	{r4, r5, r6, r7, r8, sl, lr}
    s32 err_code = 0;
102c9148:	e3a04000 	mov	r4, #0
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), NULL, NULL, 0);
    
}

void OnURCHandler_BTConn(const char* strURC, void* reserved)
{
102c914c:	e24dd0a4 	sub	sp, sp, #164	; 0xa4
    char urcHead[30];
    ST_BT_BasicInfo bt_dev;
    
    Ql_memset(&bt_dev,  0x0, sizeof(ST_BT_BasicInfo));

	if(callback_bt == NULL)
102c9150:	e59f6228 	ldr	r6, [pc, #552]	; 102c9380 <OnURCHandler_BTConn+0x23c>
    s32  connId;
    char profile_name[40] = {0};
    char urcHead[30];
    ST_BT_BasicInfo bt_dev;
    
    Ql_memset(&bt_dev,  0x0, sizeof(ST_BT_BasicInfo));
102c9154:	e59f3228 	ldr	r3, [pc, #552]	; 102c9384 <OnURCHandler_BTConn+0x240>
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), NULL, NULL, 0);
    
}

void OnURCHandler_BTConn(const char* strURC, void* reserved)
{
102c9158:	e1a05000 	mov	r5, r0
    s32  connId;
    char profile_name[40] = {0};
    char urcHead[30];
    ST_BT_BasicInfo bt_dev;
    
    Ql_memset(&bt_dev,  0x0, sizeof(ST_BT_BasicInfo));
102c915c:	e1a01004 	mov	r1, r4
102c9160:	e28d0054 	add	r0, sp, #84	; 0x54
102c9164:	e3a0204c 	mov	r2, #76	; 0x4c
    
}

void OnURCHandler_BTConn(const char* strURC, void* reserved)
{
    s32 err_code = 0;
102c9168:	e58d4004 	str	r4, [sp, #4]
    s32  connId;
    char profile_name[40] = {0};
102c916c:	e58d402c 	str	r4, [sp, #44]	; 0x2c
102c9170:	e58d4030 	str	r4, [sp, #48]	; 0x30
102c9174:	e58d4034 	str	r4, [sp, #52]	; 0x34
102c9178:	e58d4038 	str	r4, [sp, #56]	; 0x38
102c917c:	e58d403c 	str	r4, [sp, #60]	; 0x3c
102c9180:	e58d4040 	str	r4, [sp, #64]	; 0x40
102c9184:	e58d4044 	str	r4, [sp, #68]	; 0x44
102c9188:	e58d4048 	str	r4, [sp, #72]	; 0x48
102c918c:	e58d404c 	str	r4, [sp, #76]	; 0x4c
102c9190:	e58d4050 	str	r4, [sp, #80]	; 0x50
    char urcHead[30];
    ST_BT_BasicInfo bt_dev;
    
    Ql_memset(&bt_dev,  0x0, sizeof(ST_BT_BasicInfo));
102c9194:	e12fff33 	blx	r3

	if(callback_bt == NULL)
102c9198:	e5963090 	ldr	r3, [r6, #144]	; 0x90
102c919c:	e1530004 	cmp	r3, r4
102c91a0:	0a000036 	beq	102c9280 <OnURCHandler_BTConn+0x13c>

    
    //+QBTCONN:1,1,H60-L01,F4E3FBE47920,SPP
    //+QBTDISC:F4E3FBE47920,SPP
    //+QBTCONN:0
    Ql_strcpy(urcHead, "\r\n+QBTCONN:\0");
102c91a4:	e59f11dc 	ldr	r1, [pc, #476]	; 102c9388 <OnURCHandler_BTConn+0x244>
102c91a8:	e28d000c 	add	r0, sp, #12
102c91ac:	e59f81d8 	ldr	r8, [pc, #472]	; 102c938c <OnURCHandler_BTConn+0x248>
102c91b0:	e12fff38 	blx	r8
    if (Ql_StrPrefixMatch(strURC, urcHead))
102c91b4:	e59f71d4 	ldr	r7, [pc, #468]	; 102c9390 <OnURCHandler_BTConn+0x24c>
102c91b8:	e1a00005 	mov	r0, r5
102c91bc:	e28d100c 	add	r1, sp, #12
102c91c0:	e12fff37 	blx	r7
102c91c4:	e250a000 	subs	sl, r0, #0
102c91c8:	0a00002e 	beq	102c9288 <OnURCHandler_BTConn+0x144>
    {
        Ql_sscanf(strURC, "%*[^:]: %d%*[^\r\n]\r\n", &err_code);
102c91cc:	e59f71c0 	ldr	r7, [pc, #448]	; 102c9394 <OnURCHandler_BTConn+0x250>
102c91d0:	e1a00005 	mov	r0, r5
102c91d4:	e5973000 	ldr	r3, [r7]
102c91d8:	e59f11b8 	ldr	r1, [pc, #440]	; 102c9398 <OnURCHandler_BTConn+0x254>
102c91dc:	e28d2004 	add	r2, sp, #4
102c91e0:	e12fff33 	blx	r3
        if (err_code > 0)
102c91e4:	e59d3004 	ldr	r3, [sp, #4]
102c91e8:	e1530004 	cmp	r3, r4
102c91ec:	da00003a 	ble	102c92dc <OnURCHandler_BTConn+0x198>
        {  
            //+QBTCONN:1,1,H30-T00,786A89ECCEC7,HF_PROFILE
            Ql_sscanf(strURC, "%*[^,],%d%*[^\r\n]\r\n",&connId);
102c91f0:	e28d2008 	add	r2, sp, #8
102c91f4:	e5973000 	ldr	r3, [r7]
102c91f8:	e59f119c 	ldr	r1, [pc, #412]	; 102c939c <OnURCHandler_BTConn+0x258>
102c91fc:	e1a00005 	mov	r0, r5
102c9200:	e12fff33 	blx	r3
            Ql_sscanf(strURC, "%*[^\"]\"%[^\"]%*[^\r\n]\r\n",bt_dev.name);
102c9204:	e28d2058 	add	r2, sp, #88	; 0x58
102c9208:	e5973000 	ldr	r3, [r7]
102c920c:	e59f118c 	ldr	r1, [pc, #396]	; 102c93a0 <OnURCHandler_BTConn+0x25c>
102c9210:	e1a00005 	mov	r0, r5
102c9214:	e12fff33 	blx	r3
            Ql_sscanf(strURC, "%*[^,],%*[^,],%*[^,],%[^,]%*[^\r\n]\r\n",bt_dev.addr);
102c9218:	e28d2090 	add	r2, sp, #144	; 0x90
102c921c:	e5973000 	ldr	r3, [r7]
102c9220:	e59f117c 	ldr	r1, [pc, #380]	; 102c93a4 <OnURCHandler_BTConn+0x260>
102c9224:	e1a00005 	mov	r0, r5
102c9228:	e12fff33 	blx	r3
            Ql_sscanf(strURC, "%*[^,],%*[^,],%*[^,],%*[^,],\"%[^\"]%*[^\r\n]\r\n",profile_name);
102c922c:	e28d202c 	add	r2, sp, #44	; 0x2c
102c9230:	e59f1170 	ldr	r1, [pc, #368]	; 102c93a8 <OnURCHandler_BTConn+0x264>
102c9234:	e5973000 	ldr	r3, [r7]
102c9238:	e1a00005 	mov	r0, r5
102c923c:	e12fff33 	blx	r3
            bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr));
102c9240:	e59f3164 	ldr	r3, [pc, #356]	; 102c93ac <OnURCHandler_BTConn+0x268>
102c9244:	e28d0090 	add	r0, sp, #144	; 0x90
102c9248:	e12fff33 	blx	r3
102c924c:	e59f315c 	ldr	r3, [pc, #348]	; 102c93b0 <OnURCHandler_BTConn+0x26c>
102c9250:	e1a01000 	mov	r1, r0
102c9254:	e28d0090 	add	r0, sp, #144	; 0x90
102c9258:	e12fff33 	blx	r3
102c925c:	e58d0054 	str	r0, [sp, #84]	; 0x54
            RIL_BT_QueryState(NULL);
102c9260:	e1a00004 	mov	r0, r4
102c9264:	ebfffd3b 	bl	102c8758 <RIL_BT_QueryState>
            callback_bt(MSG_BT_SPP_CONN_IND, URC_BT_CONN_SUCCESS, &bt_dev, NULL);
102c9268:	e3a00008 	mov	r0, #8
102c926c:	e596c090 	ldr	ip, [r6, #144]	; 0x90
102c9270:	e1a01000 	mov	r1, r0
102c9274:	e28d2054 	add	r2, sp, #84	; 0x54
102c9278:	e1a03004 	mov	r3, r4
102c927c:	e12fff3c 	blx	ip
    {
        Ql_sscanf(strURC, "%*[^:]: %d\r\n", err_code);
        callback_bt(MSG_BT_SPP_CONN_IND, err_code, NULL, NULL);
        return;
    }
}
102c9280:	e28dd0a4 	add	sp, sp, #164	; 0xa4
102c9284:	e8bd85f0 	pop	{r4, r5, r6, r7, r8, sl, pc}
            callback_bt(MSG_BT_SPP_CONN_IND, URC_BT_CONN_FAIL, NULL, NULL);
        }
        return;
    }

    Ql_strcpy(urcHead, "+CME ERROR:\0");
102c9288:	e59f1124 	ldr	r1, [pc, #292]	; 102c93b4 <OnURCHandler_BTConn+0x270>
102c928c:	e28d000c 	add	r0, sp, #12
102c9290:	e12fff38 	blx	r8
    if (Ql_StrPrefixMatch(strURC, urcHead))
102c9294:	e1a00005 	mov	r0, r5
102c9298:	e28d100c 	add	r1, sp, #12
102c929c:	e12fff37 	blx	r7
102c92a0:	e3500000 	cmp	r0, #0
102c92a4:	0afffff5 	beq	102c9280 <OnURCHandler_BTConn+0x13c>
    {
        Ql_sscanf(strURC, "%*[^:]: %d\r\n", err_code);
102c92a8:	e59f30e4 	ldr	r3, [pc, #228]	; 102c9394 <OnURCHandler_BTConn+0x250>
102c92ac:	e59d2004 	ldr	r2, [sp, #4]
102c92b0:	e59f1100 	ldr	r1, [pc, #256]	; 102c93b8 <OnURCHandler_BTConn+0x274>
102c92b4:	e5933000 	ldr	r3, [r3]
102c92b8:	e1a00005 	mov	r0, r5
102c92bc:	e12fff33 	blx	r3
        callback_bt(MSG_BT_SPP_CONN_IND, err_code, NULL, NULL);
102c92c0:	e1a0200a 	mov	r2, sl
102c92c4:	e596c090 	ldr	ip, [r6, #144]	; 0x90
102c92c8:	e3a00008 	mov	r0, #8
102c92cc:	e59d1004 	ldr	r1, [sp, #4]
102c92d0:	e1a0300a 	mov	r3, sl
102c92d4:	e12fff3c 	blx	ip
102c92d8:	eaffffe8 	b	102c9280 <OnURCHandler_BTConn+0x13c>
            Ql_sscanf(strURC, "%*[^,],%*[^,],%*[^,],%*[^,],\"%[^\"]%*[^\r\n]\r\n",profile_name);
            bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr));
            RIL_BT_QueryState(NULL);
            callback_bt(MSG_BT_SPP_CONN_IND, URC_BT_CONN_SUCCESS, &bt_dev, NULL);
        }else{
            Ql_sscanf(strURC, "%*[^,],%*[^,],%*[^,],%[^,]%*[^\r\n]\r\n",bt_dev.addr);
102c92dc:	e28d2090 	add	r2, sp, #144	; 0x90
102c92e0:	e59f10bc 	ldr	r1, [pc, #188]	; 102c93a4 <OnURCHandler_BTConn+0x260>
102c92e4:	e5973000 	ldr	r3, [r7]
102c92e8:	e1a00005 	mov	r0, r5
102c92ec:	e12fff33 	blx	r3
            bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr));
102c92f0:	e59f30b4 	ldr	r3, [pc, #180]	; 102c93ac <OnURCHandler_BTConn+0x268>
102c92f4:	e28d0090 	add	r0, sp, #144	; 0x90
102c92f8:	e12fff33 	blx	r3
102c92fc:	e59f30ac 	ldr	r3, [pc, #172]	; 102c93b0 <OnURCHandler_BTConn+0x26c>
102c9300:	e1a01000 	mov	r1, r0
102c9304:	e28d0090 	add	r0, sp, #144	; 0x90
102c9308:	e12fff33 	blx	r3
102c930c:	e2463004 	sub	r3, r6, #4
    Ql_sprintf(strAT, "AT+QBTCONN=%d,%d,%d", pairedId, profileId, mode);
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), NULL, NULL, 0);
    
}

void OnURCHandler_BTConn(const char* strURC, void* reserved)
102c9310:	e286e074 	add	lr, r6, #116	; 0x74
102c9314:	e1a02003 	mov	r2, r3
            bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr));
            RIL_BT_QueryState(NULL);
            callback_bt(MSG_BT_SPP_CONN_IND, URC_BT_CONN_SUCCESS, &bt_dev, NULL);
        }else{
            Ql_sscanf(strURC, "%*[^,],%*[^,],%*[^,],%[^,]%*[^\r\n]\r\n",bt_dev.addr);
            bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr));
102c9318:	e58d0054 	str	r0, [sp, #84]	; 0x54
102c931c:	ea000001 	b	102c9328 <OnURCHandler_BTConn+0x1e4>
//
// Update connect id
static void BT_DevMngmt_UpdateConnId(const u32 hdl, const s32 connId)
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c9320:	e152000e 	cmp	r2, lr
102c9324:	0a000008 	beq	102c934c <OnURCHandler_BTConn+0x208>
    {
        if (hdl == m_arrBTDev[i]->btDevice.devHdl)
102c9328:	e5b21004 	ldr	r1, [r2, #4]!
102c932c:	e591c000 	ldr	ip, [r1]
102c9330:	e150000c 	cmp	r0, ip
102c9334:	1afffff9 	bne	102c9320 <OnURCHandler_BTConn+0x1dc>
        {
            m_arrBTDev[i]->connId= connId;
102c9338:	e3e02000 	mvn	r2, #0
102c933c:	e5812054 	str	r2, [r1, #84]	; 0x54
102c9340:	ea000001 	b	102c934c <OnURCHandler_BTConn+0x208>
}

static void BT_DevMngmt_UpdateProfileId(const u32 hdl, const s32 profileId)
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c9344:	e153000e 	cmp	r3, lr
102c9348:	0a000005 	beq	102c9364 <OnURCHandler_BTConn+0x220>
    {
        if (hdl == m_arrBTDev[i]->btDevice.devHdl)
102c934c:	e5b32004 	ldr	r2, [r3, #4]!
102c9350:	e5921000 	ldr	r1, [r2]
102c9354:	e1500001 	cmp	r0, r1
102c9358:	1afffff9 	bne	102c9344 <OnURCHandler_BTConn+0x200>
        {
            m_arrBTDev[i]->profileId= profileId;
102c935c:	e3e03000 	mvn	r3, #0
102c9360:	e5823058 	str	r3, [r2, #88]	; 0x58
        }else{
            Ql_sscanf(strURC, "%*[^,],%*[^,],%*[^,],%[^,]%*[^\r\n]\r\n",bt_dev.addr);
            bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr));
            BT_DevMngmt_UpdateConnId(bt_dev.devHdl, -1);
            BT_DevMngmt_UpdateProfileId(bt_dev.devHdl,-1);
            callback_bt(MSG_BT_SPP_CONN_IND, URC_BT_CONN_FAIL, NULL, NULL);
102c9364:	e3a02000 	mov	r2, #0
102c9368:	e596c090 	ldr	ip, [r6, #144]	; 0x90
102c936c:	e3a00008 	mov	r0, #8
102c9370:	e3a01009 	mov	r1, #9
102c9374:	e1a03002 	mov	r3, r2
102c9378:	e12fff3c 	blx	ip
102c937c:	eaffffbf 	b	102c9280 <OnURCHandler_BTConn+0x13c>
102c9380:	f03d2058 	.word	0xf03d2058
102c9384:	102cd6b0 	.word	0x102cd6b0
102c9388:	102ce124 	.word	0x102ce124
102c938c:	102cd438 	.word	0x102cd438
102c9390:	102cbda0 	.word	0x102cbda0
102c9394:	f03d31f0 	.word	0xf03d31f0
102c9398:	102cebb4 	.word	0x102cebb4
102c939c:	102cebc8 	.word	0x102cebc8
102c93a0:	102cebdc 	.word	0x102cebdc
102c93a4:	102cee40 	.word	0x102cee40
102c93a8:	102cee64 	.word	0x102cee64
102c93ac:	102cd560 	.word	0x102cd560
102c93b0:	102cc1ec 	.word	0x102cc1ec
102c93b4:	102ce0b4 	.word	0x102ce0b4
102c93b8:	102ceb88 	.word	0x102ceb88

102c93bc <RIL_BT_SPP_DirectConn>:
s32 RIL_BT_SPP_DirectConn(char* btMacAddr, u8 mode, char* pinCode)
{

    char strAT[20];

    if(NULL == btMacAddr)
102c93bc:	e3500000 	cmp	r0, #0
*                RIL_AT_BUSY,   sending AT.
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_SPP_DirectConn(char* btMacAddr, u8 mode, char* pinCode)
{
102c93c0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
102c93c4:	e1a03001 	mov	r3, r1
102c93c8:	e24dd024 	sub	sp, sp, #36	; 0x24
102c93cc:	e1a0c002 	mov	ip, r2

    char strAT[20];

    if(NULL == btMacAddr)
102c93d0:	0a000014 	beq	102c9428 <RIL_BT_SPP_DirectConn+0x6c>
    {
        return RIL_AT_INVALID_PARAM;
    }
    
    if(mode < BT_SPP_CONN_MODE_AT || mode > BT_SPP_CONN_MODE_TRANS)
102c93d4:	e3510002 	cmp	r1, #2
102c93d8:	8a000012 	bhi	102c9428 <RIL_BT_SPP_DirectConn+0x6c>
    {
        return RIL_AT_INVALID_PARAM;
    }
    
    Ql_sprintf(strAT, "AT+QBTCONND=%s,%d,\"%s\"", btMacAddr, mode, pinCode);
102c93dc:	e1a02000 	mov	r2, r0
102c93e0:	e59f0048 	ldr	r0, [pc, #72]	; 102c9430 <RIL_BT_SPP_DirectConn+0x74>
102c93e4:	e59f1048 	ldr	r1, [pc, #72]	; 102c9434 <RIL_BT_SPP_DirectConn+0x78>
102c93e8:	e58dc000 	str	ip, [sp]
102c93ec:	e590c000 	ldr	ip, [r0]
102c93f0:	e28d000c 	add	r0, sp, #12
102c93f4:	e12fff3c 	blx	ip
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), AtRsp_QBTCONND_Hdlr, NULL, 0);
102c93f8:	e59f3038 	ldr	r3, [pc, #56]	; 102c9438 <RIL_BT_SPP_DirectConn+0x7c>
102c93fc:	e28d000c 	add	r0, sp, #12
102c9400:	e12fff33 	blx	r3
102c9404:	e3a03000 	mov	r3, #0
102c9408:	e58d3000 	str	r3, [sp]
102c940c:	e59f2028 	ldr	r2, [pc, #40]	; 102c943c <RIL_BT_SPP_DirectConn+0x80>
102c9410:	e59fc028 	ldr	ip, [pc, #40]	; 102c9440 <RIL_BT_SPP_DirectConn+0x84>
102c9414:	e1a01000 	mov	r1, r0
102c9418:	e28d000c 	add	r0, sp, #12
102c941c:	e12fff3c 	blx	ip
}
102c9420:	e28dd024 	add	sp, sp, #36	; 0x24
102c9424:	e8bd8000 	ldmfd	sp!, {pc}

    char strAT[20];

    if(NULL == btMacAddr)
    {
        return RIL_AT_INVALID_PARAM;
102c9428:	e3e00003 	mvn	r0, #3
102c942c:	eafffffb 	b	102c9420 <RIL_BT_SPP_DirectConn+0x64>
102c9430:	f03d31e8 	.word	0xf03d31e8
102c9434:	102cee90 	.word	0x102cee90
102c9438:	102cd560 	.word	0x102cd560
102c943c:	102c7168 	.word	0x102c7168
102c9440:	102cd11c 	.word	0x102cd11c

102c9444 <RIL_BT_ConnAccept>:
*****************************************************************/
s32 RIL_BT_ConnAccept(bool accept , u8 mode)
{
    char strAT[20];

    if(accept != 0 && accept != 1)
102c9444:	e3500001 	cmp	r0, #1
*                RIL_AT_BUSY,   sending AT.
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_ConnAccept(bool accept , u8 mode)
{
102c9448:	e92d4010 	push	{r4, lr}
102c944c:	e1a02001 	mov	r2, r1
102c9450:	e24dd020 	sub	sp, sp, #32
    char strAT[20];

    if(accept != 0 && accept != 1)
102c9454:	8a000015 	bhi	102c94b0 <RIL_BT_ConnAccept+0x6c>
    {
        return RIL_AT_INVALID_PARAM;
    }

    if(mode < BT_SPP_CONN_MODE_AT || mode > BT_SPP_CONN_MODE_TRANS)
102c9458:	e3510002 	cmp	r1, #2
102c945c:	8a000013 	bhi	102c94b0 <RIL_BT_ConnAccept+0x6c>
        return RIL_AT_INVALID_PARAM;
    }
    
    if(1 == accept)
    {
        Ql_sprintf(strAT, "AT+QBTACPT=1,%d", mode);
102c9460:	e59f3050 	ldr	r3, [pc, #80]	; 102c94b8 <RIL_BT_ConnAccept+0x74>
    if(mode < BT_SPP_CONN_MODE_AT || mode > BT_SPP_CONN_MODE_TRANS)
    {
        return RIL_AT_INVALID_PARAM;
    }
    
    if(1 == accept)
102c9464:	e3500001 	cmp	r0, #1
    {
        Ql_sprintf(strAT, "AT+QBTACPT=1,%d", mode);
102c9468:	e28d400c 	add	r4, sp, #12
102c946c:	059f1048 	ldreq	r1, [pc, #72]	; 102c94bc <RIL_BT_ConnAccept+0x78>
    }
    else
    {
        Ql_sprintf(strAT, "AT+QBTACPT=0", mode);
102c9470:	159f1048 	ldrne	r1, [pc, #72]	; 102c94c0 <RIL_BT_ConnAccept+0x7c>
        return RIL_AT_INVALID_PARAM;
    }
    
    if(1 == accept)
    {
        Ql_sprintf(strAT, "AT+QBTACPT=1,%d", mode);
102c9474:	e5933000 	ldr	r3, [r3]
102c9478:	e1a00004 	mov	r0, r4
    }
    else
    {
        Ql_sprintf(strAT, "AT+QBTACPT=0", mode);
102c947c:	e12fff33 	blx	r3
    }
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), NULL, NULL, 0);
102c9480:	e59f303c 	ldr	r3, [pc, #60]	; 102c94c4 <RIL_BT_ConnAccept+0x80>
102c9484:	e1a00004 	mov	r0, r4
102c9488:	e12fff33 	blx	r3
102c948c:	e3a03000 	mov	r3, #0
102c9490:	e1a02003 	mov	r2, r3
102c9494:	e58d3000 	str	r3, [sp]
102c9498:	e59fc028 	ldr	ip, [pc, #40]	; 102c94c8 <RIL_BT_ConnAccept+0x84>
102c949c:	e1a01000 	mov	r1, r0
102c94a0:	e1a00004 	mov	r0, r4
102c94a4:	e12fff3c 	blx	ip
}
102c94a8:	e28dd020 	add	sp, sp, #32
102c94ac:	e8bd8010 	pop	{r4, pc}
{
    char strAT[20];

    if(accept != 0 && accept != 1)
    {
        return RIL_AT_INVALID_PARAM;
102c94b0:	e3e00003 	mvn	r0, #3
102c94b4:	eafffffb 	b	102c94a8 <RIL_BT_ConnAccept+0x64>
102c94b8:	f03d31e8 	.word	0xf03d31e8
102c94bc:	102ceea8 	.word	0x102ceea8
102c94c0:	102ceeb8 	.word	0x102ceeb8
102c94c4:	102cd560 	.word	0x102cd560
102c94c8:	102cd11c 	.word	0x102cd11c

102c94cc <OnURCHandler_BTConnCnf>:
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), NULL, NULL, 0);
}


void OnURCHandler_BTConnCnf(const char* strURC, void* reserved)
{
102c94cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    s32 err_code = 0;
102c94d0:	e3a04000 	mov	r4, #0
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), NULL, NULL, 0);
}


void OnURCHandler_BTConnCnf(const char* strURC, void* reserved)
{
102c94d4:	e24dd0a0 	sub	sp, sp, #160	; 0xa0
    //s32 profileId;
    ST_BT_BasicInfo bt_dev;
    
    Ql_memset(&bt_dev,  0x0, sizeof(ST_BT_BasicInfo));

	if(callback_bt == NULL)
102c94d8:	e59f52dc 	ldr	r5, [pc, #732]	; 102c97bc <OnURCHandler_BTConnCnf+0x2f0>
    char urcHead[30];
    char profile_name[40] = {0};
    //s32 profileId;
    ST_BT_BasicInfo bt_dev;
    
    Ql_memset(&bt_dev,  0x0, sizeof(ST_BT_BasicInfo));
102c94dc:	e59f32dc 	ldr	r3, [pc, #732]	; 102c97c0 <OnURCHandler_BTConnCnf+0x2f4>
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), NULL, NULL, 0);
}


void OnURCHandler_BTConnCnf(const char* strURC, void* reserved)
{
102c94e0:	e1a06000 	mov	r6, r0
    char urcHead[30];
    char profile_name[40] = {0};
    //s32 profileId;
    ST_BT_BasicInfo bt_dev;
    
    Ql_memset(&bt_dev,  0x0, sizeof(ST_BT_BasicInfo));
102c94e4:	e1a01004 	mov	r1, r4
102c94e8:	e28d0054 	add	r0, sp, #84	; 0x54
102c94ec:	e3a0204c 	mov	r2, #76	; 0x4c
}


void OnURCHandler_BTConnCnf(const char* strURC, void* reserved)
{
    s32 err_code = 0;
102c94f0:	e58d4004 	str	r4, [sp, #4]
    s32  connId;
    char urcHead[30];
    char profile_name[40] = {0};
102c94f4:	e58d402c 	str	r4, [sp, #44]	; 0x2c
102c94f8:	e58d4030 	str	r4, [sp, #48]	; 0x30
102c94fc:	e58d4034 	str	r4, [sp, #52]	; 0x34
102c9500:	e58d4038 	str	r4, [sp, #56]	; 0x38
102c9504:	e58d403c 	str	r4, [sp, #60]	; 0x3c
102c9508:	e58d4040 	str	r4, [sp, #64]	; 0x40
102c950c:	e58d4044 	str	r4, [sp, #68]	; 0x44
102c9510:	e58d4048 	str	r4, [sp, #72]	; 0x48
102c9514:	e58d404c 	str	r4, [sp, #76]	; 0x4c
102c9518:	e58d4050 	str	r4, [sp, #80]	; 0x50
    //s32 profileId;
    ST_BT_BasicInfo bt_dev;
    
    Ql_memset(&bt_dev,  0x0, sizeof(ST_BT_BasicInfo));
102c951c:	e12fff33 	blx	r3

	if(callback_bt == NULL)
102c9520:	e5953090 	ldr	r3, [r5, #144]	; 0x90
102c9524:	e1530004 	cmp	r3, r4
102c9528:	0a000036 	beq	102c9608 <OnURCHandler_BTConnCnf+0x13c>
    // AT+QBTACPT=1
    //+QBTACPT:1,2,H60-L01,F4E3FBE47920,SPP
    //
    // AT+QBTACPT=0
    //+QBTDISC:F4E3FBE47920,SPP
    Ql_strcpy(urcHead, "\r\n+QBTACPT:\0");
102c952c:	e59f1290 	ldr	r1, [pc, #656]	; 102c97c4 <OnURCHandler_BTConnCnf+0x2f8>
102c9530:	e28d000c 	add	r0, sp, #12
102c9534:	e59f828c 	ldr	r8, [pc, #652]	; 102c97c8 <OnURCHandler_BTConnCnf+0x2fc>
102c9538:	e12fff38 	blx	r8
    if (Ql_StrPrefixMatch(strURC, urcHead))
102c953c:	e59f7288 	ldr	r7, [pc, #648]	; 102c97cc <OnURCHandler_BTConnCnf+0x300>
102c9540:	e1a00006 	mov	r0, r6
102c9544:	e28d100c 	add	r1, sp, #12
102c9548:	e12fff37 	blx	r7
102c954c:	e1500004 	cmp	r0, r4
102c9550:	0a00002e 	beq	102c9610 <OnURCHandler_BTConnCnf+0x144>
    {// Response for succeeding in connecting
        Ql_sscanf(strURC, "%*[^:]: %d[^\r\n]\r\n", &err_code);
102c9554:	e59f7274 	ldr	r7, [pc, #628]	; 102c97d0 <OnURCHandler_BTConnCnf+0x304>
102c9558:	e1a00006 	mov	r0, r6
102c955c:	e5973000 	ldr	r3, [r7]
102c9560:	e59f126c 	ldr	r1, [pc, #620]	; 102c97d4 <OnURCHandler_BTConnCnf+0x308>
102c9564:	e28d2004 	add	r2, sp, #4
102c9568:	e12fff33 	blx	r3
        if (err_code > 0)
102c956c:	e59d3004 	ldr	r3, [sp, #4]
102c9570:	e1530004 	cmp	r3, r4
102c9574:	da00006f 	ble	102c9738 <OnURCHandler_BTConnCnf+0x26c>
        {
            Ql_sscanf(strURC, "%*[^,],%d%*[^\r\n]\r\n",&connId);
102c9578:	e28d2008 	add	r2, sp, #8
102c957c:	e5973000 	ldr	r3, [r7]
102c9580:	e59f1250 	ldr	r1, [pc, #592]	; 102c97d8 <OnURCHandler_BTConnCnf+0x30c>
102c9584:	e1a00006 	mov	r0, r6
102c9588:	e12fff33 	blx	r3
            Ql_sscanf(strURC, "%*[^\"]%[^\"]%*[^\r\n]\r\n",bt_dev.name);
102c958c:	e28d2058 	add	r2, sp, #88	; 0x58
102c9590:	e5973000 	ldr	r3, [r7]
102c9594:	e59f1240 	ldr	r1, [pc, #576]	; 102c97dc <OnURCHandler_BTConnCnf+0x310>
102c9598:	e1a00006 	mov	r0, r6
102c959c:	e12fff33 	blx	r3
            Ql_sscanf(strURC, "%*[^,],%*[^,],%*[^,],%[^,]%*[^\r\n]\r\n",bt_dev.addr);
102c95a0:	e28d2090 	add	r2, sp, #144	; 0x90
102c95a4:	e5973000 	ldr	r3, [r7]
102c95a8:	e59f1230 	ldr	r1, [pc, #560]	; 102c97e0 <OnURCHandler_BTConnCnf+0x314>
102c95ac:	e1a00006 	mov	r0, r6
102c95b0:	e12fff33 	blx	r3
            Ql_sscanf(strURC, "%*[^,],%*[^,],%*[^,],%*[^,],\"%[^\"]%*[^\r\n]\r\n",profile_name);
102c95b4:	e28d202c 	add	r2, sp, #44	; 0x2c
102c95b8:	e59f1224 	ldr	r1, [pc, #548]	; 102c97e4 <OnURCHandler_BTConnCnf+0x318>
102c95bc:	e5973000 	ldr	r3, [r7]
102c95c0:	e1a00006 	mov	r0, r6
102c95c4:	e12fff33 	blx	r3
            bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr));
102c95c8:	e59f3218 	ldr	r3, [pc, #536]	; 102c97e8 <OnURCHandler_BTConnCnf+0x31c>
102c95cc:	e28d0090 	add	r0, sp, #144	; 0x90
102c95d0:	e12fff33 	blx	r3
102c95d4:	e59f3210 	ldr	r3, [pc, #528]	; 102c97ec <OnURCHandler_BTConnCnf+0x320>
102c95d8:	e1a01000 	mov	r1, r0
102c95dc:	e28d0090 	add	r0, sp, #144	; 0x90
102c95e0:	e12fff33 	blx	r3
102c95e4:	e58d0054 	str	r0, [sp, #84]	; 0x54
            RIL_BT_QueryState(NULL);
102c95e8:	e1a00004 	mov	r0, r4
102c95ec:	ebfffc59 	bl	102c8758 <RIL_BT_QueryState>
            callback_bt(MSG_BT_SPP_CONN_IND, URC_BT_CONN_SUCCESS, &bt_dev, NULL);
102c95f0:	e3a00008 	mov	r0, #8
102c95f4:	e595c090 	ldr	ip, [r5, #144]	; 0x90
102c95f8:	e1a01000 	mov	r1, r0
102c95fc:	e28d2054 	add	r2, sp, #84	; 0x54
102c9600:	e1a03004 	mov	r3, r4
102c9604:	e12fff3c 	blx	ip
    {
        Ql_sscanf(strURC, "%*[^:]: %d\r\n", err_code);
        callback_bt(MSG_BT_SPP_CONN_IND, err_code, NULL, NULL);
        return;
    }
}
102c9608:	e28dd0a0 	add	sp, sp, #160	; 0xa0
102c960c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
            BT_DevMngmt_UpdateProfileId(bt_dev.devHdl,-1);
            callback_bt(MSG_BT_SPP_CONN_IND, URC_BT_CONN_FAIL, NULL, NULL);
        }
        return;
    }
    Ql_strcpy(urcHead, "\r\n+QBTDISC:\0");
102c9610:	e59f11d8 	ldr	r1, [pc, #472]	; 102c97f0 <OnURCHandler_BTConnCnf+0x324>
102c9614:	e28d000c 	add	r0, sp, #12
102c9618:	e12fff38 	blx	r8
    if (Ql_StrPrefixMatch(strURC, urcHead))
102c961c:	e1a00006 	mov	r0, r6
102c9620:	e28d100c 	add	r1, sp, #12
102c9624:	e12fff37 	blx	r7
102c9628:	e2504000 	subs	r4, r0, #0
102c962c:	0a00002c 	beq	102c96e4 <OnURCHandler_BTConnCnf+0x218>
    {// Fail to connect or reject connection req
        Ql_sscanf(strURC, "%*[^:]: %[^,]%*[^\r\n]\r\n",bt_dev.addr);
102c9630:	e59f3198 	ldr	r3, [pc, #408]	; 102c97d0 <OnURCHandler_BTConnCnf+0x304>
102c9634:	e28d2090 	add	r2, sp, #144	; 0x90
102c9638:	e59f11b4 	ldr	r1, [pc, #436]	; 102c97f4 <OnURCHandler_BTConnCnf+0x328>
102c963c:	e5933000 	ldr	r3, [r3]
102c9640:	e1a00006 	mov	r0, r6
102c9644:	e12fff33 	blx	r3
        bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr));
102c9648:	e59f3198 	ldr	r3, [pc, #408]	; 102c97e8 <OnURCHandler_BTConnCnf+0x31c>
102c964c:	e28d0090 	add	r0, sp, #144	; 0x90
102c9650:	e12fff33 	blx	r3
102c9654:	e59f3190 	ldr	r3, [pc, #400]	; 102c97ec <OnURCHandler_BTConnCnf+0x320>
102c9658:	e1a01000 	mov	r1, r0
102c965c:	e28d0090 	add	r0, sp, #144	; 0x90
102c9660:	e12fff33 	blx	r3
102c9664:	e2453004 	sub	r3, r5, #4
    }
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), NULL, NULL, 0);
}


void OnURCHandler_BTConnCnf(const char* strURC, void* reserved)
102c9668:	e285e074 	add	lr, r5, #116	; 0x74
102c966c:	e1a02003 	mov	r2, r3
    }
    Ql_strcpy(urcHead, "\r\n+QBTDISC:\0");
    if (Ql_StrPrefixMatch(strURC, urcHead))
    {// Fail to connect or reject connection req
        Ql_sscanf(strURC, "%*[^:]: %[^,]%*[^\r\n]\r\n",bt_dev.addr);
        bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr));
102c9670:	e58d0054 	str	r0, [sp, #84]	; 0x54
102c9674:	ea000001 	b	102c9680 <OnURCHandler_BTConnCnf+0x1b4>
//
// Update connect id
static void BT_DevMngmt_UpdateConnId(const u32 hdl, const s32 connId)
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c9678:	e152000e 	cmp	r2, lr
102c967c:	0a00000b 	beq	102c96b0 <OnURCHandler_BTConnCnf+0x1e4>
    {
        if (hdl == m_arrBTDev[i]->btDevice.devHdl)
102c9680:	e5b21004 	ldr	r1, [r2, #4]!
102c9684:	e591c000 	ldr	ip, [r1]
102c9688:	e150000c 	cmp	r0, ip
102c968c:	1afffff9 	bne	102c9678 <OnURCHandler_BTConnCnf+0x1ac>
        {
            m_arrBTDev[i]->connId= connId;
102c9690:	e3e02000 	mvn	r2, #0
102c9694:	e5812054 	str	r2, [r1, #84]	; 0x54
static void BT_DevMngmt_UpdateProfileId(const u32 hdl, const s32 profileId)
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
    {
        if (hdl == m_arrBTDev[i]->btDevice.devHdl)
102c9698:	e5b32004 	ldr	r2, [r3, #4]!
102c969c:	e5921000 	ldr	r1, [r2]
102c96a0:	e1500001 	cmp	r0, r1
102c96a4:	0a000005 	beq	102c96c0 <OnURCHandler_BTConnCnf+0x1f4>
}

static void BT_DevMngmt_UpdateProfileId(const u32 hdl, const s32 profileId)
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c96a8:	e153000e 	cmp	r3, lr
102c96ac:	0a000005 	beq	102c96c8 <OnURCHandler_BTConnCnf+0x1fc>
    {
        if (hdl == m_arrBTDev[i]->btDevice.devHdl)
102c96b0:	e5b32004 	ldr	r2, [r3, #4]!
102c96b4:	e5921000 	ldr	r1, [r2]
102c96b8:	e1500001 	cmp	r0, r1
102c96bc:	1afffff9 	bne	102c96a8 <OnURCHandler_BTConnCnf+0x1dc>
        {
            m_arrBTDev[i]->profileId= profileId;
102c96c0:	e3e03000 	mvn	r3, #0
102c96c4:	e5823058 	str	r3, [r2, #88]	; 0x58
    {// Fail to connect or reject connection req
        Ql_sscanf(strURC, "%*[^:]: %[^,]%*[^\r\n]\r\n",bt_dev.addr);
        bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr));
        BT_DevMngmt_UpdateConnId(bt_dev.devHdl, -1);
        BT_DevMngmt_UpdateProfileId(bt_dev.devHdl,-1);
        callback_bt(MSG_BT_SPP_CONN_IND, URC_BT_CONN_FAIL, NULL, NULL);
102c96c8:	e3a02000 	mov	r2, #0
102c96cc:	e595c090 	ldr	ip, [r5, #144]	; 0x90
102c96d0:	e3a00008 	mov	r0, #8
102c96d4:	e3a01009 	mov	r1, #9
102c96d8:	e1a03002 	mov	r3, r2
102c96dc:	e12fff3c 	blx	ip
102c96e0:	eaffffc8 	b	102c9608 <OnURCHandler_BTConnCnf+0x13c>
        return;
    }

    Ql_strcpy(urcHead, "+CME ERROR:\0");
102c96e4:	e59f110c 	ldr	r1, [pc, #268]	; 102c97f8 <OnURCHandler_BTConnCnf+0x32c>
102c96e8:	e28d000c 	add	r0, sp, #12
102c96ec:	e12fff38 	blx	r8
    if (Ql_StrPrefixMatch(strURC, urcHead))
102c96f0:	e1a00006 	mov	r0, r6
102c96f4:	e28d100c 	add	r1, sp, #12
102c96f8:	e12fff37 	blx	r7
102c96fc:	e3500000 	cmp	r0, #0
102c9700:	0affffc0 	beq	102c9608 <OnURCHandler_BTConnCnf+0x13c>
    {
        Ql_sscanf(strURC, "%*[^:]: %d\r\n", err_code);
102c9704:	e59f30c4 	ldr	r3, [pc, #196]	; 102c97d0 <OnURCHandler_BTConnCnf+0x304>
102c9708:	e59d2004 	ldr	r2, [sp, #4]
102c970c:	e59f10e8 	ldr	r1, [pc, #232]	; 102c97fc <OnURCHandler_BTConnCnf+0x330>
102c9710:	e5933000 	ldr	r3, [r3]
102c9714:	e1a00006 	mov	r0, r6
102c9718:	e12fff33 	blx	r3
        callback_bt(MSG_BT_SPP_CONN_IND, err_code, NULL, NULL);
102c971c:	e1a02004 	mov	r2, r4
102c9720:	e595c090 	ldr	ip, [r5, #144]	; 0x90
102c9724:	e3a00008 	mov	r0, #8
102c9728:	e59d1004 	ldr	r1, [sp, #4]
102c972c:	e1a03004 	mov	r3, r4
102c9730:	e12fff3c 	blx	ip
102c9734:	eaffffb3 	b	102c9608 <OnURCHandler_BTConnCnf+0x13c>
            Ql_sscanf(strURC, "%*[^,],%*[^,],%*[^,],%*[^,],\"%[^\"]%*[^\r\n]\r\n",profile_name);
            bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr));
            RIL_BT_QueryState(NULL);
            callback_bt(MSG_BT_SPP_CONN_IND, URC_BT_CONN_SUCCESS, &bt_dev, NULL);
        }else{
            Ql_sscanf(strURC, "%*[^,],%*[^,],%*[^,],%[^,]%*[^\r\n]\r\n",bt_dev.addr);
102c9738:	e28d2090 	add	r2, sp, #144	; 0x90
102c973c:	e59f109c 	ldr	r1, [pc, #156]	; 102c97e0 <OnURCHandler_BTConnCnf+0x314>
102c9740:	e5973000 	ldr	r3, [r7]
102c9744:	e1a00006 	mov	r0, r6
102c9748:	e12fff33 	blx	r3
            bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr));
102c974c:	e59f3094 	ldr	r3, [pc, #148]	; 102c97e8 <OnURCHandler_BTConnCnf+0x31c>
102c9750:	e28d0090 	add	r0, sp, #144	; 0x90
102c9754:	e12fff33 	blx	r3
102c9758:	e59f308c 	ldr	r3, [pc, #140]	; 102c97ec <OnURCHandler_BTConnCnf+0x320>
102c975c:	e1a01000 	mov	r1, r0
102c9760:	e28d0090 	add	r0, sp, #144	; 0x90
102c9764:	e12fff33 	blx	r3
102c9768:	e2453004 	sub	r3, r5, #4
    }
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), NULL, NULL, 0);
}


void OnURCHandler_BTConnCnf(const char* strURC, void* reserved)
102c976c:	e285e074 	add	lr, r5, #116	; 0x74
102c9770:	e1a02003 	mov	r2, r3
            bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr));
            RIL_BT_QueryState(NULL);
            callback_bt(MSG_BT_SPP_CONN_IND, URC_BT_CONN_SUCCESS, &bt_dev, NULL);
        }else{
            Ql_sscanf(strURC, "%*[^,],%*[^,],%*[^,],%[^,]%*[^\r\n]\r\n",bt_dev.addr);
            bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr));
102c9774:	e58d0054 	str	r0, [sp, #84]	; 0x54
102c9778:	ea000001 	b	102c9784 <OnURCHandler_BTConnCnf+0x2b8>
//
// Update connect id
static void BT_DevMngmt_UpdateConnId(const u32 hdl, const s32 connId)
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c977c:	e152000e 	cmp	r2, lr
102c9780:	0a000008 	beq	102c97a8 <OnURCHandler_BTConnCnf+0x2dc>
    {
        if (hdl == m_arrBTDev[i]->btDevice.devHdl)
102c9784:	e5b21004 	ldr	r1, [r2, #4]!
102c9788:	e591c000 	ldr	ip, [r1]
102c978c:	e150000c 	cmp	r0, ip
102c9790:	1afffff9 	bne	102c977c <OnURCHandler_BTConnCnf+0x2b0>
        {
            m_arrBTDev[i]->connId= connId;
102c9794:	e3e02000 	mvn	r2, #0
102c9798:	e5812054 	str	r2, [r1, #84]	; 0x54
102c979c:	ea000001 	b	102c97a8 <OnURCHandler_BTConnCnf+0x2dc>
}

static void BT_DevMngmt_UpdateProfileId(const u32 hdl, const s32 profileId)
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c97a0:	e153000e 	cmp	r3, lr
102c97a4:	0affffc7 	beq	102c96c8 <OnURCHandler_BTConnCnf+0x1fc>
    {
        if (hdl == m_arrBTDev[i]->btDevice.devHdl)
102c97a8:	e5b32004 	ldr	r2, [r3, #4]!
102c97ac:	e5921000 	ldr	r1, [r2]
102c97b0:	e1500001 	cmp	r0, r1
102c97b4:	1afffff9 	bne	102c97a0 <OnURCHandler_BTConnCnf+0x2d4>
102c97b8:	eaffffc0 	b	102c96c0 <OnURCHandler_BTConnCnf+0x1f4>
102c97bc:	f03d2058 	.word	0xf03d2058
102c97c0:	102cd6b0 	.word	0x102cd6b0
102c97c4:	102ce134 	.word	0x102ce134
102c97c8:	102cd438 	.word	0x102cd438
102c97cc:	102cbda0 	.word	0x102cbda0
102c97d0:	f03d31f0 	.word	0xf03d31f0
102c97d4:	102cec7c 	.word	0x102cec7c
102c97d8:	102cebc8 	.word	0x102cebc8
102c97dc:	102ceec8 	.word	0x102ceec8
102c97e0:	102cee40 	.word	0x102cee40
102c97e4:	102cee64 	.word	0x102cee64
102c97e8:	102cd560 	.word	0x102cd560
102c97ec:	102cc1ec 	.word	0x102cc1ec
102c97f0:	102ce144 	.word	0x102ce144
102c97f4:	102ceee0 	.word	0x102ceee0
102c97f8:	102ce0b4 	.word	0x102ce0b4
102c97fc:	102ceb88 	.word	0x102ceb88

102c9800 <RIL_BT_Disconnect>:
*                RIL_AT_BUSY,   sending AT.
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_Disconnect(BT_DEV_HDL hdlDevice)
{
102c9800:	e59f3084 	ldr	r3, [pc, #132]	; 102c988c <RIL_BT_Disconnect+0x8c>
102c9804:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
*                RIL_AT_TIMEOUT,send AT timeout.
*                RIL_AT_BUSY,   sending AT.
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_Disconnect(BT_DEV_HDL hdlDevice)
102c9808:	e283c078 	add	ip, r3, #120	; 0x78
{
102c980c:	e24dd024 	sub	sp, sp, #36	; 0x24
102c9810:	ea000001 	b	102c981c <RIL_BT_Disconnect+0x1c>
    return 0;
}
s32 BT_DevMngmt_GetConnId(const u32 hdl)
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c9814:	e153000c 	cmp	r3, ip
102c9818:	0a000017 	beq	102c987c <RIL_BT_Disconnect+0x7c>
    {
        if (hdl == m_arrBTDev[i]->btDevice.devHdl)
102c981c:	e5b32004 	ldr	r2, [r3, #4]!
102c9820:	e5921000 	ldr	r1, [r2]
102c9824:	e1500001 	cmp	r0, r1
102c9828:	1afffff9 	bne	102c9814 <RIL_BT_Disconnect+0x14>
        {
            return m_arrBTDev[i]->connId;
102c982c:	e5922054 	ldr	r2, [r2, #84]	; 0x54
    char strAT[20];
    s32  connId ;
    
    connId = BT_DevMngmt_GetConnId(hdlDevice);

    if(-1 == connId)
102c9830:	e3720001 	cmn	r2, #1
102c9834:	0a000012 	beq	102c9884 <RIL_BT_Disconnect+0x84>
    {
        return RIL_AT_INVALID_PARAM ;
    }
    
    Ql_sprintf(strAT, "AT+QBTDISCONN=%d", connId);
102c9838:	e59f3050 	ldr	r3, [pc, #80]	; 102c9890 <RIL_BT_Disconnect+0x90>
102c983c:	e59f1050 	ldr	r1, [pc, #80]	; 102c9894 <RIL_BT_Disconnect+0x94>
102c9840:	e5933000 	ldr	r3, [r3]
102c9844:	e28d000c 	add	r0, sp, #12
102c9848:	e12fff33 	blx	r3
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), NULL, NULL, 0);
102c984c:	e59f3044 	ldr	r3, [pc, #68]	; 102c9898 <RIL_BT_Disconnect+0x98>
102c9850:	e28d000c 	add	r0, sp, #12
102c9854:	e12fff33 	blx	r3
102c9858:	e3a03000 	mov	r3, #0
102c985c:	e1a02003 	mov	r2, r3
102c9860:	e58d3000 	str	r3, [sp]
102c9864:	e59fc030 	ldr	ip, [pc, #48]	; 102c989c <RIL_BT_Disconnect+0x9c>
102c9868:	e1a01000 	mov	r1, r0
102c986c:	e28d000c 	add	r0, sp, #12
102c9870:	e12fff3c 	blx	ip
}
102c9874:	e28dd024 	add	sp, sp, #36	; 0x24
102c9878:	e8bd8000 	ldmfd	sp!, {pc}
        if (hdl == m_arrBTDev[i]->btDevice.devHdl)
        {
            return m_arrBTDev[i]->connId;
        }
    }
    return 0;
102c987c:	e3a02000 	mov	r2, #0
102c9880:	eaffffec 	b	102c9838 <RIL_BT_Disconnect+0x38>
    
    connId = BT_DevMngmt_GetConnId(hdlDevice);

    if(-1 == connId)
    {
        return RIL_AT_INVALID_PARAM ;
102c9884:	e3e00003 	mvn	r0, #3
102c9888:	eafffff9 	b	102c9874 <RIL_BT_Disconnect+0x74>
102c988c:	f03d2054 	.word	0xf03d2054
102c9890:	f03d31e8 	.word	0xf03d31e8
102c9894:	102ceef8 	.word	0x102ceef8
102c9898:	102cd560 	.word	0x102cd560
102c989c:	102cd11c 	.word	0x102cd11c

102c98a0 <OnURCHandler_BTDisconn>:
    Ql_sprintf(strAT, "AT+QBTDISCONN=%d", connId);
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), NULL, NULL, 0);
}

void OnURCHandler_BTDisconn(const char* strURC, void* reserved)
{
102c98a0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ST_BT_BasicInfo bt_dev;
    char urcHead[30];
    s32  connId;
    s32  pairedId;
    s32  profileId;
    s32 err_code = 0;
102c98a4:	e3a03000 	mov	r3, #0
    Ql_sprintf(strAT, "AT+QBTDISCONN=%d", connId);
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), NULL, NULL, 0);
}

void OnURCHandler_BTDisconn(const char* strURC, void* reserved)
{
102c98a8:	e24dd0a0 	sub	sp, sp, #160	; 0xa0
    s32  profileId;
    s32 err_code = 0;
    char profile_name[40] = {0};    
    
    Ql_memset(&bt_dev,  0x0, sizeof(ST_BT_BasicInfo));
	if(callback_bt == NULL)
102c98ac:	e59f41c0 	ldr	r4, [pc, #448]	; 102c9a74 <OnURCHandler_BTDisconn+0x1d4>
    s32  pairedId;
    s32  profileId;
    s32 err_code = 0;
    char profile_name[40] = {0};    
    
    Ql_memset(&bt_dev,  0x0, sizeof(ST_BT_BasicInfo));
102c98b0:	e1a01003 	mov	r1, r3
    ST_BT_BasicInfo bt_dev;
    char urcHead[30];
    s32  connId;
    s32  pairedId;
    s32  profileId;
    s32 err_code = 0;
102c98b4:	e58d3008 	str	r3, [sp, #8]
    char profile_name[40] = {0};    
102c98b8:	e58d302c 	str	r3, [sp, #44]	; 0x2c
102c98bc:	e58d3030 	str	r3, [sp, #48]	; 0x30
102c98c0:	e58d3034 	str	r3, [sp, #52]	; 0x34
102c98c4:	e58d3038 	str	r3, [sp, #56]	; 0x38
102c98c8:	e58d303c 	str	r3, [sp, #60]	; 0x3c
102c98cc:	e58d3040 	str	r3, [sp, #64]	; 0x40
102c98d0:	e58d3044 	str	r3, [sp, #68]	; 0x44
102c98d4:	e58d3048 	str	r3, [sp, #72]	; 0x48
102c98d8:	e58d304c 	str	r3, [sp, #76]	; 0x4c
102c98dc:	e58d3050 	str	r3, [sp, #80]	; 0x50
    Ql_sprintf(strAT, "AT+QBTDISCONN=%d", connId);
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), NULL, NULL, 0);
}

void OnURCHandler_BTDisconn(const char* strURC, void* reserved)
{
102c98e0:	e1a05000 	mov	r5, r0
    s32  pairedId;
    s32  profileId;
    s32 err_code = 0;
    char profile_name[40] = {0};    
    
    Ql_memset(&bt_dev,  0x0, sizeof(ST_BT_BasicInfo));
102c98e4:	e59f318c 	ldr	r3, [pc, #396]	; 102c9a78 <OnURCHandler_BTDisconn+0x1d8>
102c98e8:	e28d0054 	add	r0, sp, #84	; 0x54
102c98ec:	e3a0204c 	mov	r2, #76	; 0x4c
102c98f0:	e12fff33 	blx	r3
	if(callback_bt == NULL)
102c98f4:	e5943090 	ldr	r3, [r4, #144]	; 0x90
102c98f8:	e3530000 	cmp	r3, #0
102c98fc:	0a000045 	beq	102c9a18 <OnURCHandler_BTDisconn+0x178>
	{
	   return ;
	}

    Ql_strcpy(urcHead, "\r\n+QBTDISCONN:\0");
102c9900:	e59f1174 	ldr	r1, [pc, #372]	; 102c9a7c <OnURCHandler_BTDisconn+0x1dc>
102c9904:	e28d000c 	add	r0, sp, #12
102c9908:	e59f7170 	ldr	r7, [pc, #368]	; 102c9a80 <OnURCHandler_BTDisconn+0x1e0>
102c990c:	e12fff37 	blx	r7
    if (Ql_StrPrefixMatch(strURC, urcHead))
102c9910:	e59f616c 	ldr	r6, [pc, #364]	; 102c9a84 <OnURCHandler_BTDisconn+0x1e4>
102c9914:	e1a00005 	mov	r0, r5
102c9918:	e28d100c 	add	r1, sp, #12
102c991c:	e12fff36 	blx	r6
102c9920:	e2508000 	subs	r8, r0, #0
102c9924:	0a00003d 	beq	102c9a20 <OnURCHandler_BTDisconn+0x180>
    {
        Ql_sscanf(strURC, "%*[^:]: %d,%d%*[^\r\n]\r\n", &connId,&pairedId);
102c9928:	e59f6158 	ldr	r6, [pc, #344]	; 102c9a88 <OnURCHandler_BTDisconn+0x1e8>
102c992c:	e28d3004 	add	r3, sp, #4
102c9930:	e596c000 	ldr	ip, [r6]
102c9934:	e59f1150 	ldr	r1, [pc, #336]	; 102c9a8c <OnURCHandler_BTDisconn+0x1ec>
102c9938:	e1a0200d 	mov	r2, sp
102c993c:	e1a00005 	mov	r0, r5
102c9940:	e12fff3c 	blx	ip
        Ql_sscanf(strURC, "%*[^,],%*[^,],\"%[^\"]%*[^\r\n]\r\n",bt_dev.name);
102c9944:	e59f1144 	ldr	r1, [pc, #324]	; 102c9a90 <OnURCHandler_BTDisconn+0x1f0>
102c9948:	e28d2058 	add	r2, sp, #88	; 0x58
102c994c:	e5963000 	ldr	r3, [r6]
102c9950:	e1a00005 	mov	r0, r5
102c9954:	e12fff33 	blx	r3
        Ql_sscanf(strURC, "%*[^,],%*[^,],%*[^,],%[^,]%*[^\r\n]\r\n",bt_dev.addr);
102c9958:	e59f1134 	ldr	r1, [pc, #308]	; 102c9a94 <OnURCHandler_BTDisconn+0x1f4>
102c995c:	e28d2090 	add	r2, sp, #144	; 0x90
102c9960:	e5963000 	ldr	r3, [r6]
102c9964:	e1a00005 	mov	r0, r5
102c9968:	e12fff33 	blx	r3
        Ql_sscanf(strURC, "%*[^,],%*[^,],%*[^,],%*[^,],\"%[^\"]%*[^\r\n]\r\n",profile_name);
102c996c:	e28d202c 	add	r2, sp, #44	; 0x2c
102c9970:	e59f1120 	ldr	r1, [pc, #288]	; 102c9a98 <OnURCHandler_BTDisconn+0x1f8>
102c9974:	e5963000 	ldr	r3, [r6]
102c9978:	e1a00005 	mov	r0, r5
102c997c:	e12fff33 	blx	r3
        bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr)); 
102c9980:	e59f3114 	ldr	r3, [pc, #276]	; 102c9a9c <OnURCHandler_BTDisconn+0x1fc>
102c9984:	e28d0090 	add	r0, sp, #144	; 0x90
102c9988:	e12fff33 	blx	r3
102c998c:	e59f310c 	ldr	r3, [pc, #268]	; 102c9aa0 <OnURCHandler_BTDisconn+0x200>
102c9990:	e1a01000 	mov	r1, r0
102c9994:	e28d0090 	add	r0, sp, #144	; 0x90
102c9998:	e12fff33 	blx	r3
102c999c:	e2443004 	sub	r3, r4, #4
    
    Ql_sprintf(strAT, "AT+QBTDISCONN=%d", connId);
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), NULL, NULL, 0);
}

void OnURCHandler_BTDisconn(const char* strURC, void* reserved)
102c99a0:	e284e074 	add	lr, r4, #116	; 0x74
102c99a4:	e1a02003 	mov	r2, r3
    {
        Ql_sscanf(strURC, "%*[^:]: %d,%d%*[^\r\n]\r\n", &connId,&pairedId);
        Ql_sscanf(strURC, "%*[^,],%*[^,],\"%[^\"]%*[^\r\n]\r\n",bt_dev.name);
        Ql_sscanf(strURC, "%*[^,],%*[^,],%*[^,],%[^,]%*[^\r\n]\r\n",bt_dev.addr);
        Ql_sscanf(strURC, "%*[^,],%*[^,],%*[^,],%*[^,],\"%[^\"]%*[^\r\n]\r\n",profile_name);
        bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr)); 
102c99a8:	e58d0054 	str	r0, [sp, #84]	; 0x54
102c99ac:	ea000001 	b	102c99b8 <OnURCHandler_BTDisconn+0x118>
//
// Update connect id
static void BT_DevMngmt_UpdateConnId(const u32 hdl, const s32 connId)
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c99b0:	e152000e 	cmp	r2, lr
102c99b4:	0a00000b 	beq	102c99e8 <OnURCHandler_BTDisconn+0x148>
    {
        if (hdl == m_arrBTDev[i]->btDevice.devHdl)
102c99b8:	e5b21004 	ldr	r1, [r2, #4]!
102c99bc:	e591c000 	ldr	ip, [r1]
102c99c0:	e150000c 	cmp	r0, ip
102c99c4:	1afffff9 	bne	102c99b0 <OnURCHandler_BTDisconn+0x110>
        {
            m_arrBTDev[i]->connId= connId;
102c99c8:	e3e02000 	mvn	r2, #0
102c99cc:	e5812054 	str	r2, [r1, #84]	; 0x54
static void BT_DevMngmt_UpdateProfileId(const u32 hdl, const s32 profileId)
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
    {
        if (hdl == m_arrBTDev[i]->btDevice.devHdl)
102c99d0:	e5b32004 	ldr	r2, [r3, #4]!
102c99d4:	e5921000 	ldr	r1, [r2]
102c99d8:	e1500001 	cmp	r0, r1
102c99dc:	0a000005 	beq	102c99f8 <OnURCHandler_BTDisconn+0x158>
}

static void BT_DevMngmt_UpdateProfileId(const u32 hdl, const s32 profileId)
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c99e0:	e153000e 	cmp	r3, lr
102c99e4:	0a000005 	beq	102c9a00 <OnURCHandler_BTDisconn+0x160>
    {
        if (hdl == m_arrBTDev[i]->btDevice.devHdl)
102c99e8:	e5b32004 	ldr	r2, [r3, #4]!
102c99ec:	e5921000 	ldr	r1, [r2]
102c99f0:	e1500001 	cmp	r0, r1
102c99f4:	1afffff9 	bne	102c99e0 <OnURCHandler_BTDisconn+0x140>
        {
            m_arrBTDev[i]->profileId= profileId;
102c99f8:	e3e03000 	mvn	r3, #0
102c99fc:	e5823058 	str	r3, [r2, #88]	; 0x58
        bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr)); 
        //Ql_Debug_Trace("connid = %d pairid = %d name = %s addr = %s ,handle = 0x%08x\r\n",connId,pairedId,bt_dev.name,bt_dev.addr,bt_dev.devHdl);
        BT_DevMngmt_UpdateConnId(bt_dev.devHdl, -1);
        BT_DevMngmt_UpdateProfileId(bt_dev.devHdl,-1);
 
        callback_bt(MSG_BT_DISCONN_IND, URC_BT_DISCONNECT_POSITIVE, &bt_dev, NULL);
102c9a00:	e594c090 	ldr	ip, [r4, #144]	; 0x90
102c9a04:	e3a00007 	mov	r0, #7
102c9a08:	e3a0100c 	mov	r1, #12
102c9a0c:	e28d2054 	add	r2, sp, #84	; 0x54
102c9a10:	e3a03000 	mov	r3, #0
102c9a14:	e12fff3c 	blx	ip
    {
        Ql_sscanf(strURC, "%*[^: ]: %d\r\n", &err_code);
        callback_bt(MSG_BT_DISCONN_IND, err_code, &bt_dev, NULL);
        return;
    }
}
102c9a18:	e28dd0a0 	add	sp, sp, #160	; 0xa0
102c9a1c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
 
        callback_bt(MSG_BT_DISCONN_IND, URC_BT_DISCONNECT_POSITIVE, &bt_dev, NULL);
        return;
    }
    
    Ql_strcpy(urcHead, "\r\n+CME ERROR: \0");
102c9a20:	e59f107c 	ldr	r1, [pc, #124]	; 102c9aa4 <OnURCHandler_BTDisconn+0x204>
102c9a24:	e28d000c 	add	r0, sp, #12
102c9a28:	e12fff37 	blx	r7
    if (Ql_StrPrefixMatch(strURC, urcHead))
102c9a2c:	e1a00005 	mov	r0, r5
102c9a30:	e28d100c 	add	r1, sp, #12
102c9a34:	e12fff36 	blx	r6
102c9a38:	e3500000 	cmp	r0, #0
102c9a3c:	0afffff5 	beq	102c9a18 <OnURCHandler_BTDisconn+0x178>
    {
        Ql_sscanf(strURC, "%*[^: ]: %d\r\n", &err_code);
102c9a40:	e59f3040 	ldr	r3, [pc, #64]	; 102c9a88 <OnURCHandler_BTDisconn+0x1e8>
102c9a44:	e28d2008 	add	r2, sp, #8
102c9a48:	e59f1058 	ldr	r1, [pc, #88]	; 102c9aa8 <OnURCHandler_BTDisconn+0x208>
102c9a4c:	e5933000 	ldr	r3, [r3]
102c9a50:	e1a00005 	mov	r0, r5
102c9a54:	e12fff33 	blx	r3
        callback_bt(MSG_BT_DISCONN_IND, err_code, &bt_dev, NULL);
102c9a58:	e594c090 	ldr	ip, [r4, #144]	; 0x90
102c9a5c:	e3a00007 	mov	r0, #7
102c9a60:	e59d1008 	ldr	r1, [sp, #8]
102c9a64:	e28d2054 	add	r2, sp, #84	; 0x54
102c9a68:	e1a03008 	mov	r3, r8
102c9a6c:	e12fff3c 	blx	ip
102c9a70:	eaffffe8 	b	102c9a18 <OnURCHandler_BTDisconn+0x178>
102c9a74:	f03d2058 	.word	0xf03d2058
102c9a78:	102cd6b0 	.word	0x102cd6b0
102c9a7c:	102ce154 	.word	0x102ce154
102c9a80:	102cd438 	.word	0x102cd438
102c9a84:	102cbda0 	.word	0x102cbda0
102c9a88:	f03d31f0 	.word	0xf03d31f0
102c9a8c:	102cef0c 	.word	0x102cef0c
102c9a90:	102cef24 	.word	0x102cef24
102c9a94:	102cee40 	.word	0x102cee40
102c9a98:	102cee64 	.word	0x102cee64
102c9a9c:	102cd560 	.word	0x102cd560
102c9aa0:	102cc1ec 	.word	0x102cc1ec
102c9aa4:	102ce164 	.word	0x102ce164
102c9aa8:	102cef44 	.word	0x102cef44

102c9aac <RIL_BT_SPP_Send>:
*                RIL_AT_BUSY,   sending AT.
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_SPP_Send(BT_DEV_HDL hdlDevice, u8* ptrData, u32 lenToSend,u32* actualSend)
{
102c9aac:	e92d45f0 	push	{r4, r5, r6, r7, r8, sl, lr}
    char strAT[20];
    s32  connId ;

    if(NULL == ptrData || lenToSend < 0)
102c9ab0:	e251a000 	subs	sl, r1, #0
*                RIL_AT_BUSY,   sending AT.
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_SPP_Send(BT_DEV_HDL hdlDevice, u8* ptrData, u32 lenToSend,u32* actualSend)
{
102c9ab4:	e24dd024 	sub	sp, sp, #36	; 0x24
102c9ab8:	e1a07002 	mov	r7, r2
102c9abc:	e1a08003 	mov	r8, r3
    char strAT[20];
    s32  connId ;

    if(NULL == ptrData || lenToSend < 0)
102c9ac0:	0a000023 	beq	102c9b54 <RIL_BT_SPP_Send+0xa8>
102c9ac4:	e59fc090 	ldr	ip, [pc, #144]	; 102c9b5c <RIL_BT_SPP_Send+0xb0>
*                RIL_AT_TIMEOUT,send AT timeout.
*                RIL_AT_BUSY,   sending AT.
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_SPP_Send(BT_DEV_HDL hdlDevice, u8* ptrData, u32 lenToSend,u32* actualSend)
102c9ac8:	e28c6078 	add	r6, ip, #120	; 0x78
102c9acc:	ea000001 	b	102c9ad8 <RIL_BT_SPP_Send+0x2c>
    return 0;
}
s32 BT_DevMngmt_GetConnId(const u32 hdl)
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c9ad0:	e15c0006 	cmp	ip, r6
102c9ad4:	0a00001c 	beq	102c9b4c <RIL_BT_SPP_Send+0xa0>
    {
        if (hdl == m_arrBTDev[i]->btDevice.devHdl)
102c9ad8:	e5bc4004 	ldr	r4, [ip, #4]!
102c9adc:	e5945000 	ldr	r5, [r4]
102c9ae0:	e1500005 	cmp	r0, r5
102c9ae4:	1afffff9 	bne	102c9ad0 <RIL_BT_SPP_Send+0x24>
        {
            return m_arrBTDev[i]->connId;
102c9ae8:	e5942054 	ldr	r2, [r4, #84]	; 0x54
        return RIL_AT_INVALID_PARAM;
    }
    
    connId = BT_DevMngmt_GetConnId(hdlDevice);

    if(-1 == connId)
102c9aec:	e3720001 	cmn	r2, #1
102c9af0:	0a000017 	beq	102c9b54 <RIL_BT_SPP_Send+0xa8>
        return RIL_AT_INVALID_PARAM;
    }

    m_ptrSppData = ptrData;
    m_nSppDataLenToSnd   = lenToSend;
    Ql_sprintf(strAT, "AT+QSPPSEND=%d,%d", connId, lenToSend);
102c9af4:	e59f0064 	ldr	r0, [pc, #100]	; 102c9b60 <RIL_BT_SPP_Send+0xb4>
    if(-1 == connId)
    {
        return RIL_AT_INVALID_PARAM;
    }

    m_ptrSppData = ptrData;
102c9af8:	e59fc064 	ldr	ip, [pc, #100]	; 102c9b64 <RIL_BT_SPP_Send+0xb8>
    m_nSppDataLenToSnd   = lenToSend;
    Ql_sprintf(strAT, "AT+QSPPSEND=%d,%d", connId, lenToSend);
102c9afc:	e59f1064 	ldr	r1, [pc, #100]	; 102c9b68 <RIL_BT_SPP_Send+0xbc>
102c9b00:	e1a03007 	mov	r3, r7
102c9b04:	e5904000 	ldr	r4, [r0]
102c9b08:	e28d000c 	add	r0, sp, #12
    if(-1 == connId)
    {
        return RIL_AT_INVALID_PARAM;
    }

    m_ptrSppData = ptrData;
102c9b0c:	e58ca088 	str	sl, [ip, #136]	; 0x88
    m_nSppDataLenToSnd   = lenToSend;
102c9b10:	e58c708c 	str	r7, [ip, #140]	; 0x8c
    Ql_sprintf(strAT, "AT+QSPPSEND=%d,%d", connId, lenToSend);
102c9b14:	e12fff34 	blx	r4
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), ATRsp_QBTSPPSEND_Hdlr,(void *)actualSend, 0);
102c9b18:	e59f304c 	ldr	r3, [pc, #76]	; 102c9b6c <RIL_BT_SPP_Send+0xc0>
102c9b1c:	e28d000c 	add	r0, sp, #12
102c9b20:	e12fff33 	blx	r3
102c9b24:	e3a03000 	mov	r3, #0
102c9b28:	e58d3000 	str	r3, [sp]
102c9b2c:	e59f203c 	ldr	r2, [pc, #60]	; 102c9b70 <RIL_BT_SPP_Send+0xc4>
102c9b30:	e1a03008 	mov	r3, r8
102c9b34:	e59fc038 	ldr	ip, [pc, #56]	; 102c9b74 <RIL_BT_SPP_Send+0xc8>
102c9b38:	e1a01000 	mov	r1, r0
102c9b3c:	e28d000c 	add	r0, sp, #12
102c9b40:	e12fff3c 	blx	ip
}
102c9b44:	e28dd024 	add	sp, sp, #36	; 0x24
102c9b48:	e8bd85f0 	pop	{r4, r5, r6, r7, r8, sl, pc}
        if (hdl == m_arrBTDev[i]->btDevice.devHdl)
        {
            return m_arrBTDev[i]->connId;
        }
    }
    return 0;
102c9b4c:	e3a02000 	mov	r2, #0
102c9b50:	eaffffe7 	b	102c9af4 <RIL_BT_SPP_Send+0x48>
    char strAT[20];
    s32  connId ;

    if(NULL == ptrData || lenToSend < 0)
    {
        return RIL_AT_INVALID_PARAM;
102c9b54:	e3e00003 	mvn	r0, #3
102c9b58:	eafffff9 	b	102c9b44 <RIL_BT_SPP_Send+0x98>
102c9b5c:	f03d2054 	.word	0xf03d2054
102c9b60:	f03d31e8 	.word	0xf03d31e8
102c9b64:	f03d2058 	.word	0xf03d2058
102c9b68:	102cef54 	.word	0x102cef54
102c9b6c:	102cd560 	.word	0x102cd560
102c9b70:	102c7bbc 	.word	0x102c7bbc
102c9b74:	102cd11c 	.word	0x102cd11c

102c9b78 <RIL_BT_SPP_Read>:
*                RIL_AT_BUSY,   sending AT.
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_SPP_Read(BT_DEV_HDL hdlDevice, u8* ptrBuffer, u32 lenToRead ,u32 *actualReadlen)
{
102c9b78:	e92d45f0 	push	{r4, r5, r6, r7, r8, sl, lr}
    char strAT[20];
    s32  connId;

    if(NULL == ptrBuffer || lenToRead < 0)
102c9b7c:	e251a000 	subs	sl, r1, #0
*                RIL_AT_BUSY,   sending AT.
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_SPP_Read(BT_DEV_HDL hdlDevice, u8* ptrBuffer, u32 lenToRead ,u32 *actualReadlen)
{
102c9b80:	e24dd024 	sub	sp, sp, #36	; 0x24
102c9b84:	e1a07002 	mov	r7, r2
102c9b88:	e1a08003 	mov	r8, r3
    char strAT[20];
    s32  connId;

    if(NULL == ptrBuffer || lenToRead < 0)
102c9b8c:	0a000024 	beq	102c9c24 <RIL_BT_SPP_Read+0xac>
102c9b90:	e59fc094 	ldr	ip, [pc, #148]	; 102c9c2c <RIL_BT_SPP_Read+0xb4>
*                RIL_AT_TIMEOUT,send AT timeout.
*                RIL_AT_BUSY,   sending AT.
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*****************************************************************/
s32 RIL_BT_SPP_Read(BT_DEV_HDL hdlDevice, u8* ptrBuffer, u32 lenToRead ,u32 *actualReadlen)
102c9b94:	e28c6078 	add	r6, ip, #120	; 0x78
102c9b98:	ea000001 	b	102c9ba4 <RIL_BT_SPP_Read+0x2c>
    return 0;
}
s32 BT_DevMngmt_GetConnId(const u32 hdl)
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c9b9c:	e15c0006 	cmp	ip, r6
102c9ba0:	0a00001d 	beq	102c9c1c <RIL_BT_SPP_Read+0xa4>
    {
        if (hdl == m_arrBTDev[i]->btDevice.devHdl)
102c9ba4:	e5bc4004 	ldr	r4, [ip, #4]!
102c9ba8:	e5945000 	ldr	r5, [r4]
102c9bac:	e1500005 	cmp	r0, r5
102c9bb0:	1afffff9 	bne	102c9b9c <RIL_BT_SPP_Read+0x24>
        {
            return m_arrBTDev[i]->connId;
102c9bb4:	e5942054 	ldr	r2, [r4, #84]	; 0x54
    }
    
    connId = BT_DevMngmt_GetConnId(hdlDevice);

    
    if(-1 == connId)
102c9bb8:	e3720001 	cmn	r2, #1
102c9bbc:	0a000018 	beq	102c9c24 <RIL_BT_SPP_Read+0xac>
    {
       return RIL_AT_INVALID_PARAM;
    }
    
    m_ptrSppDataBuf = ptrBuffer;
102c9bc0:	e59fc068 	ldr	ip, [pc, #104]	; 102c9c30 <RIL_BT_SPP_Read+0xb8>
    m_nSppDataLenToRd = lenToRead;
    m_nSppRealReadLen = 0;
    Ql_sprintf(strAT, "AT+QSPPREAD=%d,%d", connId, lenToRead);
102c9bc4:	e59f0068 	ldr	r0, [pc, #104]	; 102c9c34 <RIL_BT_SPP_Read+0xbc>
       return RIL_AT_INVALID_PARAM;
    }
    
    m_ptrSppDataBuf = ptrBuffer;
    m_nSppDataLenToRd = lenToRead;
    m_nSppRealReadLen = 0;
102c9bc8:	e3a04000 	mov	r4, #0
    Ql_sprintf(strAT, "AT+QSPPREAD=%d,%d", connId, lenToRead);
102c9bcc:	e59f1064 	ldr	r1, [pc, #100]	; 102c9c38 <RIL_BT_SPP_Read+0xc0>
       return RIL_AT_INVALID_PARAM;
    }
    
    m_ptrSppDataBuf = ptrBuffer;
    m_nSppDataLenToRd = lenToRead;
    m_nSppRealReadLen = 0;
102c9bd0:	e58c4080 	str	r4, [ip, #128]	; 0x80
    Ql_sprintf(strAT, "AT+QSPPREAD=%d,%d", connId, lenToRead);
102c9bd4:	e1a03007 	mov	r3, r7
102c9bd8:	e5905000 	ldr	r5, [r0]
102c9bdc:	e28d000c 	add	r0, sp, #12
    if(-1 == connId)
    {
       return RIL_AT_INVALID_PARAM;
    }
    
    m_ptrSppDataBuf = ptrBuffer;
102c9be0:	e58ca07c 	str	sl, [ip, #124]	; 0x7c
    m_nSppDataLenToRd = lenToRead;
102c9be4:	e58c7094 	str	r7, [ip, #148]	; 0x94
    m_nSppRealReadLen = 0;
    Ql_sprintf(strAT, "AT+QSPPREAD=%d,%d", connId, lenToRead);
102c9be8:	e12fff35 	blx	r5
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), ATRsp_QBTSPPREAD_Hdlr, (void *)actualReadlen, 0);
102c9bec:	e59f3048 	ldr	r3, [pc, #72]	; 102c9c3c <RIL_BT_SPP_Read+0xc4>
102c9bf0:	e28d000c 	add	r0, sp, #12
102c9bf4:	e12fff33 	blx	r3
102c9bf8:	e58d4000 	str	r4, [sp]
102c9bfc:	e59f203c 	ldr	r2, [pc, #60]	; 102c9c40 <RIL_BT_SPP_Read+0xc8>
102c9c00:	e1a03008 	mov	r3, r8
102c9c04:	e59fc038 	ldr	ip, [pc, #56]	; 102c9c44 <RIL_BT_SPP_Read+0xcc>
102c9c08:	e1a01000 	mov	r1, r0
102c9c0c:	e28d000c 	add	r0, sp, #12
102c9c10:	e12fff3c 	blx	ip
}
102c9c14:	e28dd024 	add	sp, sp, #36	; 0x24
102c9c18:	e8bd85f0 	pop	{r4, r5, r6, r7, r8, sl, pc}
        if (hdl == m_arrBTDev[i]->btDevice.devHdl)
        {
            return m_arrBTDev[i]->connId;
        }
    }
    return 0;
102c9c1c:	e3a02000 	mov	r2, #0
102c9c20:	eaffffe6 	b	102c9bc0 <RIL_BT_SPP_Read+0x48>
    char strAT[20];
    s32  connId;

    if(NULL == ptrBuffer || lenToRead < 0)
    {
        return RIL_AT_INVALID_PARAM;
102c9c24:	e3e00003 	mvn	r0, #3
102c9c28:	eafffff9 	b	102c9c14 <RIL_BT_SPP_Read+0x9c>
102c9c2c:	f03d2054 	.word	0xf03d2054
102c9c30:	f03d2058 	.word	0xf03d2058
102c9c34:	f03d31e8 	.word	0xf03d31e8
102c9c38:	102cef68 	.word	0x102cef68
102c9c3c:	102cd560 	.word	0x102cd560
102c9c40:	102c76ac 	.word	0x102c76ac
102c9c44:	102cd11c 	.word	0x102cd11c

102c9c48 <OnURCHandler_BTIndication>:




void OnURCHandler_BTIndication(const char* strURC, void* reserved)
{
102c9c48:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    // +QBTIND: "pair",H60-L01,F4E3FBE47920,760429
    // +QBTIND: "conn","H60-L01",F4E3FBE47920,"SPP"
    // +QBTIND: "disc",2,"H60-L01",F4E3FBE47920,"SPP"
    char urcHead[30];
    char urcType[10];
    char pinCode[BT_PIN_LEN]={0};
102c9c4c:	e3a04000 	mov	r4, #0




void OnURCHandler_BTIndication(const char* strURC, void* reserved)
{
102c9c50:	e24dd0a8 	sub	sp, sp, #168	; 0xa8
    ST_BT_BasicInfo bt_dev;
    s32 connId;
    char temp[30]={0};
	

    Ql_memset(&bt_dev,  0x0, sizeof(ST_BT_BasicInfo));
102c9c54:	e1a01004 	mov	r1, r4
102c9c58:	e3a0204c 	mov	r2, #76	; 0x4c
102c9c5c:	e59f533c 	ldr	r5, [pc, #828]	; 102c9fa0 <OnURCHandler_BTIndication+0x358>




void OnURCHandler_BTIndication(const char* strURC, void* reserved)
{
102c9c60:	e1a06000 	mov	r6, r0
	

    Ql_memset(&bt_dev,  0x0, sizeof(ST_BT_BasicInfo));
    Ql_memset(urcType,  0x0, sizeof(urcType));

	if(callback_bt == NULL)
102c9c64:	e59f7338 	ldr	r7, [pc, #824]	; 102c9fa4 <OnURCHandler_BTIndication+0x35c>
    ST_BT_BasicInfo bt_dev;
    s32 connId;
    char temp[30]={0};
	

    Ql_memset(&bt_dev,  0x0, sizeof(ST_BT_BasicInfo));
102c9c68:	e28d005c 	add	r0, sp, #92	; 0x5c
    // +QBTIND: "pair",H60-L01,F4E3FBE47920,760429
    // +QBTIND: "conn","H60-L01",F4E3FBE47920,"SPP"
    // +QBTIND: "disc",2,"H60-L01",F4E3FBE47920,"SPP"
    char urcHead[30];
    char urcType[10];
    char pinCode[BT_PIN_LEN]={0};
102c9c6c:	e58d4008 	str	r4, [sp, #8]
102c9c70:	e1cd40bc 	strh	r4, [sp, #12]
102c9c74:	e5cd400e 	strb	r4, [sp, #14]
    ST_BT_BasicInfo bt_dev;
    s32 connId;
    char temp[30]={0};
102c9c78:	e58d403c 	str	r4, [sp, #60]	; 0x3c
102c9c7c:	e58d4040 	str	r4, [sp, #64]	; 0x40
102c9c80:	e58d4044 	str	r4, [sp, #68]	; 0x44
102c9c84:	e58d4048 	str	r4, [sp, #72]	; 0x48
102c9c88:	e58d404c 	str	r4, [sp, #76]	; 0x4c
102c9c8c:	e58d4050 	str	r4, [sp, #80]	; 0x50
102c9c90:	e58d4054 	str	r4, [sp, #84]	; 0x54
102c9c94:	e1cd45b8 	strh	r4, [sp, #88]	; 0x58
	

    Ql_memset(&bt_dev,  0x0, sizeof(ST_BT_BasicInfo));
102c9c98:	e12fff35 	blx	r5
    Ql_memset(urcType,  0x0, sizeof(urcType));
102c9c9c:	e28d0010 	add	r0, sp, #16
102c9ca0:	e1a01004 	mov	r1, r4
102c9ca4:	e3a0200a 	mov	r2, #10
102c9ca8:	e12fff35 	blx	r5

	if(callback_bt == NULL)
102c9cac:	e5973090 	ldr	r3, [r7, #144]	; 0x90
102c9cb0:	e1530004 	cmp	r3, r4
102c9cb4:	0a000009 	beq	102c9ce0 <OnURCHandler_BTIndication+0x98>
    {
       return;
	}


    Ql_strcpy(urcHead, "\r\n+QBTIND:\0");
102c9cb8:	e59f12e8 	ldr	r1, [pc, #744]	; 102c9fa8 <OnURCHandler_BTIndication+0x360>
102c9cbc:	e59f32e8 	ldr	r3, [pc, #744]	; 102c9fac <OnURCHandler_BTIndication+0x364>
102c9cc0:	e28d001c 	add	r0, sp, #28
102c9cc4:	e12fff33 	blx	r3
    if (Ql_StrPrefixMatch(strURC, urcHead))
102c9cc8:	e1a00006 	mov	r0, r6
102c9ccc:	e28d101c 	add	r1, sp, #28
102c9cd0:	e59f32d8 	ldr	r3, [pc, #728]	; 102c9fb0 <OnURCHandler_BTIndication+0x368>
102c9cd4:	e12fff33 	blx	r3
102c9cd8:	e1500004 	cmp	r0, r4
102c9cdc:	1a000001 	bne	102c9ce8 <OnURCHandler_BTIndication+0xa0>
            callback_bt(MSG_BT_RECV_IND, URC_BT_DATA_RECIEVE, &connId, &bt_dev);
        }
    }else{
        // error
    }
}
102c9ce0:	e28dd0a8 	add	sp, sp, #168	; 0xa8
102c9ce4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

    Ql_strcpy(urcHead, "\r\n+QBTIND:\0");
    if (Ql_StrPrefixMatch(strURC, urcHead))
    {
        // +QBTIND: "pair",H60-L01,F4E3FBE47920,760429
        Ql_sscanf(strURC, "%*[^\"]\"%[^\"]%*[^\r\n]\r\n", urcType);
102c9ce8:	e59f42c4 	ldr	r4, [pc, #708]	; 102c9fb4 <OnURCHandler_BTIndication+0x36c>
102c9cec:	e59f12c4 	ldr	r1, [pc, #708]	; 102c9fb8 <OnURCHandler_BTIndication+0x370>
102c9cf0:	e28d2010 	add	r2, sp, #16
102c9cf4:	e5943000 	ldr	r3, [r4]
102c9cf8:	e1a00006 	mov	r0, r6
102c9cfc:	e12fff33 	blx	r3
        if (Ql_strcmp(urcType, "pair") == 0)
102c9d00:	e59f52b4 	ldr	r5, [pc, #692]	; 102c9fbc <OnURCHandler_BTIndication+0x374>
102c9d04:	e28d0010 	add	r0, sp, #16
102c9d08:	e59f12b0 	ldr	r1, [pc, #688]	; 102c9fc0 <OnURCHandler_BTIndication+0x378>
102c9d0c:	e12fff35 	blx	r5
102c9d10:	e2508000 	subs	r8, r0, #0
102c9d14:	1a000021 	bne	102c9da0 <OnURCHandler_BTIndication+0x158>
        {
            Ql_sscanf(strURC, "%*[^,],%*[^,],%[^\r\n]\r\n", temp);
102c9d18:	e28d203c 	add	r2, sp, #60	; 0x3c
102c9d1c:	e5943000 	ldr	r3, [r4]
102c9d20:	e59f129c 	ldr	r1, [pc, #668]	; 102c9fc4 <OnURCHandler_BTIndication+0x37c>
102c9d24:	e1a00006 	mov	r0, r6
102c9d28:	e12fff33 	blx	r3
            if(Ql_strlen(temp) == (BT_ADDR_LEN - 1))
102c9d2c:	e59f5294 	ldr	r5, [pc, #660]	; 102c9fc8 <OnURCHandler_BTIndication+0x380>
102c9d30:	e28d003c 	add	r0, sp, #60	; 0x3c
102c9d34:	e12fff35 	blx	r5
            {
                 Ql_sscanf(strURC, "%*[^,],%*[^,],%[^\r\n]\r\n", bt_dev.addr);
102c9d38:	e28d2098 	add	r2, sp, #152	; 0x98
102c9d3c:	e5943000 	ldr	r3, [r4]
        // +QBTIND: "pair",H60-L01,F4E3FBE47920,760429
        Ql_sscanf(strURC, "%*[^\"]\"%[^\"]%*[^\r\n]\r\n", urcType);
        if (Ql_strcmp(urcType, "pair") == 0)
        {
            Ql_sscanf(strURC, "%*[^,],%*[^,],%[^\r\n]\r\n", temp);
            if(Ql_strlen(temp) == (BT_ADDR_LEN - 1))
102c9d40:	e350000c 	cmp	r0, #12
            {
                 Ql_sscanf(strURC, "%*[^,],%*[^,],%[^\r\n]\r\n", bt_dev.addr);
102c9d44:	e1a00006 	mov	r0, r6
        // +QBTIND: "pair",H60-L01,F4E3FBE47920,760429
        Ql_sscanf(strURC, "%*[^\"]\"%[^\"]%*[^\r\n]\r\n", urcType);
        if (Ql_strcmp(urcType, "pair") == 0)
        {
            Ql_sscanf(strURC, "%*[^,],%*[^,],%[^\r\n]\r\n", temp);
            if(Ql_strlen(temp) == (BT_ADDR_LEN - 1))
102c9d48:	0a000082 	beq	102c9f58 <OnURCHandler_BTIndication+0x310>
                 bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr));
                 callback_bt(MSG_BT_PAIR_REQ, URC_BT_NEED_PASSKEY, &bt_dev, NULL); // need paaskey
            }
            else
            {
                Ql_sscanf(strURC, "%*[^,],%*[^,],%[^,]%*[^\r\n]\r\n",bt_dev.addr);
102c9d4c:	e59f1278 	ldr	r1, [pc, #632]	; 102c9fcc <OnURCHandler_BTIndication+0x384>
102c9d50:	e12fff33 	blx	r3
                Ql_sscanf(strURC, "%*[^,],%*[^,],%*[^,],%[^\r\n]\r\n",pinCode);
102c9d54:	e28d2008 	add	r2, sp, #8
102c9d58:	e5943000 	ldr	r3, [r4]
102c9d5c:	e59f126c 	ldr	r1, [pc, #620]	; 102c9fd0 <OnURCHandler_BTIndication+0x388>
102c9d60:	e1a00006 	mov	r0, r6
102c9d64:	e12fff33 	blx	r3
                bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr));
102c9d68:	e28d0098 	add	r0, sp, #152	; 0x98
102c9d6c:	e12fff35 	blx	r5
102c9d70:	e59f325c 	ldr	r3, [pc, #604]	; 102c9fd4 <OnURCHandler_BTIndication+0x38c>
102c9d74:	e1a01000 	mov	r1, r0
102c9d78:	e28d0098 	add	r0, sp, #152	; 0x98
102c9d7c:	e12fff33 	blx	r3
                callback_bt(MSG_BT_PAIR_REQ, URC_BT_NO_NEED_PASSKEY, &bt_dev, pinCode); //direct confirm
102c9d80:	e597c090 	ldr	ip, [r7, #144]	; 0x90
102c9d84:	e28d205c 	add	r2, sp, #92	; 0x5c
102c9d88:	e28d3008 	add	r3, sp, #8
            }
            else
            {
                Ql_sscanf(strURC, "%*[^,],%*[^,],%[^,]%*[^\r\n]\r\n",bt_dev.addr);
                Ql_sscanf(strURC, "%*[^,],%*[^,],%*[^,],%[^\r\n]\r\n",pinCode);
                bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr));
102c9d8c:	e58d005c 	str	r0, [sp, #92]	; 0x5c
                callback_bt(MSG_BT_PAIR_REQ, URC_BT_NO_NEED_PASSKEY, &bt_dev, pinCode); //direct confirm
102c9d90:	e3a00005 	mov	r0, #5
102c9d94:	e1a01000 	mov	r1, r0
102c9d98:	e12fff3c 	blx	ip
102c9d9c:	eaffffcf 	b	102c9ce0 <OnURCHandler_BTIndication+0x98>
            }   
        }
        else if (Ql_strcmp(urcType, "conn") == 0)
102c9da0:	e28d0010 	add	r0, sp, #16
102c9da4:	e59f122c 	ldr	r1, [pc, #556]	; 102c9fd8 <OnURCHandler_BTIndication+0x390>
102c9da8:	e12fff35 	blx	r5
102c9dac:	e2508000 	subs	r8, r0, #0
102c9db0:	1a000018 	bne	102c9e18 <OnURCHandler_BTIndication+0x1d0>
        {
            // +QBTIND: "conn","H60-L01",F4E3FBE47920,"SPP"
           Ql_sscanf(strURC, "%*[^,],\"%[^\"]%*[^\r\n]\r\n",bt_dev.name);
102c9db4:	e28d2060 	add	r2, sp, #96	; 0x60
102c9db8:	e5943000 	ldr	r3, [r4]
102c9dbc:	e1a00006 	mov	r0, r6
102c9dc0:	e59f1214 	ldr	r1, [pc, #532]	; 102c9fdc <OnURCHandler_BTIndication+0x394>
102c9dc4:	e12fff33 	blx	r3
           Ql_sscanf(strURC, "%*[^,],%*[^,],%[^,]%*[^\r\n]\r\n",bt_dev.addr);
102c9dc8:	e28d2098 	add	r2, sp, #152	; 0x98
102c9dcc:	e5943000 	ldr	r3, [r4]
102c9dd0:	e59f11f4 	ldr	r1, [pc, #500]	; 102c9fcc <OnURCHandler_BTIndication+0x384>
102c9dd4:	e1a00006 	mov	r0, r6
102c9dd8:	e12fff33 	blx	r3
           bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr));
102c9ddc:	e28d0098 	add	r0, sp, #152	; 0x98
102c9de0:	e59f31e0 	ldr	r3, [pc, #480]	; 102c9fc8 <OnURCHandler_BTIndication+0x380>
102c9de4:	e12fff33 	blx	r3
102c9de8:	e59f31e4 	ldr	r3, [pc, #484]	; 102c9fd4 <OnURCHandler_BTIndication+0x38c>
102c9dec:	e1a01000 	mov	r1, r0
102c9df0:	e28d0098 	add	r0, sp, #152	; 0x98
102c9df4:	e12fff33 	blx	r3
           callback_bt(MSG_BT_CONN_REQ,URC_BT_CONN_REQ ,&bt_dev, NULL);
102c9df8:	e597c090 	ldr	ip, [r7, #144]	; 0x90
102c9dfc:	e3a0100a 	mov	r1, #10
102c9e00:	e28d205c 	add	r2, sp, #92	; 0x5c
102c9e04:	e1a03008 	mov	r3, r8
        else if (Ql_strcmp(urcType, "conn") == 0)
        {
            // +QBTIND: "conn","H60-L01",F4E3FBE47920,"SPP"
           Ql_sscanf(strURC, "%*[^,],\"%[^\"]%*[^\r\n]\r\n",bt_dev.name);
           Ql_sscanf(strURC, "%*[^,],%*[^,],%[^,]%*[^\r\n]\r\n",bt_dev.addr);
           bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr));
102c9e08:	e58d005c 	str	r0, [sp, #92]	; 0x5c
           callback_bt(MSG_BT_CONN_REQ,URC_BT_CONN_REQ ,&bt_dev, NULL);
102c9e0c:	e3a00006 	mov	r0, #6
102c9e10:	e12fff3c 	blx	ip
102c9e14:	eaffffb1 	b	102c9ce0 <OnURCHandler_BTIndication+0x98>
        }
        else if (Ql_strcmp(urcType, "disc") == 0)
102c9e18:	e28d0010 	add	r0, sp, #16
102c9e1c:	e59f11bc 	ldr	r1, [pc, #444]	; 102c9fe0 <OnURCHandler_BTIndication+0x398>
102c9e20:	e12fff35 	blx	r5
102c9e24:	e3500000 	cmp	r0, #0
102c9e28:	0a00001c 	beq	102c9ea0 <OnURCHandler_BTIndication+0x258>
            Ql_sscanf(strURC, "%*[^,],%*[^\"]\"%[^\"]%*[^\r\n]\r\n",bt_dev.name);
            bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr));
            BT_DevMngmt_UpdateConnId(bt_dev.devHdl, -1);
            BT_DevMngmt_UpdateProfileId(bt_dev.devHdl, -1);
            callback_bt(MSG_BT_DISCONN_IND, URC_BT_DISCONNECT_PASSIVE, &bt_dev, NULL);
        }else if (Ql_strcmp(urcType, "recv") == 0)
102c9e2c:	e28d0010 	add	r0, sp, #16
102c9e30:	e59f11ac 	ldr	r1, [pc, #428]	; 102c9fe4 <OnURCHandler_BTIndication+0x39c>
102c9e34:	e12fff35 	blx	r5
102c9e38:	e3500000 	cmp	r0, #0
102c9e3c:	1affffa7 	bne	102c9ce0 <OnURCHandler_BTIndication+0x98>
        {

            Ql_sscanf(strURC, "%*[^,],%d\r\n",&connId);
102c9e40:	e5943000 	ldr	r3, [r4]
102c9e44:	e1a00006 	mov	r0, r6
102c9e48:	e59f1198 	ldr	r1, [pc, #408]	; 102c9fe8 <OnURCHandler_BTIndication+0x3a0>
102c9e4c:	e28d2004 	add	r2, sp, #4
102c9e50:	e12fff33 	blx	r3
            bt_dev.devHdl = BT_DevMngmt_GetDevHdl(connId);
102c9e54:	e59d0004 	ldr	r0, [sp, #4]
102c9e58:	e2473004 	sub	r3, r7, #4
}




void OnURCHandler_BTIndication(const char* strURC, void* reserved)
102c9e5c:	e287c074 	add	ip, r7, #116	; 0x74
102c9e60:	ea000001 	b	102c9e6c <OnURCHandler_BTIndication+0x224>


static BT_DEV_HDL BT_DevMngmt_GetDevHdl(const s32 connId)
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c9e64:	e153000c 	cmp	r3, ip
102c9e68:	0a00004a 	beq	102c9f98 <OnURCHandler_BTIndication+0x350>
    {
        if (connId == m_arrBTDev[i]->connId)
102c9e6c:	e5b32004 	ldr	r2, [r3, #4]!
102c9e70:	e5921054 	ldr	r1, [r2, #84]	; 0x54
102c9e74:	e1500001 	cmp	r0, r1
102c9e78:	1afffff9 	bne	102c9e64 <OnURCHandler_BTIndication+0x21c>
        {
            return m_arrBTDev[i]->btDevice.devHdl;
102c9e7c:	e5923000 	ldr	r3, [r2]
        }else if (Ql_strcmp(urcType, "recv") == 0)
        {

            Ql_sscanf(strURC, "%*[^,],%d\r\n",&connId);
            bt_dev.devHdl = BT_DevMngmt_GetDevHdl(connId);
            callback_bt(MSG_BT_RECV_IND, URC_BT_DATA_RECIEVE, &connId, &bt_dev);
102c9e80:	e3a00004 	mov	r0, #4
            callback_bt(MSG_BT_DISCONN_IND, URC_BT_DISCONNECT_PASSIVE, &bt_dev, NULL);
        }else if (Ql_strcmp(urcType, "recv") == 0)
        {

            Ql_sscanf(strURC, "%*[^,],%d\r\n",&connId);
            bt_dev.devHdl = BT_DevMngmt_GetDevHdl(connId);
102c9e84:	e58d305c 	str	r3, [sp, #92]	; 0x5c
            callback_bt(MSG_BT_RECV_IND, URC_BT_DATA_RECIEVE, &connId, &bt_dev);
102c9e88:	e597c090 	ldr	ip, [r7, #144]	; 0x90
102c9e8c:	e3a0100d 	mov	r1, #13
102c9e90:	e08d2000 	add	r2, sp, r0
102c9e94:	e28d305c 	add	r3, sp, #92	; 0x5c
102c9e98:	e12fff3c 	blx	ip
102c9e9c:	eaffff8f 	b	102c9ce0 <OnURCHandler_BTIndication+0x98>
           callback_bt(MSG_BT_CONN_REQ,URC_BT_CONN_REQ ,&bt_dev, NULL);
        }
        else if (Ql_strcmp(urcType, "disc") == 0)
        {
            // +QBTIND: "disc",2,2,"H60-L01",F4E3FBE47920,"SPP"
            Ql_sscanf(strURC, "%*[^,],%*[^\"]\"%*[^,],%[^,]%*[^\r\n]\r\n",bt_dev.addr);
102c9ea0:	e59f1144 	ldr	r1, [pc, #324]	; 102c9fec <OnURCHandler_BTIndication+0x3a4>
102c9ea4:	e28d2098 	add	r2, sp, #152	; 0x98
102c9ea8:	e5943000 	ldr	r3, [r4]
102c9eac:	e1a00006 	mov	r0, r6
102c9eb0:	e12fff33 	blx	r3
            Ql_sscanf(strURC, "%*[^,],%*[^\"]\"%[^\"]%*[^\r\n]\r\n",bt_dev.name);
102c9eb4:	e28d2060 	add	r2, sp, #96	; 0x60
102c9eb8:	e59f1130 	ldr	r1, [pc, #304]	; 102c9ff0 <OnURCHandler_BTIndication+0x3a8>
102c9ebc:	e5943000 	ldr	r3, [r4]
102c9ec0:	e1a00006 	mov	r0, r6
102c9ec4:	e12fff33 	blx	r3
            bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr));
102c9ec8:	e59f30f8 	ldr	r3, [pc, #248]	; 102c9fc8 <OnURCHandler_BTIndication+0x380>
102c9ecc:	e28d0098 	add	r0, sp, #152	; 0x98
102c9ed0:	e12fff33 	blx	r3
102c9ed4:	e59f30f8 	ldr	r3, [pc, #248]	; 102c9fd4 <OnURCHandler_BTIndication+0x38c>
102c9ed8:	e1a01000 	mov	r1, r0
102c9edc:	e28d0098 	add	r0, sp, #152	; 0x98
102c9ee0:	e12fff33 	blx	r3
102c9ee4:	e2473004 	sub	r3, r7, #4
}




void OnURCHandler_BTIndication(const char* strURC, void* reserved)
102c9ee8:	e287e074 	add	lr, r7, #116	; 0x74
102c9eec:	e1a02003 	mov	r2, r3
        else if (Ql_strcmp(urcType, "disc") == 0)
        {
            // +QBTIND: "disc",2,2,"H60-L01",F4E3FBE47920,"SPP"
            Ql_sscanf(strURC, "%*[^,],%*[^\"]\"%*[^,],%[^,]%*[^\r\n]\r\n",bt_dev.addr);
            Ql_sscanf(strURC, "%*[^,],%*[^\"]\"%[^\"]%*[^\r\n]\r\n",bt_dev.name);
            bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr));
102c9ef0:	e58d005c 	str	r0, [sp, #92]	; 0x5c
102c9ef4:	ea000001 	b	102c9f00 <OnURCHandler_BTIndication+0x2b8>
//
// Update connect id
static void BT_DevMngmt_UpdateConnId(const u32 hdl, const s32 connId)
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c9ef8:	e152000e 	cmp	r2, lr
102c9efc:	0a000008 	beq	102c9f24 <OnURCHandler_BTIndication+0x2dc>
    {
        if (hdl == m_arrBTDev[i]->btDevice.devHdl)
102c9f00:	e5b21004 	ldr	r1, [r2, #4]!
102c9f04:	e591c000 	ldr	ip, [r1]
102c9f08:	e150000c 	cmp	r0, ip
102c9f0c:	1afffff9 	bne	102c9ef8 <OnURCHandler_BTIndication+0x2b0>
        {
            m_arrBTDev[i]->connId= connId;
102c9f10:	e3e02000 	mvn	r2, #0
102c9f14:	e5812054 	str	r2, [r1, #84]	; 0x54
102c9f18:	ea000001 	b	102c9f24 <OnURCHandler_BTIndication+0x2dc>
}

static void BT_DevMngmt_UpdateProfileId(const u32 hdl, const s32 profileId)
{
    u16 i;
    for (i = 0; i < MAX_BT_DEV_CNT; i++)
102c9f1c:	e153000e 	cmp	r3, lr
102c9f20:	0a000005 	beq	102c9f3c <OnURCHandler_BTIndication+0x2f4>
    {
        if (hdl == m_arrBTDev[i]->btDevice.devHdl)
102c9f24:	e5b32004 	ldr	r2, [r3, #4]!
102c9f28:	e5921000 	ldr	r1, [r2]
102c9f2c:	e1500001 	cmp	r0, r1
102c9f30:	1afffff9 	bne	102c9f1c <OnURCHandler_BTIndication+0x2d4>
        {
            m_arrBTDev[i]->profileId= profileId;
102c9f34:	e3e03000 	mvn	r3, #0
102c9f38:	e5823058 	str	r3, [r2, #88]	; 0x58
            Ql_sscanf(strURC, "%*[^,],%*[^\"]\"%*[^,],%[^,]%*[^\r\n]\r\n",bt_dev.addr);
            Ql_sscanf(strURC, "%*[^,],%*[^\"]\"%[^\"]%*[^\r\n]\r\n",bt_dev.name);
            bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr));
            BT_DevMngmt_UpdateConnId(bt_dev.devHdl, -1);
            BT_DevMngmt_UpdateProfileId(bt_dev.devHdl, -1);
            callback_bt(MSG_BT_DISCONN_IND, URC_BT_DISCONNECT_PASSIVE, &bt_dev, NULL);
102c9f3c:	e597c090 	ldr	ip, [r7, #144]	; 0x90
102c9f40:	e3a00007 	mov	r0, #7
102c9f44:	e3a0100b 	mov	r1, #11
102c9f48:	e28d205c 	add	r2, sp, #92	; 0x5c
102c9f4c:	e3a03000 	mov	r3, #0
102c9f50:	e12fff3c 	blx	ip
102c9f54:	eaffff61 	b	102c9ce0 <OnURCHandler_BTIndication+0x98>
        if (Ql_strcmp(urcType, "pair") == 0)
        {
            Ql_sscanf(strURC, "%*[^,],%*[^,],%[^\r\n]\r\n", temp);
            if(Ql_strlen(temp) == (BT_ADDR_LEN - 1))
            {
                 Ql_sscanf(strURC, "%*[^,],%*[^,],%[^\r\n]\r\n", bt_dev.addr);
102c9f58:	e59f1064 	ldr	r1, [pc, #100]	; 102c9fc4 <OnURCHandler_BTIndication+0x37c>
102c9f5c:	e12fff33 	blx	r3
                 bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr));
102c9f60:	e28d0098 	add	r0, sp, #152	; 0x98
102c9f64:	e12fff35 	blx	r5
102c9f68:	e59f3064 	ldr	r3, [pc, #100]	; 102c9fd4 <OnURCHandler_BTIndication+0x38c>
102c9f6c:	e1a01000 	mov	r1, r0
102c9f70:	e28d0098 	add	r0, sp, #152	; 0x98
102c9f74:	e12fff33 	blx	r3
                 callback_bt(MSG_BT_PAIR_REQ, URC_BT_NEED_PASSKEY, &bt_dev, NULL); // need paaskey
102c9f78:	e597c090 	ldr	ip, [r7, #144]	; 0x90
102c9f7c:	e3a01004 	mov	r1, #4
102c9f80:	e28d205c 	add	r2, sp, #92	; 0x5c
102c9f84:	e1a03008 	mov	r3, r8
        {
            Ql_sscanf(strURC, "%*[^,],%*[^,],%[^\r\n]\r\n", temp);
            if(Ql_strlen(temp) == (BT_ADDR_LEN - 1))
            {
                 Ql_sscanf(strURC, "%*[^,],%*[^,],%[^\r\n]\r\n", bt_dev.addr);
                 bt_dev.devHdl = Ql_GenHash(bt_dev.addr, Ql_strlen(bt_dev.addr));
102c9f88:	e58d005c 	str	r0, [sp, #92]	; 0x5c
                 callback_bt(MSG_BT_PAIR_REQ, URC_BT_NEED_PASSKEY, &bt_dev, NULL); // need paaskey
102c9f8c:	e3a00005 	mov	r0, #5
102c9f90:	e12fff3c 	blx	ip
102c9f94:	eaffff51 	b	102c9ce0 <OnURCHandler_BTIndication+0x98>
        if (connId == m_arrBTDev[i]->connId)
        {
            return m_arrBTDev[i]->btDevice.devHdl;
        }
    }
    return 0;
102c9f98:	e3a03000 	mov	r3, #0
102c9f9c:	eaffffb7 	b	102c9e80 <OnURCHandler_BTIndication+0x238>
102c9fa0:	102cd6b0 	.word	0x102cd6b0
102c9fa4:	f03d2058 	.word	0xf03d2058
102c9fa8:	102ce174 	.word	0x102ce174
102c9fac:	102cd438 	.word	0x102cd438
102c9fb0:	102cbda0 	.word	0x102cbda0
102c9fb4:	f03d31f0 	.word	0xf03d31f0
102c9fb8:	102cebdc 	.word	0x102cebdc
102c9fbc:	102cd5d8 	.word	0x102cd5d8
102c9fc0:	102cef7c 	.word	0x102cef7c
102c9fc4:	102ced18 	.word	0x102ced18
102c9fc8:	102cd560 	.word	0x102cd560
102c9fcc:	102cef84 	.word	0x102cef84
102c9fd0:	102cefa4 	.word	0x102cefa4
102c9fd4:	102cc1ec 	.word	0x102cc1ec
102c9fd8:	102cefc4 	.word	0x102cefc4
102c9fdc:	102cefcc 	.word	0x102cefcc
102c9fe0:	102cefe4 	.word	0x102cefe4
102c9fe4:	102cf030 	.word	0x102cf030
102c9fe8:	102cf038 	.word	0x102cf038
102c9fec:	102cefec 	.word	0x102cefec
102c9ff0:	102cf010 	.word	0x102cf010

102c9ff4 <Ql_RIL_RcvDataFrmCore>:
*               None.     
*
*****************************************************************/
CB_RIL_RcvDataFrmCore cb_rcvCoreData = NULL;
void Ql_RIL_RcvDataFrmCore(u8* ptrData, u32 dataLen, void* reserved)
{
102c9ff4:	e92d4008 	push	{r3, lr}
    if (cb_rcvCoreData != NULL)
102c9ff8:	e59f3010 	ldr	r3, [pc, #16]	; 102ca010 <Ql_RIL_RcvDataFrmCore+0x1c>
102c9ffc:	e5933000 	ldr	r3, [r3]
102ca000:	e3530000 	cmp	r3, #0
102ca004:	08bd8008 	popeq	{r3, pc}
    {
        cb_rcvCoreData(ptrData, dataLen, reserved);
102ca008:	e12fff33 	blx	r3
102ca00c:	e8bd8008 	pop	{r3, pc}
102ca010:	f03d20f0 	.word	0xf03d20f0

102ca014 <ATResponse_Handler>:
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*                                      and then call Ql_RIL_Initialize to initialize RIL.               
*****************************************************************/
static s32 ATResponse_Handler(char* line, u32 len, void* userData)
{
102ca014:	e92d4070 	push	{r4, r5, r6, lr}
    // get TONEDET threshold
    if ( Ql_strstr(line, "+QTONEDET:") )
102ca018:	e59f30c4 	ldr	r3, [pc, #196]	; 102ca0e4 <ATResponse_Handler+0xd0>
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*                                      and then call Ql_RIL_Initialize to initialize RIL.               
*****************************************************************/
static s32 ATResponse_Handler(char* line, u32 len, void* userData)
{
102ca01c:	e1a05001 	mov	r5, r1
    // get TONEDET threshold
    if ( Ql_strstr(line, "+QTONEDET:") )
102ca020:	e59f10c0 	ldr	r1, [pc, #192]	; 102ca0e8 <ATResponse_Handler+0xd4>
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*                                      and then call Ql_RIL_Initialize to initialize RIL.               
*****************************************************************/
static s32 ATResponse_Handler(char* line, u32 len, void* userData)
{
102ca024:	e1a04000 	mov	r4, r0
    // get TONEDET threshold
    if ( Ql_strstr(line, "+QTONEDET:") )
102ca028:	e12fff33 	blx	r3
102ca02c:	e3500000 	cmp	r0, #0
102ca030:	0a00000b 	beq	102ca064 <ATResponse_Handler+0x50>
    {
        if ( NULL != g_low_thresholdPtr && NULL != g_high_thresholdPtr )
102ca034:	e59f30b0 	ldr	r3, [pc, #176]	; 102ca0ec <ATResponse_Handler+0xd8>
102ca038:	e5932000 	ldr	r2, [r3]
102ca03c:	e3520000 	cmp	r2, #0
102ca040:	0a000007 	beq	102ca064 <ATResponse_Handler+0x50>
102ca044:	e5933004 	ldr	r3, [r3, #4]
102ca048:	e3530000 	cmp	r3, #0
102ca04c:	0a000004 	beq	102ca064 <ATResponse_Handler+0x50>
        {
            Ql_sscanf( line, "%*[^,],%*[^,],%d,%d", g_low_thresholdPtr, g_high_thresholdPtr );
102ca050:	e59f1098 	ldr	r1, [pc, #152]	; 102ca0f0 <ATResponse_Handler+0xdc>
102ca054:	e1a00004 	mov	r0, r4
102ca058:	e591c000 	ldr	ip, [r1]
102ca05c:	e59f1090 	ldr	r1, [pc, #144]	; 102ca0f4 <ATResponse_Handler+0xe0>
102ca060:	e12fff3c 	blx	ip
            RIL_DTMF_DEBUG( DBG_Buffer, "<-- ATResponse_Handler: low=%d, high=%d -->\r\n", *g_low_thresholdPtr, *g_high_thresholdPtr );
        }
    }
    
    
    if (Ql_RIL_FindLine(line, len, "OK"))
102ca064:	e1a00004 	mov	r0, r4
102ca068:	e1a01005 	mov	r1, r5
102ca06c:	e59f2084 	ldr	r2, [pc, #132]	; 102ca0f8 <ATResponse_Handler+0xe4>
102ca070:	e59f6084 	ldr	r6, [pc, #132]	; 102ca0fc <ATResponse_Handler+0xe8>
102ca074:	e12fff36 	blx	r6
102ca078:	e3500000 	cmp	r0, #0
102ca07c:	0a000001 	beq	102ca088 <ATResponse_Handler+0x74>
    {  
        return  RIL_ATRSP_SUCCESS;
102ca080:	e3a00000 	mov	r0, #0
102ca084:	e8bd8070 	pop	{r4, r5, r6, pc}
    }
    else if (Ql_RIL_FindLine(line, len, "ERROR"))
102ca088:	e1a00004 	mov	r0, r4
102ca08c:	e1a01005 	mov	r1, r5
102ca090:	e59f2068 	ldr	r2, [pc, #104]	; 102ca100 <ATResponse_Handler+0xec>
102ca094:	e12fff36 	blx	r6
102ca098:	e3500000 	cmp	r0, #0
102ca09c:	1a00000e 	bne	102ca0dc <ATResponse_Handler+0xc8>
    {  
        return  RIL_ATRSP_FAILED;
    }
    else if (Ql_RIL_FindString(line, len, "+CME ERROR"))
102ca0a0:	e1a00004 	mov	r0, r4
102ca0a4:	e1a01005 	mov	r1, r5
102ca0a8:	e59f2054 	ldr	r2, [pc, #84]	; 102ca104 <ATResponse_Handler+0xf0>
102ca0ac:	e59f6054 	ldr	r6, [pc, #84]	; 102ca108 <ATResponse_Handler+0xf4>
102ca0b0:	e12fff36 	blx	r6
102ca0b4:	e3500000 	cmp	r0, #0
102ca0b8:	1a000007 	bne	102ca0dc <ATResponse_Handler+0xc8>
    {
        return  RIL_ATRSP_FAILED;
    }
    else if (Ql_RIL_FindString(line, len, "+CMS ERROR:"))
102ca0bc:	e1a00004 	mov	r0, r4
102ca0c0:	e1a01005 	mov	r1, r5
102ca0c4:	e59f2040 	ldr	r2, [pc, #64]	; 102ca10c <ATResponse_Handler+0xf8>
102ca0c8:	e12fff36 	blx	r6
102ca0cc:	e3500000 	cmp	r0, #0
102ca0d0:	1a000001 	bne	102ca0dc <ATResponse_Handler+0xc8>
    {
        return  RIL_ATRSP_FAILED;
    }
    return RIL_ATRSP_CONTINUE; //continue wait
102ca0d4:	e3a00001 	mov	r0, #1
102ca0d8:	e8bd8070 	pop	{r4, r5, r6, pc}
    {  
        return  RIL_ATRSP_SUCCESS;
    }
    else if (Ql_RIL_FindLine(line, len, "ERROR"))
    {  
        return  RIL_ATRSP_FAILED;
102ca0dc:	e3e00000 	mvn	r0, #0
    else if (Ql_RIL_FindString(line, len, "+CMS ERROR:"))
    {
        return  RIL_ATRSP_FAILED;
    }
    return RIL_ATRSP_CONTINUE; //continue wait
}
102ca0e0:	e8bd8070 	pop	{r4, r5, r6, pc}
102ca0e4:	102cd7c0 	.word	0x102cd7c0
102ca0e8:	102cf0bc 	.word	0x102cf0bc
102ca0ec:	f03d20f4 	.word	0xf03d20f4
102ca0f0:	f03d31f0 	.word	0xf03d31f0
102ca0f4:	102cf0c8 	.word	0x102cf0c8
102ca0f8:	102ceb70 	.word	0x102ceb70
102ca0fc:	102cbf6c 	.word	0x102cbf6c
102ca100:	102ceb74 	.word	0x102ceb74
102ca104:	102cf0dc 	.word	0x102cf0dc
102ca108:	102cbee0 	.word	0x102cbee0
102ca10c:	102ceb98 	.word	0x102ceb98

102ca110 <RIL_ToneDet_Open>:
s32 RIL_ToneDet_Open( CB_ToneDet cb_ToneDet_hdl )
{
	s32 ret = RIL_AT_FAILED;
	char strAT[200]; 
    
    callback_ToneDet = cb_ToneDet_hdl;
102ca110:	e59f3064 	ldr	r3, [pc, #100]	; 102ca17c <RIL_ToneDet_Open+0x6c>
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*                                      and then call Ql_RIL_Initialize to initialize RIL.                
*****************************************************************/
s32 RIL_ToneDet_Open( CB_ToneDet cb_ToneDet_hdl )
{
102ca114:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
102ca118:	e24dd0d4 	sub	sp, sp, #212	; 0xd4
	s32 ret = RIL_AT_FAILED;
	char strAT[200]; 
    
    callback_ToneDet = cb_ToneDet_hdl;

	Ql_memset(strAT, 0, sizeof(strAT));
102ca11c:	e3a020c8 	mov	r2, #200	; 0xc8
s32 RIL_ToneDet_Open( CB_ToneDet cb_ToneDet_hdl )
{
	s32 ret = RIL_AT_FAILED;
	char strAT[200]; 
    
    callback_ToneDet = cb_ToneDet_hdl;
102ca120:	e5830008 	str	r0, [r3, #8]

	Ql_memset(strAT, 0, sizeof(strAT));
102ca124:	e3a01000 	mov	r1, #0
102ca128:	e28d0008 	add	r0, sp, #8
102ca12c:	e59f304c 	ldr	r3, [pc, #76]	; 102ca180 <RIL_ToneDet_Open+0x70>
102ca130:	e12fff33 	blx	r3
	Ql_sprintf(strAT, "AT+QTONEDET=1\r\n");
102ca134:	e59f3048 	ldr	r3, [pc, #72]	; 102ca184 <RIL_ToneDet_Open+0x74>
102ca138:	e59f1048 	ldr	r1, [pc, #72]	; 102ca188 <RIL_ToneDet_Open+0x78>
102ca13c:	e5933000 	ldr	r3, [r3]
102ca140:	e28d0008 	add	r0, sp, #8
102ca144:	e12fff33 	blx	r3
	ret = Ql_RIL_SendATCmd( strAT, Ql_strlen(strAT), NULL, NULL, 300 ) ;
102ca148:	e28d0008 	add	r0, sp, #8
102ca14c:	e59f3038 	ldr	r3, [pc, #56]	; 102ca18c <RIL_ToneDet_Open+0x7c>
102ca150:	e12fff33 	blx	r3
102ca154:	e3a02000 	mov	r2, #0
102ca158:	e3a03f4b 	mov	r3, #300	; 0x12c
102ca15c:	e58d3000 	str	r3, [sp]
102ca160:	e59fc028 	ldr	ip, [pc, #40]	; 102ca190 <RIL_ToneDet_Open+0x80>
102ca164:	e1a03002 	mov	r3, r2
102ca168:	e1a01000 	mov	r1, r0
102ca16c:	e28d0008 	add	r0, sp, #8
102ca170:	e12fff3c 	blx	ip
                  
    RIL_DTMF_DEBUG( DBG_Buffer, "<-- Send AT:%s, ret = %d -->\r\n", strAT, ret );
    
    return ret;
}
102ca174:	e28dd0d4 	add	sp, sp, #212	; 0xd4
102ca178:	e8bd8000 	ldmfd	sp!, {pc}
102ca17c:	f03d20f4 	.word	0xf03d20f4
102ca180:	102cd6b0 	.word	0x102cd6b0
102ca184:	f03d31e8 	.word	0xf03d31e8
102ca188:	102cf0e8 	.word	0x102cf0e8
102ca18c:	102cd560 	.word	0x102cd560
102ca190:	102cd11c 	.word	0x102cd11c

102ca194 <RIL_ToneDet_Close>:
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*                                      and then call Ql_RIL_Initialize to initialize RIL.                
*****************************************************************/
s32 RIL_ToneDet_Close( void )
{
102ca194:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
102ca198:	e24dd0d4 	sub	sp, sp, #212	; 0xd4
	s32 ret = RIL_AT_FAILED;
	char strAT[200]; 
    
	Ql_memset( strAT, 0, sizeof(strAT) );
102ca19c:	e3a020c8 	mov	r2, #200	; 0xc8
102ca1a0:	e3a01000 	mov	r1, #0
102ca1a4:	e28d0008 	add	r0, sp, #8
102ca1a8:	e59f3048 	ldr	r3, [pc, #72]	; 102ca1f8 <RIL_ToneDet_Close+0x64>
102ca1ac:	e12fff33 	blx	r3
	Ql_sprintf( strAT, "AT+QTONEDET=0\r\n" );
102ca1b0:	e59f3044 	ldr	r3, [pc, #68]	; 102ca1fc <RIL_ToneDet_Close+0x68>
102ca1b4:	e59f1044 	ldr	r1, [pc, #68]	; 102ca200 <RIL_ToneDet_Close+0x6c>
102ca1b8:	e5933000 	ldr	r3, [r3]
102ca1bc:	e28d0008 	add	r0, sp, #8
102ca1c0:	e12fff33 	blx	r3
	ret = Ql_RIL_SendATCmd( strAT, Ql_strlen(strAT), NULL, NULL, 300 ) ;
102ca1c4:	e28d0008 	add	r0, sp, #8
102ca1c8:	e59f3034 	ldr	r3, [pc, #52]	; 102ca204 <RIL_ToneDet_Close+0x70>
102ca1cc:	e12fff33 	blx	r3
102ca1d0:	e3a02000 	mov	r2, #0
102ca1d4:	e3a03f4b 	mov	r3, #300	; 0x12c
102ca1d8:	e58d3000 	str	r3, [sp]
102ca1dc:	e59fc024 	ldr	ip, [pc, #36]	; 102ca208 <RIL_ToneDet_Close+0x74>
102ca1e0:	e1a03002 	mov	r3, r2
102ca1e4:	e1a01000 	mov	r1, r0
102ca1e8:	e28d0008 	add	r0, sp, #8
102ca1ec:	e12fff3c 	blx	ip
                  
    RIL_DTMF_DEBUG( DBG_Buffer, "<-- Send AT:%s, ret = %d -->\r\n", strAT, ret );
    
    return ret;
}
102ca1f0:	e28dd0d4 	add	sp, sp, #212	; 0xd4
102ca1f4:	e8bd8000 	ldmfd	sp!, {pc}
102ca1f8:	102cd6b0 	.word	0x102cd6b0
102ca1fc:	f03d31e8 	.word	0xf03d31e8
102ca200:	102cf0f8 	.word	0x102cf0f8
102ca204:	102cd560 	.word	0x102cd560
102ca208:	102cd11c 	.word	0x102cd11c

102ca20c <RIL_ToneDet_Set>:
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*                                      and then call Ql_RIL_Initialize to initialize RIL.                            
*****************************************************************/
s32 RIL_ToneDet_Set( Enum_ToneDet_Mode mode, u32 pause, u32 low, u32 high )
{
102ca20c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
102ca210:	e1a04000 	mov	r4, r0
    s32 ret = RIL_AT_FAILED;
	char strAT[200]; 

    if ( mode <= RIL_DETThreshold_Min || mode >= RIL_DETThreshold_Max )
102ca214:	e2400002 	sub	r0, r0, #2
102ca218:	e3500002 	cmp	r0, #2
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*                                      and then call Ql_RIL_Initialize to initialize RIL.                            
*****************************************************************/
s32 RIL_ToneDet_Set( Enum_ToneDet_Mode mode, u32 pause, u32 low, u32 high )
{
102ca21c:	e24dd0d4 	sub	sp, sp, #212	; 0xd4
102ca220:	e1a07001 	mov	r7, r1
102ca224:	e1a06002 	mov	r6, r2
102ca228:	e1a05003 	mov	r5, r3
    s32 ret = RIL_AT_FAILED;
	char strAT[200]; 

    if ( mode <= RIL_DETThreshold_Min || mode >= RIL_DETThreshold_Max )
102ca22c:	8a00001a 	bhi	102ca29c <RIL_ToneDet_Set+0x90>
    {
        RIL_DTMF_DEBUG( DBG_Buffer, "<-- ToneDet Set Fail, INVALID PARAM: mode=%d -->\r\n", mode );
        return RIL_AT_INVALID_PARAM;
    }
    
	Ql_memset( strAT, 0, sizeof(strAT) );
102ca230:	e3a01000 	mov	r1, #0
102ca234:	e3a020c8 	mov	r2, #200	; 0xc8
102ca238:	e59f3064 	ldr	r3, [pc, #100]	; 102ca2a4 <RIL_ToneDet_Set+0x98>
102ca23c:	e28d0008 	add	r0, sp, #8
102ca240:	e12fff33 	blx	r3
	Ql_sprintf( strAT, "AT+QTONEDET=%d,1,%d,%d,%d", mode, pause, low, high );
102ca244:	e59f005c 	ldr	r0, [pc, #92]	; 102ca2a8 <RIL_ToneDet_Set+0x9c>
102ca248:	e59f105c 	ldr	r1, [pc, #92]	; 102ca2ac <RIL_ToneDet_Set+0xa0>
102ca24c:	e1a02004 	mov	r2, r4
102ca250:	e1a03007 	mov	r3, r7
102ca254:	e58d6000 	str	r6, [sp]
102ca258:	e58d5004 	str	r5, [sp, #4]
102ca25c:	e590c000 	ldr	ip, [r0]
102ca260:	e28d0008 	add	r0, sp, #8
102ca264:	e12fff3c 	blx	ip
	ret = Ql_RIL_SendATCmd( strAT, Ql_strlen(strAT), NULL, NULL, 300 ) ;
102ca268:	e59f3040 	ldr	r3, [pc, #64]	; 102ca2b0 <RIL_ToneDet_Set+0xa4>
102ca26c:	e28d0008 	add	r0, sp, #8
102ca270:	e12fff33 	blx	r3
102ca274:	e3a03f4b 	mov	r3, #300	; 0x12c
102ca278:	e3a02000 	mov	r2, #0
102ca27c:	e58d3000 	str	r3, [sp]
102ca280:	e59fc02c 	ldr	ip, [pc, #44]	; 102ca2b4 <RIL_ToneDet_Set+0xa8>
102ca284:	e1a03002 	mov	r3, r2
102ca288:	e1a01000 	mov	r1, r0
102ca28c:	e28d0008 	add	r0, sp, #8
102ca290:	e12fff3c 	blx	ip
                  
    RIL_DTMF_DEBUG( DBG_Buffer, "<-- Send AT:%s, ret = %d -->\r\n", strAT, ret );

    return ret;
}
102ca294:	e28dd0d4 	add	sp, sp, #212	; 0xd4
102ca298:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
	char strAT[200]; 

    if ( mode <= RIL_DETThreshold_Min || mode >= RIL_DETThreshold_Max )
    {
        RIL_DTMF_DEBUG( DBG_Buffer, "<-- ToneDet Set Fail, INVALID PARAM: mode=%d -->\r\n", mode );
        return RIL_AT_INVALID_PARAM;
102ca29c:	e3e00003 	mvn	r0, #3
102ca2a0:	eafffffb 	b	102ca294 <RIL_ToneDet_Set+0x88>
102ca2a4:	102cd6b0 	.word	0x102cd6b0
102ca2a8:	f03d31e8 	.word	0xf03d31e8
102ca2ac:	102cf108 	.word	0x102cf108
102ca2b0:	102cd560 	.word	0x102cd560
102ca2b4:	102cd11c 	.word	0x102cd11c

102ca2b8 <RIL_ToneDet_Get>:
s32 RIL_ToneDet_Get( Enum_ToneDet_Mode mode, u32 *low, u32 *high )
{
    s32 ret = RIL_AT_FAILED;
	char strAT[200]; 

    if ( mode < RIL_DETThreshold_Min || mode > RIL_DETThreshold_Max 
102ca2b8:	e2403001 	sub	r3, r0, #1
102ca2bc:	e3530004 	cmp	r3, #4
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*                                      and then call Ql_RIL_Initialize to initialize RIL.                              
*****************************************************************/
s32 RIL_ToneDet_Get( Enum_ToneDet_Mode mode, u32 *low, u32 *high )
{
102ca2c0:	e92d4070 	push	{r4, r5, r6, lr}
102ca2c4:	e1a0c002 	mov	ip, r2
102ca2c8:	e24dd0d0 	sub	sp, sp, #208	; 0xd0
102ca2cc:	e1a05000 	mov	r5, r0
102ca2d0:	e1a04001 	mov	r4, r1
    s32 ret = RIL_AT_FAILED;
	char strAT[200]; 

    if ( mode < RIL_DETThreshold_Min || mode > RIL_DETThreshold_Max 
102ca2d4:	8a00001e 	bhi	102ca354 <RIL_ToneDet_Get+0x9c>
        || NULL == low
        || NULL == high )
102ca2d8:	e3510000 	cmp	r1, #0
102ca2dc:	13520000 	cmpne	r2, #0
102ca2e0:	13a06000 	movne	r6, #0
102ca2e4:	03a06001 	moveq	r6, #1
102ca2e8:	0a000019 	beq	102ca354 <RIL_ToneDet_Get+0x9c>
    {
        RIL_DTMF_DEBUG( DBG_Buffer, "<-- ToneDet Set Fail, INVALID PARAM: mode=%d. -->\r\n", mode );
        return RIL_AT_INVALID_PARAM;
    }

    g_low_thresholdPtr = low;
102ca2ec:	e59f3068 	ldr	r3, [pc, #104]	; 102ca35c <RIL_ToneDet_Get+0xa4>
    g_high_thresholdPtr = high;
    
	Ql_memset( strAT, 0, sizeof(strAT) );
102ca2f0:	e1a01006 	mov	r1, r6
        RIL_DTMF_DEBUG( DBG_Buffer, "<-- ToneDet Set Fail, INVALID PARAM: mode=%d. -->\r\n", mode );
        return RIL_AT_INVALID_PARAM;
    }

    g_low_thresholdPtr = low;
    g_high_thresholdPtr = high;
102ca2f4:	e8831010 	stm	r3, {r4, ip}
    
	Ql_memset( strAT, 0, sizeof(strAT) );
102ca2f8:	e3a020c8 	mov	r2, #200	; 0xc8
102ca2fc:	e59f305c 	ldr	r3, [pc, #92]	; 102ca360 <RIL_ToneDet_Get+0xa8>
102ca300:	e28d0008 	add	r0, sp, #8
102ca304:	e12fff33 	blx	r3
	Ql_sprintf( strAT, "AT+QTONEDET=%d,0", mode );
102ca308:	e59f3054 	ldr	r3, [pc, #84]	; 102ca364 <RIL_ToneDet_Get+0xac>
102ca30c:	e59f1054 	ldr	r1, [pc, #84]	; 102ca368 <RIL_ToneDet_Get+0xb0>
102ca310:	e1a02005 	mov	r2, r5
102ca314:	e5933000 	ldr	r3, [r3]
102ca318:	e28d0008 	add	r0, sp, #8
102ca31c:	e12fff33 	blx	r3
	ret = Ql_RIL_SendATCmd( strAT, Ql_strlen(strAT), ATResponse_Handler, NULL, 300 ) ;
102ca320:	e59f3044 	ldr	r3, [pc, #68]	; 102ca36c <RIL_ToneDet_Get+0xb4>
102ca324:	e28d0008 	add	r0, sp, #8
102ca328:	e12fff33 	blx	r3
102ca32c:	e3a03f4b 	mov	r3, #300	; 0x12c
102ca330:	e58d3000 	str	r3, [sp]
102ca334:	e59f2034 	ldr	r2, [pc, #52]	; 102ca370 <RIL_ToneDet_Get+0xb8>
102ca338:	e1a03006 	mov	r3, r6
102ca33c:	e59fc030 	ldr	ip, [pc, #48]	; 102ca374 <RIL_ToneDet_Get+0xbc>
102ca340:	e1a01000 	mov	r1, r0
102ca344:	e28d0008 	add	r0, sp, #8
102ca348:	e12fff3c 	blx	ip
                  
    RIL_DTMF_DEBUG( DBG_Buffer, "<-- Send AT:%s, ret = %d -->\r\n", strAT, ret );

    return ret;
}
102ca34c:	e28dd0d0 	add	sp, sp, #208	; 0xd0
102ca350:	e8bd8070 	pop	{r4, r5, r6, pc}
    if ( mode < RIL_DETThreshold_Min || mode > RIL_DETThreshold_Max 
        || NULL == low
        || NULL == high )
    {
        RIL_DTMF_DEBUG( DBG_Buffer, "<-- ToneDet Set Fail, INVALID PARAM: mode=%d. -->\r\n", mode );
        return RIL_AT_INVALID_PARAM;
102ca354:	e3e00003 	mvn	r0, #3
102ca358:	eafffffb 	b	102ca34c <RIL_ToneDet_Get+0x94>
102ca35c:	f03d20f4 	.word	0xf03d20f4
102ca360:	102cd6b0 	.word	0x102cd6b0
102ca364:	f03d31e8 	.word	0xf03d31e8
102ca368:	102cf124 	.word	0x102cf124
102ca36c:	102cd560 	.word	0x102cd560
102ca370:	102ca014 	.word	0x102ca014
102ca374:	102cd11c 	.word	0x102cd11c

102ca378 <OnURCHandler_QToneDet>:
*                   reserved, can be NULL.
* Return:        
*               
*****************************************************************/
void OnURCHandler_QToneDet( const char* strURC, void* reserved )
{
102ca378:	e92d45f0 	push	{r4, r5, r6, r7, r8, sl, lr}
	char buff[30];
    s32 dtmfCode = -1;
    s32 timems = -1;
        
 	if ( NULL != callback_ToneDet )
102ca37c:	e59f40c4 	ldr	r4, [pc, #196]	; 102ca448 <OnURCHandler_QToneDet+0xd0>
*                   reserved, can be NULL.
* Return:        
*               
*****************************************************************/
void OnURCHandler_QToneDet( const char* strURC, void* reserved )
{
102ca380:	e24dd024 	sub	sp, sp, #36	; 0x24
	char buff[30];
    s32 dtmfCode = -1;
    s32 timems = -1;
        
 	if ( NULL != callback_ToneDet )
102ca384:	e5943008 	ldr	r3, [r4, #8]
*                   reserved, can be NULL.
* Return:        
*               
*****************************************************************/
void OnURCHandler_QToneDet( const char* strURC, void* reserved )
{
102ca388:	e1a05000 	mov	r5, r0
	char buff[30];
    s32 dtmfCode = -1;
    s32 timems = -1;
        
 	if ( NULL != callback_ToneDet )
102ca38c:	e3530000 	cmp	r3, #0
102ca390:	0a000009 	beq	102ca3bc <OnURCHandler_QToneDet+0x44>
 	{
		Ql_strcpy( buff, "\r\n+QTONEDET:\0" );
102ca394:	e59f10b0 	ldr	r1, [pc, #176]	; 102ca44c <OnURCHandler_QToneDet+0xd4>
102ca398:	e59f30b0 	ldr	r3, [pc, #176]	; 102ca450 <OnURCHandler_QToneDet+0xd8>
102ca39c:	e1a0000d 	mov	r0, sp
102ca3a0:	e12fff33 	blx	r3
		if( Ql_StrPrefixMatch(strURC, buff) )
102ca3a4:	e1a00005 	mov	r0, r5
102ca3a8:	e1a0100d 	mov	r1, sp
102ca3ac:	e59f30a0 	ldr	r3, [pc, #160]	; 102ca454 <OnURCHandler_QToneDet+0xdc>
102ca3b0:	e12fff33 	blx	r3
102ca3b4:	e3500000 	cmp	r0, #0
102ca3b8:	1a000001 	bne	102ca3c4 <OnURCHandler_QToneDet+0x4c>
            }
			
			callback_ToneDet( dtmfCode, timems );
		}
	}
}
102ca3bc:	e28dd024 	add	sp, sp, #36	; 0x24
102ca3c0:	e8bd85f0 	pop	{r4, r5, r6, r7, r8, sl, pc}
 	if ( NULL != callback_ToneDet )
 	{
		Ql_strcpy( buff, "\r\n+QTONEDET:\0" );
		if( Ql_StrPrefixMatch(strURC, buff) )
		{
			Ql_sscanf(strURC,"%*[^:]: %[^,]",buff);
102ca3c4:	e59fa08c 	ldr	sl, [pc, #140]	; 102ca458 <OnURCHandler_QToneDet+0xe0>
102ca3c8:	e1a0200d 	mov	r2, sp
102ca3cc:	e59a3000 	ldr	r3, [sl]
102ca3d0:	e59f1084 	ldr	r1, [pc, #132]	; 102ca45c <OnURCHandler_QToneDet+0xe4>
102ca3d4:	e1a00005 	mov	r0, r5
102ca3d8:	e12fff33 	blx	r3
			dtmfCode = Ql_atof(buff);
102ca3dc:	e59f807c 	ldr	r8, [pc, #124]	; 102ca460 <OnURCHandler_QToneDet+0xe8>
102ca3e0:	e1a0000d 	mov	r0, sp
102ca3e4:	e12fff38 	blx	r8
102ca3e8:	e59f7074 	ldr	r7, [pc, #116]	; 102ca464 <OnURCHandler_QToneDet+0xec>
102ca3ec:	e12fff37 	blx	r7
            if ( dtmfCode < 48 || dtmfCode > 70 )   
102ca3f0:	e2403030 	sub	r3, r0, #48	; 0x30
102ca3f4:	e3530016 	cmp	r3, #22
 	{
		Ql_strcpy( buff, "\r\n+QTONEDET:\0" );
		if( Ql_StrPrefixMatch(strURC, buff) )
		{
			Ql_sscanf(strURC,"%*[^:]: %[^,]",buff);
			dtmfCode = Ql_atof(buff);
102ca3f8:	e1a06000 	mov	r6, r0
            if ( dtmfCode < 48 || dtmfCode > 70 )   
102ca3fc:	8affffee 	bhi	102ca3bc <OnURCHandler_QToneDet+0x44>
            {
                return;     // not dtmfCode return.
            }
            else if ( 69 == dtmfCode || 70 == dtmfCode )
102ca400:	e2403045 	sub	r3, r0, #69	; 0x45
102ca404:	e3530001 	cmp	r3, #1
*****************************************************************/
void OnURCHandler_QToneDet( const char* strURC, void* reserved )
{
	char buff[30];
    s32 dtmfCode = -1;
    s32 timems = -1;
102ca408:	83e01000 	mvnhi	r1, #0
			dtmfCode = Ql_atof(buff);
            if ( dtmfCode < 48 || dtmfCode > 70 )   
            {
                return;     // not dtmfCode return.
            }
            else if ( 69 == dtmfCode || 70 == dtmfCode )
102ca40c:	9a000003 	bls	102ca420 <OnURCHandler_QToneDet+0xa8>
            {
                Ql_sscanf( strURC, "%*[^,],%[^\r\n]", buff );
    			timems = Ql_atof( buff );
            }
			
			callback_ToneDet( dtmfCode, timems );
102ca410:	e5943008 	ldr	r3, [r4, #8]
102ca414:	e1a00006 	mov	r0, r6
102ca418:	e12fff33 	blx	r3
102ca41c:	eaffffe6 	b	102ca3bc <OnURCHandler_QToneDet+0x44>
            {
                return;     // not dtmfCode return.
            }
            else if ( 69 == dtmfCode || 70 == dtmfCode )
            {
                Ql_sscanf( strURC, "%*[^,],%[^\r\n]", buff );
102ca420:	e1a0200d 	mov	r2, sp
102ca424:	e59a3000 	ldr	r3, [sl]
102ca428:	e59f1038 	ldr	r1, [pc, #56]	; 102ca468 <OnURCHandler_QToneDet+0xf0>
102ca42c:	e1a00005 	mov	r0, r5
102ca430:	e12fff33 	blx	r3
    			timems = Ql_atof( buff );
102ca434:	e1a0000d 	mov	r0, sp
102ca438:	e12fff38 	blx	r8
102ca43c:	e12fff37 	blx	r7
102ca440:	e1a01000 	mov	r1, r0
102ca444:	eafffff1 	b	102ca410 <OnURCHandler_QToneDet+0x98>
102ca448:	f03d20f4 	.word	0xf03d20f4
102ca44c:	102ce180 	.word	0x102ce180
102ca450:	102cd438 	.word	0x102cd438
102ca454:	102cbda0 	.word	0x102cbda0
102ca458:	f03d31f0 	.word	0xf03d31f0
102ca45c:	102cf138 	.word	0x102cf138
102ca460:	102cd3a0 	.word	0x102cd3a0
102ca464:	102cc618 	.word	0x102cc618
102ca468:	102cf148 	.word	0x102cf148

102ca46c <RIL_WDTMF_Send>:
s32 RIL_WDTMF_Send( Enum_WDTMF_Vomume ul_volume, Enum_WDTMF_Vomume dl_volume, u8 *dtmfStr, CB_WDTMF cb_WDTMF_hdl )
{
	s32 ret = RIL_AT_FAILED;
	char strAT[200]; 

    if ( ( ul_volume < RIL_WDTMF_VOLUME0 || ul_volume > RIL_WDTMF_VOLUME7 )
102ca46c:	e3500007 	cmp	r0, #7
102ca470:	93510007 	cmpls	r1, #7
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*                                      and then call Ql_RIL_Initialize to initialize RIL.               
*****************************************************************/
s32 RIL_WDTMF_Send( Enum_WDTMF_Vomume ul_volume, Enum_WDTMF_Vomume dl_volume, u8 *dtmfStr, CB_WDTMF cb_WDTMF_hdl )
{
102ca474:	e92d40f0 	push	{r4, r5, r6, r7, lr}
102ca478:	e1a05000 	mov	r5, r0
102ca47c:	e24dd0d4 	sub	sp, sp, #212	; 0xd4
102ca480:	e1a04001 	mov	r4, r1
	s32 ret = RIL_AT_FAILED;
	char strAT[200]; 

    if ( ( ul_volume < RIL_WDTMF_VOLUME0 || ul_volume > RIL_WDTMF_VOLUME7 )
102ca484:	93a06000 	movls	r6, #0
102ca488:	83a06001 	movhi	r6, #1
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*                                      and then call Ql_RIL_Initialize to initialize RIL.               
*****************************************************************/
s32 RIL_WDTMF_Send( Enum_WDTMF_Vomume ul_volume, Enum_WDTMF_Vomume dl_volume, u8 *dtmfStr, CB_WDTMF cb_WDTMF_hdl )
{
102ca48c:	e1a07002 	mov	r7, r2
	s32 ret = RIL_AT_FAILED;
	char strAT[200]; 

    if ( ( ul_volume < RIL_WDTMF_VOLUME0 || ul_volume > RIL_WDTMF_VOLUME7 )
102ca490:	8a00001c 	bhi	102ca508 <RIL_WDTMF_Send+0x9c>
        || ( dl_volume < RIL_WDTMF_VOLUME0 || dl_volume > RIL_WDTMF_VOLUME7 )
        || ( NULL == dtmfStr ) )
102ca494:	e3520000 	cmp	r2, #0
102ca498:	0a00001a 	beq	102ca508 <RIL_WDTMF_Send+0x9c>
    {
        RIL_DTMF_DEBUG( DBG_Buffer, "<-- WDTMF Send Fail, INVALID PARAM. -->\r\n");
        return RIL_AT_INVALID_PARAM;
    }

    callback_WDTMF = cb_WDTMF_hdl;
102ca49c:	e59fc06c 	ldr	ip, [pc, #108]	; 102ca510 <RIL_WDTMF_Send+0xa4>
    
	Ql_memset( strAT, 0, sizeof(strAT) );
102ca4a0:	e1a01006 	mov	r1, r6
    {
        RIL_DTMF_DEBUG( DBG_Buffer, "<-- WDTMF Send Fail, INVALID PARAM. -->\r\n");
        return RIL_AT_INVALID_PARAM;
    }

    callback_WDTMF = cb_WDTMF_hdl;
102ca4a4:	e58c300c 	str	r3, [ip, #12]
    
	Ql_memset( strAT, 0, sizeof(strAT) );
102ca4a8:	e3a020c8 	mov	r2, #200	; 0xc8
102ca4ac:	e59f3060 	ldr	r3, [pc, #96]	; 102ca514 <RIL_WDTMF_Send+0xa8>
102ca4b0:	e28d0008 	add	r0, sp, #8
102ca4b4:	e12fff33 	blx	r3
	Ql_sprintf( strAT, "AT+QWDTMF=%d,%d,\"%s\"\r\n", ul_volume, dl_volume, dtmfStr );
102ca4b8:	e59f0058 	ldr	r0, [pc, #88]	; 102ca518 <RIL_WDTMF_Send+0xac>
102ca4bc:	e59f1058 	ldr	r1, [pc, #88]	; 102ca51c <RIL_WDTMF_Send+0xb0>
102ca4c0:	e1a02005 	mov	r2, r5
102ca4c4:	e1a03004 	mov	r3, r4
102ca4c8:	e58d7000 	str	r7, [sp]
102ca4cc:	e590c000 	ldr	ip, [r0]
102ca4d0:	e28d0008 	add	r0, sp, #8
102ca4d4:	e12fff3c 	blx	ip
	ret = Ql_RIL_SendATCmd( strAT, Ql_strlen(strAT), NULL, NULL, 0 ) ;
102ca4d8:	e59f3040 	ldr	r3, [pc, #64]	; 102ca520 <RIL_WDTMF_Send+0xb4>
102ca4dc:	e28d0008 	add	r0, sp, #8
102ca4e0:	e12fff33 	blx	r3
102ca4e4:	e1a02006 	mov	r2, r6
102ca4e8:	e58d6000 	str	r6, [sp]
102ca4ec:	e1a03006 	mov	r3, r6
102ca4f0:	e59fc02c 	ldr	ip, [pc, #44]	; 102ca524 <RIL_WDTMF_Send+0xb8>
102ca4f4:	e1a01000 	mov	r1, r0
102ca4f8:	e28d0008 	add	r0, sp, #8
102ca4fc:	e12fff3c 	blx	ip
                  
    RIL_DTMF_DEBUG( DBG_Buffer, "<-- Send AT:%s, ret = %d -->\r\n", strAT, ret );
    
    return ret;
}
102ca500:	e28dd0d4 	add	sp, sp, #212	; 0xd4
102ca504:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    if ( ( ul_volume < RIL_WDTMF_VOLUME0 || ul_volume > RIL_WDTMF_VOLUME7 )
        || ( dl_volume < RIL_WDTMF_VOLUME0 || dl_volume > RIL_WDTMF_VOLUME7 )
        || ( NULL == dtmfStr ) )
    {
        RIL_DTMF_DEBUG( DBG_Buffer, "<-- WDTMF Send Fail, INVALID PARAM. -->\r\n");
        return RIL_AT_INVALID_PARAM;
102ca508:	e3e00003 	mvn	r0, #3
102ca50c:	eafffffb 	b	102ca500 <RIL_WDTMF_Send+0x94>
102ca510:	f03d20f4 	.word	0xf03d20f4
102ca514:	102cd6b0 	.word	0x102cd6b0
102ca518:	f03d31e8 	.word	0xf03d31e8
102ca51c:	102cf158 	.word	0x102cf158
102ca520:	102cd560 	.word	0x102cd560
102ca524:	102cd11c 	.word	0x102cd11c

102ca528 <OnURCHandler_QWDTMF>:
*                   reserved, can be NULL.
* Return:        
*               
*****************************************************************/
void OnURCHandler_QWDTMF( const char* strURC, void* reserved )
{
102ca528:	e92d4030 	push	{r4, r5, lr}
	char buff[30];
    s32 result = -1;
        
 	if ( NULL != callback_WDTMF )
102ca52c:	e59f4078 	ldr	r4, [pc, #120]	; 102ca5ac <OnURCHandler_QWDTMF+0x84>
*                   reserved, can be NULL.
* Return:        
*               
*****************************************************************/
void OnURCHandler_QWDTMF( const char* strURC, void* reserved )
{
102ca530:	e24dd024 	sub	sp, sp, #36	; 0x24
	char buff[30];
    s32 result = -1;
        
 	if ( NULL != callback_WDTMF )
102ca534:	e594300c 	ldr	r3, [r4, #12]
*                   reserved, can be NULL.
* Return:        
*               
*****************************************************************/
void OnURCHandler_QWDTMF( const char* strURC, void* reserved )
{
102ca538:	e1a05000 	mov	r5, r0
	char buff[30];
    s32 result = -1;
        
 	if ( NULL != callback_WDTMF )
102ca53c:	e3530000 	cmp	r3, #0
102ca540:	0a000009 	beq	102ca56c <OnURCHandler_QWDTMF+0x44>
 	{
		Ql_strcpy( buff, "\r\n+QWDTMF:\0" );
102ca544:	e59f1064 	ldr	r1, [pc, #100]	; 102ca5b0 <OnURCHandler_QWDTMF+0x88>
102ca548:	e59f3064 	ldr	r3, [pc, #100]	; 102ca5b4 <OnURCHandler_QWDTMF+0x8c>
102ca54c:	e1a0000d 	mov	r0, sp
102ca550:	e12fff33 	blx	r3
		if( Ql_StrPrefixMatch(strURC, buff) )
102ca554:	e1a00005 	mov	r0, r5
102ca558:	e1a0100d 	mov	r1, sp
102ca55c:	e59f3054 	ldr	r3, [pc, #84]	; 102ca5b8 <OnURCHandler_QWDTMF+0x90>
102ca560:	e12fff33 	blx	r3
102ca564:	e3500000 	cmp	r0, #0
102ca568:	1a000001 	bne	102ca574 <OnURCHandler_QWDTMF+0x4c>
			result = Ql_atof( buff );
			
			callback_WDTMF( result );
		}
	}
102ca56c:	e28dd024 	add	sp, sp, #36	; 0x24
102ca570:	e8bd8030 	pop	{r4, r5, pc}
 	if ( NULL != callback_WDTMF )
 	{
		Ql_strcpy( buff, "\r\n+QWDTMF:\0" );
		if( Ql_StrPrefixMatch(strURC, buff) )
		{
			Ql_sscanf( strURC, "%*[^:]: %[^\r\n]", buff );
102ca574:	e59f3040 	ldr	r3, [pc, #64]	; 102ca5bc <OnURCHandler_QWDTMF+0x94>
102ca578:	e1a0200d 	mov	r2, sp
102ca57c:	e59f103c 	ldr	r1, [pc, #60]	; 102ca5c0 <OnURCHandler_QWDTMF+0x98>
102ca580:	e5933000 	ldr	r3, [r3]
102ca584:	e1a00005 	mov	r0, r5
102ca588:	e12fff33 	blx	r3
			result = Ql_atof( buff );
102ca58c:	e1a0000d 	mov	r0, sp
102ca590:	e59f302c 	ldr	r3, [pc, #44]	; 102ca5c4 <OnURCHandler_QWDTMF+0x9c>
102ca594:	e12fff33 	blx	r3
102ca598:	e59f3028 	ldr	r3, [pc, #40]	; 102ca5c8 <OnURCHandler_QWDTMF+0xa0>
102ca59c:	e12fff33 	blx	r3
			
			callback_WDTMF( result );
102ca5a0:	e594300c 	ldr	r3, [r4, #12]
102ca5a4:	e12fff33 	blx	r3
102ca5a8:	eaffffef 	b	102ca56c <OnURCHandler_QWDTMF+0x44>
102ca5ac:	f03d20f4 	.word	0xf03d20f4
102ca5b0:	102ce190 	.word	0x102ce190
102ca5b4:	102cd438 	.word	0x102cd438
102ca5b8:	102cbda0 	.word	0x102cbda0
102ca5bc:	f03d31f0 	.word	0xf03d31f0
102ca5c0:	102cf170 	.word	0x102cf170
102ca5c4:	102cd3a0 	.word	0x102cd3a0
102ca5c8:	102cc618 	.word	0x102cc618

102ca5cc <RIL_GetInitCmdCnt>:
};

u32 RIL_GetInitCmdCnt(void)
{
    return NUM_ELEMS(g_InitCmds);
}
102ca5cc:	e3a00006 	mov	r0, #6
102ca5d0:	e12fff1e 	bx	lr

102ca5d4 <RIL_GetLimitedCmdCnt>:
    "AT+CLIP",
};
u32 RIL_GetLimitedCmdCnt(void)
{
    return NUM_ELEMS(g_LimitedCmds);
}
102ca5d4:	e3a00002 	mov	r0, #2
102ca5d8:	e12fff1e 	bx	lr

102ca5dc <ATResponse_GetLocation_Ex_Handler>:
	}
    return ret;
}

static s32 ATResponse_GetLocation_Ex_Handler(char* line, u32 len, void* userdata)
{
102ca5dc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
102ca5e0:	e24dd020 	sub	sp, sp, #32
102ca5e4:	e1a06000 	mov	r6, r0
102ca5e8:	e1a05001 	mov	r5, r1
    char* p2 = NULL;
    char buff[30];

    ST_LocInfo *loclnfo = (ST_LocInfo *)userdata ;

    Ql_memset(buff , 0, 30);
102ca5ec:	e59f30e8 	ldr	r3, [pc, #232]	; 102ca6dc <ATResponse_GetLocation_Ex_Handler+0x100>
102ca5f0:	e3a01000 	mov	r1, #0
	}
    return ret;
}

static s32 ATResponse_GetLocation_Ex_Handler(char* line, u32 len, void* userdata)
{
102ca5f4:	e1a04002 	mov	r4, r2
    char* p2 = NULL;
    char buff[30];

    ST_LocInfo *loclnfo = (ST_LocInfo *)userdata ;

    Ql_memset(buff , 0, 30);
102ca5f8:	e1a0000d 	mov	r0, sp
102ca5fc:	e3a0201e 	mov	r2, #30
102ca600:	e12fff33 	blx	r3
    char* head = Ql_RIL_FindString(line, len, "+QCELLLOC:"); //continue wait
102ca604:	e59f70d4 	ldr	r7, [pc, #212]	; 102ca6e0 <ATResponse_GetLocation_Ex_Handler+0x104>
102ca608:	e1a00006 	mov	r0, r6
102ca60c:	e1a01005 	mov	r1, r5
102ca610:	e59f20cc 	ldr	r2, [pc, #204]	; 102ca6e4 <ATResponse_GetLocation_Ex_Handler+0x108>
102ca614:	e12fff37 	blx	r7
    if(head)
102ca618:	e2508000 	subs	r8, r0, #0
102ca61c:	0a000017 	beq	102ca680 <ATResponse_GetLocation_Ex_Handler+0xa4>
    {
		Ql_sscanf(head,"%*[^:]: %[^,]",buff);
102ca620:	e59f70c0 	ldr	r7, [pc, #192]	; 102ca6e8 <ATResponse_GetLocation_Ex_Handler+0x10c>
102ca624:	e1a0200d 	mov	r2, sp
102ca628:	e5973000 	ldr	r3, [r7]
102ca62c:	e59f10b8 	ldr	r1, [pc, #184]	; 102ca6ec <ATResponse_GetLocation_Ex_Handler+0x110>
102ca630:	e12fff33 	blx	r3
		loclnfo->longitude = Ql_atof(buff);
102ca634:	e59f60b4 	ldr	r6, [pc, #180]	; 102ca6f0 <ATResponse_GetLocation_Ex_Handler+0x114>
102ca638:	e1a0000d 	mov	r0, sp
102ca63c:	e12fff36 	blx	r6
102ca640:	e59f50ac 	ldr	r5, [pc, #172]	; 102ca6f4 <ATResponse_GetLocation_Ex_Handler+0x118>
102ca644:	e12fff35 	blx	r5
		
		Ql_sscanf(head,"%*[^,],%[^\r\n]",buff);
102ca648:	e5973000 	ldr	r3, [r7]
102ca64c:	e1a0200d 	mov	r2, sp
102ca650:	e59f10a0 	ldr	r1, [pc, #160]	; 102ca6f8 <ATResponse_GetLocation_Ex_Handler+0x11c>
    Ql_memset(buff , 0, 30);
    char* head = Ql_RIL_FindString(line, len, "+QCELLLOC:"); //continue wait
    if(head)
    {
		Ql_sscanf(head,"%*[^:]: %[^,]",buff);
		loclnfo->longitude = Ql_atof(buff);
102ca654:	e5840000 	str	r0, [r4]
		
		Ql_sscanf(head,"%*[^,],%[^\r\n]",buff);
102ca658:	e1a00008 	mov	r0, r8
102ca65c:	e12fff33 	blx	r3
		loclnfo->latitude = Ql_atof(buff);
102ca660:	e1a0000d 	mov	r0, sp
102ca664:	e12fff36 	blx	r6
102ca668:	e12fff35 	blx	r5
        
        return  RIL_ATRSP_CONTINUE;
102ca66c:	e3a03001 	mov	r3, #1
    {
		Ql_sscanf(head,"%*[^:]: %[^,]",buff);
		loclnfo->longitude = Ql_atof(buff);
		
		Ql_sscanf(head,"%*[^,],%[^\r\n]",buff);
		loclnfo->latitude = Ql_atof(buff);
102ca670:	e5840004 	str	r0, [r4, #4]
    {
        return  RIL_ATRSP_FAILED;
    }

    return RIL_ATRSP_CONTINUE; //continue wait
}
102ca674:	e1a00003 	mov	r0, r3
102ca678:	e28dd020 	add	sp, sp, #32
102ca67c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		loclnfo->latitude = Ql_atof(buff);
        
        return  RIL_ATRSP_CONTINUE;
    }

    head = Ql_RIL_FindString(line, len, "+CME ERROR:");// find <CR><LF>ERROR<CR><LF>, <CR>ERROR<CR>£¬<LF>ERROR<LF>
102ca680:	e1a00006 	mov	r0, r6
102ca684:	e1a01005 	mov	r1, r5
102ca688:	e59f206c 	ldr	r2, [pc, #108]	; 102ca6fc <ATResponse_GetLocation_Ex_Handler+0x120>
102ca68c:	e12fff37 	blx	r7
    if(head)
102ca690:	e2504000 	subs	r4, r0, #0
102ca694:	1a00000e 	bne	102ca6d4 <ATResponse_GetLocation_Ex_Handler+0xf8>
    {  
        return  RIL_ATRSP_FAILED;
    }

    head = Ql_RIL_FindLine(line, len, "OK"); // find <CR><LF>OK<CR><LF>, <CR>OK<CR>£¬<LF>OK<LF>
102ca698:	e1a00006 	mov	r0, r6
102ca69c:	e1a01005 	mov	r1, r5
102ca6a0:	e59f2058 	ldr	r2, [pc, #88]	; 102ca700 <ATResponse_GetLocation_Ex_Handler+0x124>
102ca6a4:	e59f7058 	ldr	r7, [pc, #88]	; 102ca704 <ATResponse_GetLocation_Ex_Handler+0x128>
102ca6a8:	e12fff37 	blx	r7
    if(head)
102ca6ac:	e3500000 	cmp	r0, #0
    {
        return  RIL_ATRSP_SUCCESS;
102ca6b0:	11a03004 	movne	r3, r4
    {  
        return  RIL_ATRSP_FAILED;
    }

    head = Ql_RIL_FindLine(line, len, "OK"); // find <CR><LF>OK<CR><LF>, <CR>OK<CR>£¬<LF>OK<LF>
    if(head)
102ca6b4:	1affffee 	bne	102ca674 <ATResponse_GetLocation_Ex_Handler+0x98>
    {
        return  RIL_ATRSP_SUCCESS;
    }

    head = Ql_RIL_FindLine(line, len, "ERROR");// find <CR><LF>ERROR<CR><LF>, <CR>ERROR<CR>£¬<LF>ERROR<LF>
102ca6b8:	e1a00006 	mov	r0, r6
102ca6bc:	e1a01005 	mov	r1, r5
102ca6c0:	e59f2040 	ldr	r2, [pc, #64]	; 102ca708 <ATResponse_GetLocation_Ex_Handler+0x12c>
102ca6c4:	e12fff37 	blx	r7
    if(head)
102ca6c8:	e3500000 	cmp	r0, #0
    {
        return  RIL_ATRSP_FAILED;
    }

    return RIL_ATRSP_CONTINUE; //continue wait
102ca6cc:	03a03001 	moveq	r3, #1
    {
        return  RIL_ATRSP_SUCCESS;
    }

    head = Ql_RIL_FindLine(line, len, "ERROR");// find <CR><LF>ERROR<CR><LF>, <CR>ERROR<CR>£¬<LF>ERROR<LF>
    if(head)
102ca6d0:	0affffe7 	beq	102ca674 <ATResponse_GetLocation_Ex_Handler+0x98>
    }

    head = Ql_RIL_FindString(line, len, "+CME ERROR:");// find <CR><LF>ERROR<CR><LF>, <CR>ERROR<CR>£¬<LF>ERROR<LF>
    if(head)
    {  
        return  RIL_ATRSP_FAILED;
102ca6d4:	e3e03000 	mvn	r3, #0
102ca6d8:	eaffffe5 	b	102ca674 <ATResponse_GetLocation_Ex_Handler+0x98>
102ca6dc:	102cd6b0 	.word	0x102cd6b0
102ca6e0:	102cbee0 	.word	0x102cbee0
102ca6e4:	102cf1d8 	.word	0x102cf1d8
102ca6e8:	f03d31f0 	.word	0xf03d31f0
102ca6ec:	102cf138 	.word	0x102cf138
102ca6f0:	102cd3a0 	.word	0x102cd3a0
102ca6f4:	102cc674 	.word	0x102cc674
102ca6f8:	102cf148 	.word	0x102cf148
102ca6fc:	102ceb7c 	.word	0x102ceb7c
102ca700:	102ceb70 	.word	0x102ceb70
102ca704:	102cbf6c 	.word	0x102cbf6c
102ca708:	102ceb74 	.word	0x102ceb74

102ca70c <RIL_GetLocation>:

s32 RIL_GetLocation(CB_LocInfo cb_loc)
{
	s32 ret = RIL_AT_FAILED;
	char strAT[200]; 
    callback_loc = cb_loc;
102ca70c:	e59f30b0 	ldr	r3, [pc, #176]	; 102ca7c4 <RIL_GetLocation+0xb8>

static CB_LocInfo callback_loc = NULL;
static s32 ATResponse_GetLocation_Ex_Handler(char* line, u32 len, void* userdata);

s32 RIL_GetLocation(CB_LocInfo cb_loc)
{
102ca710:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	char strAT[200]; 
    callback_loc = cb_loc;

	Ql_memset(strAT, 0, sizeof(strAT));
    //The third parameter default value is 0.When set to 1, get location error will return "+QCELLLOC: <ERR NUM>".
	Ql_sprintf(strAT, "AT+QLOCCFG=\"ASYNCH\",1,1\r\n");
102ca714:	e59f70ac 	ldr	r7, [pc, #172]	; 102ca7c8 <RIL_GetLocation+0xbc>

static CB_LocInfo callback_loc = NULL;
static s32 ATResponse_GetLocation_Ex_Handler(char* line, u32 len, void* userdata);

s32 RIL_GetLocation(CB_LocInfo cb_loc)
{
102ca718:	e24dd0d0 	sub	sp, sp, #208	; 0xd0
	s32 ret = RIL_AT_FAILED;
	char strAT[200]; 
    callback_loc = cb_loc;

	Ql_memset(strAT, 0, sizeof(strAT));
102ca71c:	e3a020c8 	mov	r2, #200	; 0xc8

s32 RIL_GetLocation(CB_LocInfo cb_loc)
{
	s32 ret = RIL_AT_FAILED;
	char strAT[200]; 
    callback_loc = cb_loc;
102ca720:	e5830000 	str	r0, [r3]

	Ql_memset(strAT, 0, sizeof(strAT));
102ca724:	e3a01000 	mov	r1, #0
102ca728:	e28d0008 	add	r0, sp, #8
102ca72c:	e59f8098 	ldr	r8, [pc, #152]	; 102ca7cc <RIL_GetLocation+0xc0>
102ca730:	e12fff38 	blx	r8
    //The third parameter default value is 0.When set to 1, get location error will return "+QCELLLOC: <ERR NUM>".
	Ql_sprintf(strAT, "AT+QLOCCFG=\"ASYNCH\",1,1\r\n");
102ca734:	e59f1094 	ldr	r1, [pc, #148]	; 102ca7d0 <RIL_GetLocation+0xc4>
102ca738:	e5973000 	ldr	r3, [r7]
102ca73c:	e28d0008 	add	r0, sp, #8
102ca740:	e12fff33 	blx	r3
	ret = Ql_RIL_SendATCmd(strAT,Ql_strlen(strAT),NULL,NULL,0);
102ca744:	e59f6088 	ldr	r6, [pc, #136]	; 102ca7d4 <RIL_GetLocation+0xc8>
102ca748:	e28d0008 	add	r0, sp, #8
102ca74c:	e12fff36 	blx	r6
102ca750:	e3a03000 	mov	r3, #0
102ca754:	e1a02003 	mov	r2, r3
102ca758:	e58d3000 	str	r3, [sp]
102ca75c:	e59f5074 	ldr	r5, [pc, #116]	; 102ca7d8 <RIL_GetLocation+0xcc>
102ca760:	e1a01000 	mov	r1, r0
102ca764:	e28d0008 	add	r0, sp, #8
102ca768:	e12fff35 	blx	r5
    RIL_LOC_DEBUG(DBG_Buffer,"<-- Send AT:%s, ret = %d -->\r\n",strAT, ret);
	if (RIL_AT_SUCCESS == ret)
102ca76c:	e2504000 	subs	r4, r0, #0
102ca770:	1a000010 	bne	102ca7b8 <RIL_GetLocation+0xac>
	{
        Ql_memset(strAT, 0, sizeof(strAT));
102ca774:	e3a020c8 	mov	r2, #200	; 0xc8
102ca778:	e1a01004 	mov	r1, r4
102ca77c:	e28d0008 	add	r0, sp, #8
102ca780:	e12fff38 	blx	r8
        Ql_sprintf(strAT, "AT+QCELLLOC=1\r\n");                      
102ca784:	e59f1050 	ldr	r1, [pc, #80]	; 102ca7dc <RIL_GetLocation+0xd0>
102ca788:	e5973000 	ldr	r3, [r7]
102ca78c:	e28d0008 	add	r0, sp, #8
102ca790:	e12fff33 	blx	r3
        ret = Ql_RIL_SendATCmd(strAT,Ql_strlen(strAT),NULL,NULL,0);
102ca794:	e28d0008 	add	r0, sp, #8
102ca798:	e12fff36 	blx	r6
102ca79c:	e1a02004 	mov	r2, r4
102ca7a0:	e58d4000 	str	r4, [sp]
102ca7a4:	e1a03004 	mov	r3, r4
102ca7a8:	e1a01000 	mov	r1, r0
102ca7ac:	e28d0008 	add	r0, sp, #8
102ca7b0:	e12fff35 	blx	r5
102ca7b4:	e1a04000 	mov	r4, r0
        RIL_LOC_DEBUG(DBG_Buffer,"<-- Send AT:%s, ret = %d -->\r\n",strAT, ret);  
	}
    return ret;
}
102ca7b8:	e1a00004 	mov	r0, r4
102ca7bc:	e28dd0d0 	add	sp, sp, #208	; 0xd0
102ca7c0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
102ca7c4:	f03d211c 	.word	0xf03d211c
102ca7c8:	f03d31e8 	.word	0xf03d31e8
102ca7cc:	102cd6b0 	.word	0x102cd6b0
102ca7d0:	102cf1e4 	.word	0x102cf1e4
102ca7d4:	102cd560 	.word	0x102cd560
102ca7d8:	102cd11c 	.word	0x102cd11c
102ca7dc:	102cf200 	.word	0x102cf200

102ca7e0 <RIL_GetLocation_Ex>:

    return RIL_ATRSP_CONTINUE; //continue wait
}

s32 RIL_GetLocation_Ex(ST_LocInfo* locinfo)
{
102ca7e0:	e92d45f0 	push	{r4, r5, r6, r7, r8, sl, lr}
	char strAT[200]; 
    ST_LocInfo Locinfo;

    Ql_memset(strAT, 0, sizeof(strAT));
    //The third parameter default value is 0.When set to 1, get location error will return "+QCELLLOC: <ERR NUM>".
	Ql_sprintf(strAT, "AT+QLOCCFG=\"ASYNCH\",0,0\r\n");
102ca7e4:	e59f70c0 	ldr	r7, [pc, #192]	; 102ca8ac <RIL_GetLocation_Ex+0xcc>

    return RIL_ATRSP_CONTINUE; //continue wait
}

s32 RIL_GetLocation_Ex(ST_LocInfo* locinfo)
{
102ca7e8:	e24dd0dc 	sub	sp, sp, #220	; 0xdc
	s32 ret = RIL_AT_FAILED;
	char strAT[200]; 
    ST_LocInfo Locinfo;

    Ql_memset(strAT, 0, sizeof(strAT));
102ca7ec:	e3a020c8 	mov	r2, #200	; 0xc8
102ca7f0:	e3a01000 	mov	r1, #0

    return RIL_ATRSP_CONTINUE; //continue wait
}

s32 RIL_GetLocation_Ex(ST_LocInfo* locinfo)
{
102ca7f4:	e1a0a000 	mov	sl, r0
	s32 ret = RIL_AT_FAILED;
	char strAT[200]; 
    ST_LocInfo Locinfo;

    Ql_memset(strAT, 0, sizeof(strAT));
102ca7f8:	e59f80b0 	ldr	r8, [pc, #176]	; 102ca8b0 <RIL_GetLocation_Ex+0xd0>
102ca7fc:	e28d0010 	add	r0, sp, #16
102ca800:	e12fff38 	blx	r8
    //The third parameter default value is 0.When set to 1, get location error will return "+QCELLLOC: <ERR NUM>".
	Ql_sprintf(strAT, "AT+QLOCCFG=\"ASYNCH\",0,0\r\n");
102ca804:	e59f10a8 	ldr	r1, [pc, #168]	; 102ca8b4 <RIL_GetLocation_Ex+0xd4>
102ca808:	e5973000 	ldr	r3, [r7]
102ca80c:	e28d0010 	add	r0, sp, #16
102ca810:	e12fff33 	blx	r3
	ret = Ql_RIL_SendATCmd(strAT,Ql_strlen(strAT),NULL,NULL,0);
102ca814:	e59f609c 	ldr	r6, [pc, #156]	; 102ca8b8 <RIL_GetLocation_Ex+0xd8>
102ca818:	e28d0010 	add	r0, sp, #16
102ca81c:	e12fff36 	blx	r6
102ca820:	e3a03000 	mov	r3, #0
102ca824:	e1a02003 	mov	r2, r3
102ca828:	e58d3000 	str	r3, [sp]
102ca82c:	e59f5088 	ldr	r5, [pc, #136]	; 102ca8bc <RIL_GetLocation_Ex+0xdc>
102ca830:	e1a01000 	mov	r1, r0
102ca834:	e28d0010 	add	r0, sp, #16
102ca838:	e12fff35 	blx	r5
    if (RIL_AT_SUCCESS == ret)
102ca83c:	e2504000 	subs	r4, r0, #0
102ca840:	1a000016 	bne	102ca8a0 <RIL_GetLocation_Ex+0xc0>
	{
        Ql_memset(strAT, 0, sizeof(strAT));
102ca844:	e3a020c8 	mov	r2, #200	; 0xc8
102ca848:	e1a01004 	mov	r1, r4
102ca84c:	e28d0010 	add	r0, sp, #16
102ca850:	e12fff38 	blx	r8
        Ql_sprintf(strAT, "AT+QCELLLOC=1\r\n");                
102ca854:	e59f1064 	ldr	r1, [pc, #100]	; 102ca8c0 <RIL_GetLocation_Ex+0xe0>
102ca858:	e5973000 	ldr	r3, [r7]
102ca85c:	e28d0010 	add	r0, sp, #16
102ca860:	e12fff33 	blx	r3
        RIL_LOC_DEBUG(DBG_Buffer,"<-- Send AT:%s, ret = %d -->\r\n",strAT, ret);        
        ret = Ql_RIL_SendATCmd(strAT,Ql_strlen(strAT),ATResponse_GetLocation_Ex_Handler,(void*)&Locinfo,0);
102ca864:	e28d0010 	add	r0, sp, #16
102ca868:	e12fff36 	blx	r6
102ca86c:	e28d3008 	add	r3, sp, #8
102ca870:	e58d4000 	str	r4, [sp]
102ca874:	e59f2048 	ldr	r2, [pc, #72]	; 102ca8c4 <RIL_GetLocation_Ex+0xe4>
102ca878:	e1a01000 	mov	r1, r0
102ca87c:	e28d0010 	add	r0, sp, #16
102ca880:	e12fff35 	blx	r5
        if(RIL_ATRSP_SUCCESS == ret)
102ca884:	e2504000 	subs	r4, r0, #0
        {
            locinfo->latitude = Locinfo.latitude;
102ca888:	059d300c 	ldreq	r3, [sp, #12]
            locinfo->longitude = Locinfo.longitude;
            RIL_LOC_DEBUG(DBG_Buffer,"<-- lat:%f,long:%f ret = %d -->\r\n",locinfo->latitude,locinfo->longitude, ret);  
        }
        else
        {
            locinfo->latitude = 0;
102ca88c:	13a03000 	movne	r3, #0
        Ql_sprintf(strAT, "AT+QCELLLOC=1\r\n");                
        RIL_LOC_DEBUG(DBG_Buffer,"<-- Send AT:%s, ret = %d -->\r\n",strAT, ret);        
        ret = Ql_RIL_SendATCmd(strAT,Ql_strlen(strAT),ATResponse_GetLocation_Ex_Handler,(void*)&Locinfo,0);
        if(RIL_ATRSP_SUCCESS == ret)
        {
            locinfo->latitude = Locinfo.latitude;
102ca890:	058a3004 	streq	r3, [sl, #4]
            locinfo->longitude = Locinfo.longitude;
102ca894:	059d3008 	ldreq	r3, [sp, #8]
            RIL_LOC_DEBUG(DBG_Buffer,"<-- lat:%f,long:%f ret = %d -->\r\n",locinfo->latitude,locinfo->longitude, ret);  
        }
        else
        {
            locinfo->latitude = 0;
102ca898:	158a3004 	strne	r3, [sl, #4]
            locinfo->longitude = 0;
102ca89c:	e58a3000 	str	r3, [sl]
        }
    }

    return ret;
}
102ca8a0:	e1a00004 	mov	r0, r4
102ca8a4:	e28dd0dc 	add	sp, sp, #220	; 0xdc
102ca8a8:	e8bd85f0 	pop	{r4, r5, r6, r7, r8, sl, pc}
102ca8ac:	f03d31e8 	.word	0xf03d31e8
102ca8b0:	102cd6b0 	.word	0x102cd6b0
102ca8b4:	102cf210 	.word	0x102cf210
102ca8b8:	102cd560 	.word	0x102cd560
102ca8bc:	102cd11c 	.word	0x102cd11c
102ca8c0:	102cf200 	.word	0x102cf200
102ca8c4:	102ca5dc 	.word	0x102ca5dc

102ca8c8 <RIL_GetLocationByCell>:

s32 RIL_GetLocationByCell(ST_CellInfo* cell, CB_LocInfo cb_loc)
{
	s32 ret = RIL_AT_SUCCESS;
	char strAT[200];
    callback_loc = cb_loc;        
102ca8c8:	e59f30cc 	ldr	r3, [pc, #204]	; 102ca99c <RIL_GetLocationByCell+0xd4>

    return ret;
}

s32 RIL_GetLocationByCell(ST_CellInfo* cell, CB_LocInfo cb_loc)
{
102ca8cc:	e92d45f0 	push	{r4, r5, r6, r7, r8, sl, lr}
	s32 ret = RIL_AT_SUCCESS;
	char strAT[200];
    callback_loc = cb_loc;        

	Ql_memset(strAT, 0, sizeof(strAT));
	Ql_sprintf(strAT, "AT+QLOCCFG=\"ASYNCH\",1\r\n");
102ca8d0:	e59f80c8 	ldr	r8, [pc, #200]	; 102ca9a0 <RIL_GetLocationByCell+0xd8>

    return ret;
}

s32 RIL_GetLocationByCell(ST_CellInfo* cell, CB_LocInfo cb_loc)
{
102ca8d4:	e24dd0dc 	sub	sp, sp, #220	; 0xdc
102ca8d8:	e1a05000 	mov	r5, r0
	s32 ret = RIL_AT_SUCCESS;
	char strAT[200];
    callback_loc = cb_loc;        

	Ql_memset(strAT, 0, sizeof(strAT));
102ca8dc:	e3a020c8 	mov	r2, #200	; 0xc8

s32 RIL_GetLocationByCell(ST_CellInfo* cell, CB_LocInfo cb_loc)
{
	s32 ret = RIL_AT_SUCCESS;
	char strAT[200];
    callback_loc = cb_loc;        
102ca8e0:	e5831000 	str	r1, [r3]

	Ql_memset(strAT, 0, sizeof(strAT));
102ca8e4:	e59fa0b8 	ldr	sl, [pc, #184]	; 102ca9a4 <RIL_GetLocationByCell+0xdc>
102ca8e8:	e3a01000 	mov	r1, #0
102ca8ec:	e28d0010 	add	r0, sp, #16
102ca8f0:	e12fff3a 	blx	sl
	Ql_sprintf(strAT, "AT+QLOCCFG=\"ASYNCH\",1\r\n");
102ca8f4:	e5983000 	ldr	r3, [r8]
102ca8f8:	e59f10a8 	ldr	r1, [pc, #168]	; 102ca9a8 <RIL_GetLocationByCell+0xe0>
102ca8fc:	e28d0010 	add	r0, sp, #16
102ca900:	e12fff33 	blx	r3
	Ql_RIL_SendATCmd(strAT,Ql_strlen(strAT),NULL,NULL,0);
102ca904:	e59f70a0 	ldr	r7, [pc, #160]	; 102ca9ac <RIL_GetLocationByCell+0xe4>
102ca908:	e28d0010 	add	r0, sp, #16
102ca90c:	e12fff37 	blx	r7
102ca910:	e3a04000 	mov	r4, #0
102ca914:	e1a03004 	mov	r3, r4
102ca918:	e1a02004 	mov	r2, r4
102ca91c:	e58d4000 	str	r4, [sp]
102ca920:	e59f6088 	ldr	r6, [pc, #136]	; 102ca9b0 <RIL_GetLocationByCell+0xe8>
102ca924:	e1a01000 	mov	r1, r0
102ca928:	e28d0010 	add	r0, sp, #16
102ca92c:	e12fff36 	blx	r6
	if (RIL_AT_SUCCESS == ret)
	{
        Ql_memset(strAT, 0, sizeof(strAT));
102ca930:	e1a01004 	mov	r1, r4
102ca934:	e28d0010 	add	r0, sp, #16
102ca938:	e3a020c8 	mov	r2, #200	; 0xc8
102ca93c:	e12fff3a 	blx	sl
        Ql_sprintf(strAT, "AT+QCELLLOC=3,%d,%d,%d,%d,%d,%d\n",cell->cellId,cell->lac,cell->mnc,cell->mcc,cell->rssi,cell->timeAd);
102ca940:	e1d5e0b0 	ldrh	lr, [r5]
102ca944:	e1d5a0b2 	ldrh	sl, [r5, #2]
102ca948:	e1d5c0fc 	ldrsh	ip, [r5, #12]
102ca94c:	e1d500be 	ldrh	r0, [r5, #14]
102ca950:	e5952008 	ldr	r2, [r5, #8]
102ca954:	e5953004 	ldr	r3, [r5, #4]
102ca958:	e59f1054 	ldr	r1, [pc, #84]	; 102ca9b4 <RIL_GetLocationByCell+0xec>
102ca95c:	e88d4400 	stm	sp, {sl, lr}
102ca960:	e58dc008 	str	ip, [sp, #8]
102ca964:	e58d000c 	str	r0, [sp, #12]
102ca968:	e598c000 	ldr	ip, [r8]
102ca96c:	e28d0010 	add	r0, sp, #16
102ca970:	e12fff3c 	blx	ip
        ret = Ql_RIL_SendATCmd(strAT,Ql_strlen(strAT),NULL,NULL,0);
102ca974:	e28d0010 	add	r0, sp, #16
102ca978:	e12fff37 	blx	r7
102ca97c:	e1a02004 	mov	r2, r4
102ca980:	e58d4000 	str	r4, [sp]
102ca984:	e1a03004 	mov	r3, r4
102ca988:	e1a01000 	mov	r1, r0
102ca98c:	e28d0010 	add	r0, sp, #16
102ca990:	e12fff36 	blx	r6
    }
    return ret;
}
102ca994:	e28dd0dc 	add	sp, sp, #220	; 0xdc
102ca998:	e8bd85f0 	pop	{r4, r5, r6, r7, r8, sl, pc}
102ca99c:	f03d211c 	.word	0xf03d211c
102ca9a0:	f03d31e8 	.word	0xf03d31e8
102ca9a4:	102cd6b0 	.word	0x102cd6b0
102ca9a8:	102cf22c 	.word	0x102cf22c
102ca9ac:	102cd560 	.word	0x102cd560
102ca9b0:	102cd11c 	.word	0x102cd11c
102ca9b4:	102cf244 	.word	0x102cf244

102ca9b8 <OnURCHandler_QCELLLocation>:

void OnURCHandler_QCELLLocation(const char* strURC,void* reserved)
{
102ca9b8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	char buff[30];
	ST_LocInfo loclnfo; 
    s32 result;   
    u8* p = NULL;
    
 	if (NULL != callback_loc)
102ca9bc:	e59f4118 	ldr	r4, [pc, #280]	; 102caadc <OnURCHandler_QCELLLocation+0x124>
    }
    return ret;
}

void OnURCHandler_QCELLLocation(const char* strURC,void* reserved)
{
102ca9c0:	e24dd028 	sub	sp, sp, #40	; 0x28
	char buff[30];
	ST_LocInfo loclnfo; 
    s32 result;   
    u8* p = NULL;
    
 	if (NULL != callback_loc)
102ca9c4:	e5943000 	ldr	r3, [r4]
    }
    return ret;
}

void OnURCHandler_QCELLLocation(const char* strURC,void* reserved)
{
102ca9c8:	e1a05000 	mov	r5, r0
	char buff[30];
	ST_LocInfo loclnfo; 
    s32 result;   
    u8* p = NULL;
    
 	if (NULL != callback_loc)
102ca9cc:	e3530000 	cmp	r3, #0
102ca9d0:	0a00000e 	beq	102caa10 <OnURCHandler_QCELLLocation+0x58>
 	{
        p = strURC;
        if(Ql_strstr(p, ",") != NULL)
102ca9d4:	e59f1104 	ldr	r1, [pc, #260]	; 102caae0 <OnURCHandler_QCELLLocation+0x128>
102ca9d8:	e59f3104 	ldr	r3, [pc, #260]	; 102caae4 <OnURCHandler_QCELLLocation+0x12c>
102ca9dc:	e12fff33 	blx	r3
        {
    		Ql_strcpy(buff,"\r\n+QCELLLOC:\0");
102ca9e0:	e59f1100 	ldr	r1, [pc, #256]	; 102caae8 <OnURCHandler_QCELLLocation+0x130>
102ca9e4:	e59f3100 	ldr	r3, [pc, #256]	; 102caaec <OnURCHandler_QCELLLocation+0x134>
    u8* p = NULL;
    
 	if (NULL != callback_loc)
 	{
        p = strURC;
        if(Ql_strstr(p, ",") != NULL)
102ca9e8:	e3500000 	cmp	r0, #0
        {
    		Ql_strcpy(buff,"\r\n+QCELLLOC:\0");
102ca9ec:	e28d0008 	add	r0, sp, #8
    u8* p = NULL;
    
 	if (NULL != callback_loc)
 	{
        p = strURC;
        if(Ql_strstr(p, ",") != NULL)
102ca9f0:	0a000022 	beq	102caa80 <OnURCHandler_QCELLLocation+0xc8>
        {
    		Ql_strcpy(buff,"\r\n+QCELLLOC:\0");
102ca9f4:	e12fff33 	blx	r3
    		if(Ql_StrPrefixMatch(strURC,buff))
102ca9f8:	e1a00005 	mov	r0, r5
102ca9fc:	e28d1008 	add	r1, sp, #8
102caa00:	e59f30e8 	ldr	r3, [pc, #232]	; 102caaf0 <OnURCHandler_QCELLLocation+0x138>
102caa04:	e12fff33 	blx	r3
102caa08:	e3500000 	cmp	r0, #0
102caa0c:	1a000001 	bne	102caa18 <OnURCHandler_QCELLLocation+0x60>
                loclnfo.latitude = 0;
    			callback_loc(result,&loclnfo);
    		}
        }
	}
}
102caa10:	e28dd028 	add	sp, sp, #40	; 0x28
102caa14:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        if(Ql_strstr(p, ",") != NULL)
        {
    		Ql_strcpy(buff,"\r\n+QCELLLOC:\0");
    		if(Ql_StrPrefixMatch(strURC,buff))
    		{
    			Ql_sscanf(strURC,"%*[^:]: %[^,]",buff);
102caa18:	e59f80d4 	ldr	r8, [pc, #212]	; 102caaf4 <OnURCHandler_QCELLLocation+0x13c>
102caa1c:	e28d2008 	add	r2, sp, #8
102caa20:	e5983000 	ldr	r3, [r8]
102caa24:	e1a00005 	mov	r0, r5
102caa28:	e59f10c8 	ldr	r1, [pc, #200]	; 102caaf8 <OnURCHandler_QCELLLocation+0x140>
102caa2c:	e12fff33 	blx	r3
    			loclnfo.longitude = Ql_atof(buff);
102caa30:	e59f70c4 	ldr	r7, [pc, #196]	; 102caafc <OnURCHandler_QCELLLocation+0x144>
102caa34:	e28d0008 	add	r0, sp, #8
102caa38:	e12fff37 	blx	r7
102caa3c:	e59f60bc 	ldr	r6, [pc, #188]	; 102cab00 <OnURCHandler_QCELLLocation+0x148>
102caa40:	e12fff36 	blx	r6
    			
    			Ql_sscanf(strURC,"%*[^,],%[^\r\n]",buff);
102caa44:	e5983000 	ldr	r3, [r8]
102caa48:	e28d2008 	add	r2, sp, #8
102caa4c:	e59f10b0 	ldr	r1, [pc, #176]	; 102cab04 <OnURCHandler_QCELLLocation+0x14c>
        {
    		Ql_strcpy(buff,"\r\n+QCELLLOC:\0");
    		if(Ql_StrPrefixMatch(strURC,buff))
    		{
    			Ql_sscanf(strURC,"%*[^:]: %[^,]",buff);
    			loclnfo.longitude = Ql_atof(buff);
102caa50:	e58d0000 	str	r0, [sp]
    			
    			Ql_sscanf(strURC,"%*[^,],%[^\r\n]",buff);
102caa54:	e1a00005 	mov	r0, r5
102caa58:	e12fff33 	blx	r3
    			loclnfo.latitude = Ql_atof(buff);
102caa5c:	e28d0008 	add	r0, sp, #8
102caa60:	e12fff37 	blx	r7
102caa64:	e12fff36 	blx	r6

    			callback_loc(0,&loclnfo);
102caa68:	e5943000 	ldr	r3, [r4]
102caa6c:	e1a0100d 	mov	r1, sp
    		{
    			Ql_sscanf(strURC,"%*[^:]: %[^,]",buff);
    			loclnfo.longitude = Ql_atof(buff);
    			
    			Ql_sscanf(strURC,"%*[^,],%[^\r\n]",buff);
    			loclnfo.latitude = Ql_atof(buff);
102caa70:	e58d0004 	str	r0, [sp, #4]

    			callback_loc(0,&loclnfo);
102caa74:	e3a00000 	mov	r0, #0
102caa78:	e12fff33 	blx	r3
102caa7c:	eaffffe3 	b	102caa10 <OnURCHandler_QCELLLocation+0x58>
                
    		}
        }
        else
        {
            Ql_strcpy(buff,"\r\n+QCELLLOC:\0");
102caa80:	e12fff33 	blx	r3
    		if(Ql_StrPrefixMatch(strURC,buff))
102caa84:	e1a00005 	mov	r0, r5
102caa88:	e28d1008 	add	r1, sp, #8
102caa8c:	e59f305c 	ldr	r3, [pc, #92]	; 102caaf0 <OnURCHandler_QCELLLocation+0x138>
102caa90:	e12fff33 	blx	r3
102caa94:	e3500000 	cmp	r0, #0
102caa98:	0affffdc 	beq	102caa10 <OnURCHandler_QCELLLocation+0x58>
    		{
    			Ql_sscanf(strURC,"%*[^:]: %[^\r\n]",buff);
102caa9c:	e59f3050 	ldr	r3, [pc, #80]	; 102caaf4 <OnURCHandler_QCELLLocation+0x13c>
102caaa0:	e59f1060 	ldr	r1, [pc, #96]	; 102cab08 <OnURCHandler_QCELLLocation+0x150>
102caaa4:	e28d2008 	add	r2, sp, #8
102caaa8:	e5933000 	ldr	r3, [r3]
102caaac:	e1a00005 	mov	r0, r5
102caab0:	e12fff33 	blx	r3
                RIL_LOC_DEBUG(DBG_Buffer,"<-- +QCELLLOC: %s-->\r\n",buff);
    			result = Ql_atoi(buff);
102caab4:	e28d0008 	add	r0, sp, #8
102caab8:	e59f304c 	ldr	r3, [pc, #76]	; 102cab0c <OnURCHandler_QCELLLocation+0x154>
102caabc:	e12fff33 	blx	r3
                loclnfo.longitude = 0;
102caac0:	e3a03000 	mov	r3, #0
102caac4:	e58d3000 	str	r3, [sp]
                loclnfo.latitude = 0;
102caac8:	e58d3004 	str	r3, [sp, #4]
    			callback_loc(result,&loclnfo);
102caacc:	e1a0100d 	mov	r1, sp
102caad0:	e5943000 	ldr	r3, [r4]
102caad4:	e12fff33 	blx	r3
102caad8:	eaffffcc 	b	102caa10 <OnURCHandler_QCELLLocation+0x58>
102caadc:	f03d211c 	.word	0xf03d211c
102caae0:	102cf268 	.word	0x102cf268
102caae4:	102cd7c0 	.word	0x102cd7c0
102caae8:	102ce19c 	.word	0x102ce19c
102caaec:	102cd438 	.word	0x102cd438
102caaf0:	102cbda0 	.word	0x102cbda0
102caaf4:	f03d31f0 	.word	0xf03d31f0
102caaf8:	102cf138 	.word	0x102cf138
102caafc:	102cd3a0 	.word	0x102cd3a0
102cab00:	102cc674 	.word	0x102cc674
102cab04:	102cf148 	.word	0x102cf148
102cab08:	102cf170 	.word	0x102cf170
102cab0c:	102cd848 	.word	0x102cd848

102cab10 <OnURCHandler_NTPCMD>:
#include "ql_trace.h"

static CB_NTPCMD     callback_NTPCMD = NULL;

void OnURCHandler_NTPCMD(const char* strURC, void* reserved)
{
102cab10:	e92d4030 	push	{r4, r5, lr}
	char urcHead[] = "\r\n+QNTP:\0";
102cab14:	e59f3054 	ldr	r3, [pc, #84]	; 102cab70 <OnURCHandler_NTPCMD+0x60>
        
 	if ( NULL != callback_NTPCMD )
102cab18:	e59f4054 	ldr	r4, [pc, #84]	; 102cab74 <OnURCHandler_NTPCMD+0x64>
#include "ql_trace.h"

static CB_NTPCMD     callback_NTPCMD = NULL;

void OnURCHandler_NTPCMD(const char* strURC, void* reserved)
{
102cab1c:	e1a05000 	mov	r5, r0
	char urcHead[] = "\r\n+QNTP:\0";
        
 	if ( NULL != callback_NTPCMD )
102cab20:	e594c000 	ldr	ip, [r4]

static CB_NTPCMD     callback_NTPCMD = NULL;

void OnURCHandler_NTPCMD(const char* strURC, void* reserved)
{
	char urcHead[] = "\r\n+QNTP:\0";
102cab24:	e8930007 	ldm	r3, {r0, r1, r2}
#include "ql_trace.h"

static CB_NTPCMD     callback_NTPCMD = NULL;

void OnURCHandler_NTPCMD(const char* strURC, void* reserved)
{
102cab28:	e24dd014 	sub	sp, sp, #20
	char urcHead[] = "\r\n+QNTP:\0";
102cab2c:	e28d3004 	add	r3, sp, #4
        
 	if ( NULL != callback_NTPCMD )
102cab30:	e35c0000 	cmp	ip, #0

static CB_NTPCMD     callback_NTPCMD = NULL;

void OnURCHandler_NTPCMD(const char* strURC, void* reserved)
{
	char urcHead[] = "\r\n+QNTP:\0";
102cab34:	e8a30003 	stmia	r3!, {r0, r1}
102cab38:	e1c320b0 	strh	r2, [r3]
        
 	if ( NULL != callback_NTPCMD )
102cab3c:	0a000005 	beq	102cab58 <OnURCHandler_NTPCMD+0x48>
 	{
		if( Ql_StrPrefixMatch(strURC, urcHead) )
102cab40:	e1a00005 	mov	r0, r5
102cab44:	e28d1004 	add	r1, sp, #4
102cab48:	e59f3028 	ldr	r3, [pc, #40]	; 102cab78 <OnURCHandler_NTPCMD+0x68>
102cab4c:	e12fff33 	blx	r3
102cab50:	e3500000 	cmp	r0, #0
102cab54:	1a000001 	bne	102cab60 <OnURCHandler_NTPCMD+0x50>
		{
			callback_NTPCMD(strURC);
		}
	}
}
102cab58:	e28dd014 	add	sp, sp, #20
102cab5c:	e8bd8030 	pop	{r4, r5, pc}
        
 	if ( NULL != callback_NTPCMD )
 	{
		if( Ql_StrPrefixMatch(strURC, urcHead) )
		{
			callback_NTPCMD(strURC);
102cab60:	e5943000 	ldr	r3, [r4]
102cab64:	e1a00005 	mov	r0, r5
102cab68:	e12fff33 	blx	r3
102cab6c:	eafffff9 	b	102cab58 <OnURCHandler_NTPCMD+0x48>
102cab70:	102ce1ac 	.word	0x102ce1ac
102cab74:	f03d2120 	.word	0xf03d2120
102cab78:	102cbda0 	.word	0x102cbda0

102cab7c <RIL_NTP_START>:
		}
	}
}

s32 RIL_NTP_START(u8 *server_addr, u16 server_port, CB_NTPCMD cb_NTPCMD_hdl)
{
102cab7c:	e92d4030 	push	{r4, r5, lr}
	s32 ret = RIL_AT_FAILED;
	char strAT[200]; 

    if (server_addr == NULL)
102cab80:	e2505000 	subs	r5, r0, #0
		}
	}
}

s32 RIL_NTP_START(u8 *server_addr, u16 server_port, CB_NTPCMD cb_NTPCMD_hdl)
{
102cab84:	e24dd0d4 	sub	sp, sp, #212	; 0xd4
102cab88:	e1a04001 	mov	r4, r1
102cab8c:	e1a03002 	mov	r3, r2
	s32 ret = RIL_AT_FAILED;
	char strAT[200]; 

    if (server_addr == NULL)
102cab90:	0a000019 	beq	102cabfc <RIL_NTP_START+0x80>
    {
        return RIL_AT_INVALID_PARAM;
    }

    callback_NTPCMD = cb_NTPCMD_hdl;
102cab94:	e59fc068 	ldr	ip, [pc, #104]	; 102cac04 <RIL_NTP_START+0x88>
    
	Ql_memset( strAT, 0, sizeof(strAT) );
102cab98:	e3a01000 	mov	r1, #0
    if (server_addr == NULL)
    {
        return RIL_AT_INVALID_PARAM;
    }

    callback_NTPCMD = cb_NTPCMD_hdl;
102cab9c:	e58c3000 	str	r3, [ip]
    
	Ql_memset( strAT, 0, sizeof(strAT) );
102caba0:	e3a020c8 	mov	r2, #200	; 0xc8
102caba4:	e59f305c 	ldr	r3, [pc, #92]	; 102cac08 <RIL_NTP_START+0x8c>
102caba8:	e28d0008 	add	r0, sp, #8
102cabac:	e12fff33 	blx	r3
	Ql_sprintf( strAT, "AT+QNTP=\"%s\",%d\r\n", server_addr, server_port);
102cabb0:	e59f0054 	ldr	r0, [pc, #84]	; 102cac0c <RIL_NTP_START+0x90>
102cabb4:	e59f1054 	ldr	r1, [pc, #84]	; 102cac10 <RIL_NTP_START+0x94>
102cabb8:	e590c000 	ldr	ip, [r0]
102cabbc:	e1a02005 	mov	r2, r5
102cabc0:	e1a03004 	mov	r3, r4
102cabc4:	e28d0008 	add	r0, sp, #8
102cabc8:	e12fff3c 	blx	ip
	ret = Ql_RIL_SendATCmd( strAT, Ql_strlen(strAT), NULL, NULL, 0 ) ;
102cabcc:	e59f3040 	ldr	r3, [pc, #64]	; 102cac14 <RIL_NTP_START+0x98>
102cabd0:	e28d0008 	add	r0, sp, #8
102cabd4:	e12fff33 	blx	r3
102cabd8:	e3a03000 	mov	r3, #0
102cabdc:	e1a02003 	mov	r2, r3
102cabe0:	e58d3000 	str	r3, [sp]
102cabe4:	e59fc02c 	ldr	ip, [pc, #44]	; 102cac18 <RIL_NTP_START+0x9c>
102cabe8:	e1a01000 	mov	r1, r0
102cabec:	e28d0008 	add	r0, sp, #8
102cabf0:	e12fff3c 	blx	ip
    
    return ret;
}
102cabf4:	e28dd0d4 	add	sp, sp, #212	; 0xd4
102cabf8:	e8bd8030 	pop	{r4, r5, pc}
	s32 ret = RIL_AT_FAILED;
	char strAT[200]; 

    if (server_addr == NULL)
    {
        return RIL_AT_INVALID_PARAM;
102cabfc:	e3e00003 	mvn	r0, #3
102cac00:	eafffffb 	b	102cabf4 <RIL_NTP_START+0x78>
102cac04:	f03d2120 	.word	0xf03d2120
102cac08:	102cd6b0 	.word	0x102cd6b0
102cac0c:	f03d31e8 	.word	0xf03d31e8
102cac10:	102cf26c 	.word	0x102cf26c
102cac14:	102cd560 	.word	0x102cd560
102cac18:	102cd11c 	.word	0x102cd11c

102cac1c <ATRsp_CCID_Handler>:
    }
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), ATRsp_IMSI_Handler,(void*)imsi, 0);
}

static s32 ATRsp_CCID_Handler(char* line, u32 len, void* param)
{
102cac1c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
102cac20:	e1a05002 	mov	r5, r2
    char* pHead = Ql_RIL_FindString(line, len, "+CCID:");
102cac24:	e59f4094 	ldr	r4, [pc, #148]	; 102cacc0 <ATRsp_CCID_Handler+0xa4>
102cac28:	e59f2094 	ldr	r2, [pc, #148]	; 102cacc4 <ATRsp_CCID_Handler+0xa8>
    }
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), ATRsp_IMSI_Handler,(void*)imsi, 0);
}

static s32 ATRsp_CCID_Handler(char* line, u32 len, void* param)
{
102cac2c:	e1a07000 	mov	r7, r0
102cac30:	e1a06001 	mov	r6, r1
    char* pHead = Ql_RIL_FindString(line, len, "+CCID:");
102cac34:	e12fff34 	blx	r4
    if (pHead)
102cac38:	e2508000 	subs	r8, r0, #0
102cac3c:	0a000006 	beq	102cac5c <ATRsp_CCID_Handler+0x40>
    {
        Ql_sscanf(pHead,"%*[^: \"]: \"%[^\"\r\n]", (char*)param);
102cac40:	e59f3080 	ldr	r3, [pc, #128]	; 102cacc8 <ATRsp_CCID_Handler+0xac>
102cac44:	e59f1080 	ldr	r1, [pc, #128]	; 102caccc <ATRsp_CCID_Handler+0xb0>
102cac48:	e5933000 	ldr	r3, [r3]
102cac4c:	e1a02005 	mov	r2, r5
102cac50:	e12fff33 	blx	r3
        return  RIL_ATRSP_CONTINUE; // wait for OK
102cac54:	e3a00001 	mov	r0, #1
102cac58:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    }

    pHead = Ql_RIL_FindLine(line, len, "OK"); // find <CR><LF>OK<CR><LF>, <CR>OK<CR>£¬<LF>OK<LF>
102cac5c:	e1a00007 	mov	r0, r7
102cac60:	e1a01006 	mov	r1, r6
102cac64:	e59f2064 	ldr	r2, [pc, #100]	; 102cacd0 <ATRsp_CCID_Handler+0xb4>
102cac68:	e59f5064 	ldr	r5, [pc, #100]	; 102cacd4 <ATRsp_CCID_Handler+0xb8>
102cac6c:	e12fff35 	blx	r5
    if (pHead)
102cac70:	e3500000 	cmp	r0, #0
102cac74:	0a000001 	beq	102cac80 <ATRsp_CCID_Handler+0x64>
    {  
        return RIL_ATRSP_SUCCESS;
102cac78:	e1a00008 	mov	r0, r8
102cac7c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    }

    pHead = Ql_RIL_FindLine(line, len, "ERROR");// find <CR><LF>ERROR<CR><LF>, <CR>ERROR<CR>£¬<LF>ERROR<LF>
102cac80:	e1a00007 	mov	r0, r7
102cac84:	e1a01006 	mov	r1, r6
102cac88:	e59f2048 	ldr	r2, [pc, #72]	; 102cacd8 <ATRsp_CCID_Handler+0xbc>
102cac8c:	e12fff35 	blx	r5
    if (pHead)
102cac90:	e3500000 	cmp	r0, #0
102cac94:	1a000007 	bne	102cacb8 <ATRsp_CCID_Handler+0x9c>
    {  
        return RIL_ATRSP_FAILED;
    } 

    pHead = Ql_RIL_FindString(line, len, "+CME ERROR:");//fail
102cac98:	e1a00007 	mov	r0, r7
102cac9c:	e1a01006 	mov	r1, r6
102caca0:	e59f2034 	ldr	r2, [pc, #52]	; 102cacdc <ATRsp_CCID_Handler+0xc0>
102caca4:	e12fff34 	blx	r4
    if (pHead)
102caca8:	e3500000 	cmp	r0, #0
    {
        return RIL_ATRSP_FAILED;
102cacac:	03a00001 	moveq	r0, #1
102cacb0:	13e00000 	mvnne	r0, #0
102cacb4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    }

    pHead = Ql_RIL_FindLine(line, len, "ERROR");// find <CR><LF>ERROR<CR><LF>, <CR>ERROR<CR>£¬<LF>ERROR<LF>
    if (pHead)
    {  
        return RIL_ATRSP_FAILED;
102cacb8:	e3e00000 	mvn	r0, #0
    {
        return RIL_ATRSP_FAILED;
    }

    return RIL_ATRSP_CONTINUE; //continue wait
}
102cacbc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
102cacc0:	102cbee0 	.word	0x102cbee0
102cacc4:	102cf280 	.word	0x102cf280
102cacc8:	f03d31f0 	.word	0xf03d31f0
102caccc:	102cf288 	.word	0x102cf288
102cacd0:	102ceb70 	.word	0x102ceb70
102cacd4:	102cbf6c 	.word	0x102cbf6c
102cacd8:	102ceb74 	.word	0x102ceb74
102cacdc:	102ceb7c 	.word	0x102ceb7c

102cace0 <ATRsp_IMSI_Handler>:
    }
    return retRes;
}

static s32 ATRsp_IMSI_Handler(char* line, u32 len, void* param)
{
102cace0:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
102cace4:	e1a07002 	mov	r7, r2
    char* pHead = NULL;
    pHead = Ql_RIL_FindLine(line, len, "OK"); // find <CR><LF>OK<CR><LF>, <CR>OK<CR>£¬<LF>OK<LF>
102cace8:	e59f4074 	ldr	r4, [pc, #116]	; 102cad64 <ATRsp_IMSI_Handler+0x84>
102cacec:	e59f2074 	ldr	r2, [pc, #116]	; 102cad68 <ATRsp_IMSI_Handler+0x88>
    }
    return retRes;
}

static s32 ATRsp_IMSI_Handler(char* line, u32 len, void* param)
{
102cacf0:	e1a06000 	mov	r6, r0
102cacf4:	e1a05001 	mov	r5, r1
    char* pHead = NULL;
    pHead = Ql_RIL_FindLine(line, len, "OK"); // find <CR><LF>OK<CR><LF>, <CR>OK<CR>£¬<LF>OK<LF>
102cacf8:	e12fff34 	blx	r4
    if (pHead)
102cacfc:	e3500000 	cmp	r0, #0
102cad00:	0a000001 	beq	102cad0c <ATRsp_IMSI_Handler+0x2c>
    {  
        return RIL_ATRSP_SUCCESS;
102cad04:	e3a00000 	mov	r0, #0
    {
        return RIL_ATRSP_FAILED;
    }
    Ql_memcpy((char*)param, line+2, len - 4); // <imsi number>\r\n
    return RIL_ATRSP_CONTINUE; //continue wait
}
102cad08:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
    if (pHead)
    {  
        return RIL_ATRSP_SUCCESS;
    }

    pHead = Ql_RIL_FindLine(line, len, "ERROR");// find <CR><LF>ERROR<CR><LF>, <CR>ERROR<CR>£¬<LF>ERROR<LF>
102cad0c:	e1a00006 	mov	r0, r6
102cad10:	e1a01005 	mov	r1, r5
102cad14:	e59f2050 	ldr	r2, [pc, #80]	; 102cad6c <ATRsp_IMSI_Handler+0x8c>
102cad18:	e12fff34 	blx	r4
    if (pHead)
102cad1c:	e3500000 	cmp	r0, #0
102cad20:	1a00000d 	bne	102cad5c <ATRsp_IMSI_Handler+0x7c>
    {  
        return RIL_ATRSP_FAILED;
    } 

    pHead = Ql_RIL_FindString(line, len, "+CME ERROR:");//fail
102cad24:	e1a00006 	mov	r0, r6
102cad28:	e1a01005 	mov	r1, r5
102cad2c:	e59f203c 	ldr	r2, [pc, #60]	; 102cad70 <ATRsp_IMSI_Handler+0x90>
102cad30:	e59f303c 	ldr	r3, [pc, #60]	; 102cad74 <ATRsp_IMSI_Handler+0x94>
102cad34:	e12fff33 	blx	r3
    if (pHead)
102cad38:	e3500000 	cmp	r0, #0
102cad3c:	1a000006 	bne	102cad5c <ATRsp_IMSI_Handler+0x7c>
    {
        return RIL_ATRSP_FAILED;
    }
    Ql_memcpy((char*)param, line+2, len - 4); // <imsi number>\r\n
102cad40:	e1a00007 	mov	r0, r7
102cad44:	e2861002 	add	r1, r6, #2
102cad48:	e2452004 	sub	r2, r5, #4
102cad4c:	e59f3024 	ldr	r3, [pc, #36]	; 102cad78 <ATRsp_IMSI_Handler+0x98>
102cad50:	e12fff33 	blx	r3
102cad54:	e3a00001 	mov	r0, #1
102cad58:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
    }

    pHead = Ql_RIL_FindLine(line, len, "ERROR");// find <CR><LF>ERROR<CR><LF>, <CR>ERROR<CR>£¬<LF>ERROR<LF>
    if (pHead)
    {  
        return RIL_ATRSP_FAILED;
102cad5c:	e3e00000 	mvn	r0, #0
102cad60:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
102cad64:	102cbf6c 	.word	0x102cbf6c
102cad68:	102ceb70 	.word	0x102ceb70
102cad6c:	102ceb74 	.word	0x102ceb74
102cad70:	102ceb7c 	.word	0x102ceb7c
102cad74:	102cbee0 	.word	0x102cbee0
102cad78:	102cd738 	.word	0x102cd738

102cad7c <RIL_SIM_GetSimStateByName>:
#include "ql_trace.h"

#ifdef __OCPU_RIL_SUPPORT__

s32 RIL_SIM_GetSimStateByName(char* simStat, u32 len)
{
102cad7c:	e92d4070 	push	{r4, r5, r6, lr}
    s32 ss = SIM_STAT_UNSPECIFIED;
    if (Ql_strncmp(simStat, "READY", len) == 0)
102cad80:	e1a02001 	mov	r2, r1
#include "ql_trace.h"

#ifdef __OCPU_RIL_SUPPORT__

s32 RIL_SIM_GetSimStateByName(char* simStat, u32 len)
{
102cad84:	e1a05001 	mov	r5, r1
    s32 ss = SIM_STAT_UNSPECIFIED;
    if (Ql_strncmp(simStat, "READY", len) == 0)
102cad88:	e59f4130 	ldr	r4, [pc, #304]	; 102caec0 <RIL_SIM_GetSimStateByName+0x144>
102cad8c:	e59f1130 	ldr	r1, [pc, #304]	; 102caec4 <RIL_SIM_GetSimStateByName+0x148>
#include "ql_trace.h"

#ifdef __OCPU_RIL_SUPPORT__

s32 RIL_SIM_GetSimStateByName(char* simStat, u32 len)
{
102cad90:	e1a06000 	mov	r6, r0
    s32 ss = SIM_STAT_UNSPECIFIED;
    if (Ql_strncmp(simStat, "READY", len) == 0)
102cad94:	e12fff34 	blx	r4
102cad98:	e3500000 	cmp	r0, #0
102cad9c:	1a000001 	bne	102cada8 <RIL_SIM_GetSimStateByName+0x2c>
    {
        ss = SIM_STAT_READY;
102cada0:	e3a00001 	mov	r0, #1
102cada4:	e8bd8070 	pop	{r4, r5, r6, pc}
    }
    else if (Ql_strncmp(simStat, "NOT INSERTED", len) == 0)
102cada8:	e1a00006 	mov	r0, r6
102cadac:	e59f1114 	ldr	r1, [pc, #276]	; 102caec8 <RIL_SIM_GetSimStateByName+0x14c>
102cadb0:	e1a02005 	mov	r2, r5
102cadb4:	e12fff34 	blx	r4
102cadb8:	e3500000 	cmp	r0, #0
102cadbc:	08bd8070 	popeq	{r4, r5, r6, pc}
    {
        ss = SIM_STAT_NOT_INSERTED;
    }
    else if (Ql_strncmp(simStat, "SIM PIN", len) == 0)
102cadc0:	e1a00006 	mov	r0, r6
102cadc4:	e59f1100 	ldr	r1, [pc, #256]	; 102caecc <RIL_SIM_GetSimStateByName+0x150>
102cadc8:	e1a02005 	mov	r2, r5
102cadcc:	e12fff34 	blx	r4
102cadd0:	e3500000 	cmp	r0, #0
102cadd4:	1a000001 	bne	102cade0 <RIL_SIM_GetSimStateByName+0x64>
    {
        ss = SIM_STAT_PIN_REQ;
102cadd8:	e3a00002 	mov	r0, #2
102caddc:	e8bd8070 	pop	{r4, r5, r6, pc}
    }
    else if (Ql_strncmp(simStat, "SIM PUK", len) == 0)
102cade0:	e1a00006 	mov	r0, r6
102cade4:	e59f10e4 	ldr	r1, [pc, #228]	; 102caed0 <RIL_SIM_GetSimStateByName+0x154>
102cade8:	e1a02005 	mov	r2, r5
102cadec:	e12fff34 	blx	r4
102cadf0:	e3500000 	cmp	r0, #0
102cadf4:	1a000001 	bne	102cae00 <RIL_SIM_GetSimStateByName+0x84>
    {
        ss = SIM_STAT_PUK_REQ;
102cadf8:	e3a00003 	mov	r0, #3
102cadfc:	e8bd8070 	pop	{r4, r5, r6, pc}
    }
    else if (Ql_strncmp(simStat, "PH-SIM PIN", len) == 0)
102cae00:	e1a00006 	mov	r0, r6
102cae04:	e59f10c8 	ldr	r1, [pc, #200]	; 102caed4 <RIL_SIM_GetSimStateByName+0x158>
102cae08:	e1a02005 	mov	r2, r5
102cae0c:	e12fff34 	blx	r4
102cae10:	e3500000 	cmp	r0, #0
102cae14:	1a000001 	bne	102cae20 <RIL_SIM_GetSimStateByName+0xa4>
    {
        ss = SIM_STAT_PH_PIN_REQ;
102cae18:	e3a00004 	mov	r0, #4
102cae1c:	e8bd8070 	pop	{r4, r5, r6, pc}
    }
    else if (Ql_strncmp(simStat, "PH-SIM PUK", len) == 0)
102cae20:	e1a00006 	mov	r0, r6
102cae24:	e59f10ac 	ldr	r1, [pc, #172]	; 102caed8 <RIL_SIM_GetSimStateByName+0x15c>
102cae28:	e1a02005 	mov	r2, r5
102cae2c:	e12fff34 	blx	r4
102cae30:	e3500000 	cmp	r0, #0
102cae34:	1a000001 	bne	102cae40 <RIL_SIM_GetSimStateByName+0xc4>
    {
        ss = SIM_STAT_PH_PUK_REQ;
102cae38:	e3a00005 	mov	r0, #5
102cae3c:	e8bd8070 	pop	{r4, r5, r6, pc}
    }
    else if (Ql_strncmp(simStat, "SIM PIN2", len) == 0)
102cae40:	e1a00006 	mov	r0, r6
102cae44:	e59f1090 	ldr	r1, [pc, #144]	; 102caedc <RIL_SIM_GetSimStateByName+0x160>
102cae48:	e1a02005 	mov	r2, r5
102cae4c:	e12fff34 	blx	r4
102cae50:	e3500000 	cmp	r0, #0
102cae54:	1a000001 	bne	102cae60 <RIL_SIM_GetSimStateByName+0xe4>
    {
        ss = SIM_STAT_PIN2_REQ;
102cae58:	e3a00006 	mov	r0, #6
102cae5c:	e8bd8070 	pop	{r4, r5, r6, pc}
    }
    else if (Ql_strncmp(simStat, "SIM PUK2", len) == 0)
102cae60:	e1a00006 	mov	r0, r6
102cae64:	e59f1074 	ldr	r1, [pc, #116]	; 102caee0 <RIL_SIM_GetSimStateByName+0x164>
102cae68:	e1a02005 	mov	r2, r5
102cae6c:	e12fff34 	blx	r4
102cae70:	e3500000 	cmp	r0, #0
102cae74:	1a000001 	bne	102cae80 <RIL_SIM_GetSimStateByName+0x104>
    {
        ss = SIM_STAT_PUK2_REQ;
102cae78:	e3a00007 	mov	r0, #7
102cae7c:	e8bd8070 	pop	{r4, r5, r6, pc}
    }
    else if (Ql_strncmp(simStat, "SIM BUSY", len) == 0)
102cae80:	e1a00006 	mov	r0, r6
102cae84:	e59f1058 	ldr	r1, [pc, #88]	; 102caee4 <RIL_SIM_GetSimStateByName+0x168>
102cae88:	e1a02005 	mov	r2, r5
102cae8c:	e12fff34 	blx	r4
102cae90:	e3500000 	cmp	r0, #0
102cae94:	1a000001 	bne	102caea0 <RIL_SIM_GetSimStateByName+0x124>
    {
        ss = SIM_STAT_BUSY;
102cae98:	e3a00008 	mov	r0, #8
    else if (Ql_strncmp(simStat, "NOT READY", len) == 0)
    {
        ss = SIM_STAT_NOT_READY;
    }
    return ss;
}
102cae9c:	e8bd8070 	pop	{r4, r5, r6, pc}
    }
    else if (Ql_strncmp(simStat, "SIM BUSY", len) == 0)
    {
        ss = SIM_STAT_BUSY;
    }
    else if (Ql_strncmp(simStat, "NOT READY", len) == 0)
102caea0:	e1a00006 	mov	r0, r6
102caea4:	e59f103c 	ldr	r1, [pc, #60]	; 102caee8 <RIL_SIM_GetSimStateByName+0x16c>
102caea8:	e1a02005 	mov	r2, r5
102caeac:	e12fff34 	blx	r4

#ifdef __OCPU_RIL_SUPPORT__

s32 RIL_SIM_GetSimStateByName(char* simStat, u32 len)
{
    s32 ss = SIM_STAT_UNSPECIFIED;
102caeb0:	e3500000 	cmp	r0, #0
102caeb4:	03a00009 	moveq	r0, #9
102caeb8:	13a0000a 	movne	r0, #10
102caebc:	e8bd8070 	pop	{r4, r5, r6, pc}
102caec0:	102cd640 	.word	0x102cd640
102caec4:	102cf2fc 	.word	0x102cf2fc
102caec8:	102cf29c 	.word	0x102cf29c
102caecc:	102cf2ac 	.word	0x102cf2ac
102caed0:	102cf2b4 	.word	0x102cf2b4
102caed4:	102cf2bc 	.word	0x102cf2bc
102caed8:	102cf2c8 	.word	0x102cf2c8
102caedc:	102cf2d4 	.word	0x102cf2d4
102caee0:	102cf2e0 	.word	0x102cf2e0
102caee4:	102cf2ec 	.word	0x102cf2ec
102caee8:	102cf2f8 	.word	0x102cf2f8

102caeec <ATResponse_CPIN_Handler>:
*               1.Can't send any new AT commands in this function.
*               2.RIL handle the AT response line by line, so this function may 
*                 be called multiple times.
******************************************************************************/
static s32 ATResponse_CPIN_Handler(char* line, u32 len, void* userdata)
{
102caeec:	e92d45f0 	push	{r4, r5, r6, r7, r8, sl, lr}
102caef0:	e1a06002 	mov	r6, r2
102caef4:	e24dd06c 	sub	sp, sp, #108	; 0x6c
    s32 *result = (s32 *)userdata;
    char *head = Ql_RIL_FindString(line, len, "+CPIN:"); //continue wait
102caef8:	e59f5128 	ldr	r5, [pc, #296]	; 102cb028 <ATResponse_CPIN_Handler+0x13c>
102caefc:	e59f2128 	ldr	r2, [pc, #296]	; 102cb02c <ATResponse_CPIN_Handler+0x140>
*               1.Can't send any new AT commands in this function.
*               2.RIL handle the AT response line by line, so this function may 
*                 be called multiple times.
******************************************************************************/
static s32 ATResponse_CPIN_Handler(char* line, u32 len, void* userdata)
{
102caf00:	e1a08000 	mov	r8, r0
102caf04:	e1a07001 	mov	r7, r1
    s32 *result = (s32 *)userdata;
    char *head = Ql_RIL_FindString(line, len, "+CPIN:"); //continue wait
102caf08:	e12fff35 	blx	r5
    if(head)
102caf0c:	e2504000 	subs	r4, r0, #0
102caf10:	0a00001e 	beq	102caf90 <ATResponse_CPIN_Handler+0xa4>
    {
        char str[100] = {0};
102caf14:	e3a02064 	mov	r2, #100	; 0x64
102caf18:	e3a01000 	mov	r1, #0
102caf1c:	e59f310c 	ldr	r3, [pc, #268]	; 102cb030 <ATResponse_CPIN_Handler+0x144>
102caf20:	e28d0004 	add	r0, sp, #4
102caf24:	e12fff33 	blx	r3
        char *p = NULL;
        char *q = NULL; 
        p = head + Ql_strlen("+CPIN: ");
102caf28:	e59f5104 	ldr	r5, [pc, #260]	; 102cb034 <ATResponse_CPIN_Handler+0x148>
102caf2c:	e59f0104 	ldr	r0, [pc, #260]	; 102cb038 <ATResponse_CPIN_Handler+0x14c>
102caf30:	e12fff35 	blx	r5
        q = Ql_strstr(p,"\r\n");
102caf34:	e59f1100 	ldr	r1, [pc, #256]	; 102cb03c <ATResponse_CPIN_Handler+0x150>
102caf38:	e59f3100 	ldr	r3, [pc, #256]	; 102cb040 <ATResponse_CPIN_Handler+0x154>
    if(head)
    {
        char str[100] = {0};
        char *p = NULL;
        char *q = NULL; 
        p = head + Ql_strlen("+CPIN: ");
102caf3c:	e0844000 	add	r4, r4, r0
        q = Ql_strstr(p,"\r\n");
102caf40:	e1a00004 	mov	r0, r4
102caf44:	e12fff33 	blx	r3
        if (p)
102caf48:	e3540000 	cmp	r4, #0
    {
        char str[100] = {0};
        char *p = NULL;
        char *q = NULL; 
        p = head + Ql_strlen("+CPIN: ");
        q = Ql_strstr(p,"\r\n");
102caf4c:	e1a02000 	mov	r2, r0
        if (p)
102caf50:	0a000004 	beq	102caf68 <ATResponse_CPIN_Handler+0x7c>
        {
            Ql_memcpy(str, p, q - p);
102caf54:	e1a01004 	mov	r1, r4
102caf58:	e28d0004 	add	r0, sp, #4
102caf5c:	e0642002 	rsb	r2, r4, r2
102caf60:	e59f30dc 	ldr	r3, [pc, #220]	; 102cb044 <ATResponse_CPIN_Handler+0x158>
102caf64:	e12fff33 	blx	r3
        }
        
        *result = RIL_SIM_GetSimStateByName(str,Ql_strlen(str));
102caf68:	e28d0004 	add	r0, sp, #4
102caf6c:	e12fff35 	blx	r5
        return  RIL_ATRSP_SUCCESS;
102caf70:	e3a04000 	mov	r4, #0
        if (p)
        {
            Ql_memcpy(str, p, q - p);
        }
        
        *result = RIL_SIM_GetSimStateByName(str,Ql_strlen(str));
102caf74:	e1a01000 	mov	r1, r0
102caf78:	e28d0004 	add	r0, sp, #4
102caf7c:	ebffff7e 	bl	102cad7c <RIL_SIM_GetSimStateByName>
102caf80:	e5860000 	str	r0, [r6]
        *result = RIL_SIM_GetSimStateByErrCode(err);
        return  RIL_ATRSP_FAILED;
    }

    return RIL_ATRSP_CONTINUE; //continue wait
}
102caf84:	e1a00004 	mov	r0, r4
102caf88:	e28dd06c 	add	sp, sp, #108	; 0x6c
102caf8c:	e8bd85f0 	pop	{r4, r5, r6, r7, r8, sl, pc}
        
        *result = RIL_SIM_GetSimStateByName(str,Ql_strlen(str));
        return  RIL_ATRSP_SUCCESS;
    }

   head = Ql_RIL_FindLine(line, len, "OK"); // find <CR><LF>OK<CR><LF>, <CR>OK<CR>£¬<LF>OK<LF>
102caf90:	e1a00008 	mov	r0, r8
102caf94:	e1a01007 	mov	r1, r7
102caf98:	e59f20a8 	ldr	r2, [pc, #168]	; 102cb048 <ATResponse_CPIN_Handler+0x15c>
102caf9c:	e59fa0a8 	ldr	sl, [pc, #168]	; 102cb04c <ATResponse_CPIN_Handler+0x160>
102cafa0:	e12fff3a 	blx	sl
   if(head)
102cafa4:	e3500000 	cmp	r0, #0
102cafa8:	1afffff5 	bne	102caf84 <ATResponse_CPIN_Handler+0x98>
   {  
       return  RIL_ATRSP_SUCCESS;
   }

    head = Ql_RIL_FindLine(line, len, "ERROR");// find <CR><LF>ERROR<CR><LF>, <CR>ERROR<CR>£¬<LF>ERROR<LF>
102cafac:	e1a00008 	mov	r0, r8
102cafb0:	e1a01007 	mov	r1, r7
102cafb4:	e59f2094 	ldr	r2, [pc, #148]	; 102cb050 <ATResponse_CPIN_Handler+0x164>
102cafb8:	e12fff3a 	blx	sl
    if(head)
102cafbc:	e2504000 	subs	r4, r0, #0
102cafc0:	1a000016 	bne	102cb020 <ATResponse_CPIN_Handler+0x134>
    {  
        *result = SIM_STAT_UNSPECIFIED;
        return  RIL_ATRSP_FAILED;
    } 

    head = Ql_RIL_FindString(line, len, "+CME ERROR:");//fail
102cafc4:	e1a00008 	mov	r0, r8
102cafc8:	e1a01007 	mov	r1, r7
102cafcc:	e59f2080 	ldr	r2, [pc, #128]	; 102cb054 <ATResponse_CPIN_Handler+0x168>
102cafd0:	e12fff35 	blx	r5
    if(head)
102cafd4:	e3500000 	cmp	r0, #0
        Ql_sscanf(head,"%*[^ ]%d,%[^\r\n]",&err);
        *result = RIL_SIM_GetSimStateByErrCode(err);
        return  RIL_ATRSP_FAILED;
    }

    return RIL_ATRSP_CONTINUE; //continue wait
102cafd8:	03a04001 	moveq	r4, #1
        *result = SIM_STAT_UNSPECIFIED;
        return  RIL_ATRSP_FAILED;
    } 

    head = Ql_RIL_FindString(line, len, "+CME ERROR:");//fail
    if(head)
102cafdc:	0affffe8 	beq	102caf84 <ATResponse_CPIN_Handler+0x98>
    {
        s32 err = 0;
        Ql_sscanf(head,"%*[^ ]%d,%[^\r\n]",&err);
102cafe0:	e59f3070 	ldr	r3, [pc, #112]	; 102cb058 <ATResponse_CPIN_Handler+0x16c>
    } 

    head = Ql_RIL_FindString(line, len, "+CME ERROR:");//fail
    if(head)
    {
        s32 err = 0;
102cafe4:	e28d2068 	add	r2, sp, #104	; 0x68
102cafe8:	e5224068 	str	r4, [r2, #-104]!	; 0xffffff98
        Ql_sscanf(head,"%*[^ ]%d,%[^\r\n]",&err);
102cafec:	e5933000 	ldr	r3, [r3]
102caff0:	e59f1064 	ldr	r1, [pc, #100]	; 102cb05c <ATResponse_CPIN_Handler+0x170>
102caff4:	e1a0200d 	mov	r2, sp
102caff8:	e12fff33 	blx	r3
102caffc:	e59d3000 	ldr	r3, [sp]
102cb000:	e243300a 	sub	r3, r3, #10
102cb004:	e3530008 	cmp	r3, #8
102cb008:	8a000004 	bhi	102cb020 <ATResponse_CPIN_Handler+0x134>
102cb00c:	e59f204c 	ldr	r2, [pc, #76]	; 102cb060 <ATResponse_CPIN_Handler+0x174>
102cb010:	e7923103 	ldr	r3, [r2, r3, lsl #2]
        *result = RIL_SIM_GetSimStateByErrCode(err);
102cb014:	e5863000 	str	r3, [r6]
        return  RIL_ATRSP_FAILED;
102cb018:	e3e04000 	mvn	r4, #0
102cb01c:	eaffffd8 	b	102caf84 <ATResponse_CPIN_Handler+0x98>
102cb020:	e3a0300a 	mov	r3, #10
102cb024:	eafffffa 	b	102cb014 <ATResponse_CPIN_Handler+0x128>
102cb028:	102cbee0 	.word	0x102cbee0
102cb02c:	102cf304 	.word	0x102cf304
102cb030:	102cc57d 	.word	0x102cc57d
102cb034:	102cd560 	.word	0x102cd560
102cb038:	102cf30c 	.word	0x102cf30c
102cb03c:	102cf3ac 	.word	0x102cf3ac
102cb040:	102cd7c0 	.word	0x102cd7c0
102cb044:	102cd738 	.word	0x102cd738
102cb048:	102ceb70 	.word	0x102ceb70
102cb04c:	102cbf6c 	.word	0x102cbf6c
102cb050:	102ceb74 	.word	0x102ceb74
102cb054:	102ceb7c 	.word	0x102ceb7c
102cb058:	f03d31f0 	.word	0xf03d31f0
102cb05c:	102cf314 	.word	0x102cf314
102cb060:	102ce1b8 	.word	0x102ce1b8

102cb064 <RIL_SIM_GetSimState>:
******************************************************************************/
s32  RIL_SIM_GetSimState(s32 *stat)
{
    s32 retRes = -1;
    s32 nStat = 0;
    char strAT[] = "AT+CPIN?\0";
102cb064:	e59f305c 	ldr	r3, [pc, #92]	; 102cb0c8 <RIL_SIM_GetSimState+0x64>
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*                                      and then call Ql_RIL_Initialize to initialize RIL.
******************************************************************************/
s32  RIL_SIM_GetSimState(s32 *stat)
{
102cb068:	e92d4030 	push	{r4, r5, lr}
102cb06c:	e1a05000 	mov	r5, r0
    s32 retRes = -1;
    s32 nStat = 0;
    char strAT[] = "AT+CPIN?\0";
102cb070:	e8930007 	ldm	r3, {r0, r1, r2}
*                RIL_AT_INVALID_PARAM, invalid input parameter.
*                RIL_AT_UNINITIALIZED, RIL is not ready, need to wait for MSG_ID_RIL_READY
*                                      and then call Ql_RIL_Initialize to initialize RIL.
******************************************************************************/
s32  RIL_SIM_GetSimState(s32 *stat)
{
102cb074:	e24dd01c 	sub	sp, sp, #28
    s32 retRes = -1;
    s32 nStat = 0;
    char strAT[] = "AT+CPIN?\0";
102cb078:	e28d300c 	add	r3, sp, #12
102cb07c:	e8a30003 	stmia	r3!, {r0, r1}
*                                      and then call Ql_RIL_Initialize to initialize RIL.
******************************************************************************/
s32  RIL_SIM_GetSimState(s32 *stat)
{
    s32 retRes = -1;
    s32 nStat = 0;
102cb080:	e3a04000 	mov	r4, #0
    char strAT[] = "AT+CPIN?\0";
102cb084:	e1c320b0 	strh	r2, [r3]

    retRes = Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), ATResponse_CPIN_Handler, &nStat, 0);
102cb088:	e28d000c 	add	r0, sp, #12
102cb08c:	e59f3038 	ldr	r3, [pc, #56]	; 102cb0cc <RIL_SIM_GetSimState+0x68>
*                                      and then call Ql_RIL_Initialize to initialize RIL.
******************************************************************************/
s32  RIL_SIM_GetSimState(s32 *stat)
{
    s32 retRes = -1;
    s32 nStat = 0;
102cb090:	e58d4008 	str	r4, [sp, #8]
    char strAT[] = "AT+CPIN?\0";

    retRes = Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), ATResponse_CPIN_Handler, &nStat, 0);
102cb094:	e12fff33 	blx	r3
102cb098:	e28d3008 	add	r3, sp, #8
102cb09c:	e58d4000 	str	r4, [sp]
102cb0a0:	e59f2028 	ldr	r2, [pc, #40]	; 102cb0d0 <RIL_SIM_GetSimState+0x6c>
102cb0a4:	e59fc028 	ldr	ip, [pc, #40]	; 102cb0d4 <RIL_SIM_GetSimState+0x70>
102cb0a8:	e1a01000 	mov	r1, r0
102cb0ac:	e28d000c 	add	r0, sp, #12
102cb0b0:	e12fff3c 	blx	ip
    if(RIL_AT_SUCCESS == retRes)
102cb0b4:	e3500000 	cmp	r0, #0
    {
       *stat = nStat; 
102cb0b8:	059d3008 	ldreq	r3, [sp, #8]
102cb0bc:	05853000 	streq	r3, [r5]
    }
    return retRes;
}
102cb0c0:	e28dd01c 	add	sp, sp, #28
102cb0c4:	e8bd8030 	pop	{r4, r5, pc}
102cb0c8:	102ce1dc 	.word	0x102ce1dc
102cb0cc:	102cd560 	.word	0x102cd560
102cb0d0:	102caeec 	.word	0x102caeec
102cb0d4:	102cd11c 	.word	0x102cd11c

102cb0d8 <RIL_SIM_GetIMSI>:
    Ql_memcpy((char*)param, line+2, len - 4); // <imsi number>\r\n
    return RIL_ATRSP_CONTINUE; //continue wait
}
s32 RIL_SIM_GetIMSI(char* imsi)
{
    char strAT[] = "AT+CIMI\0";
102cb0d8:	e59f205c 	ldr	r2, [pc, #92]	; 102cb13c <RIL_SIM_GetIMSI+0x64>
    }
    Ql_memcpy((char*)param, line+2, len - 4); // <imsi number>\r\n
    return RIL_ATRSP_CONTINUE; //continue wait
}
s32 RIL_SIM_GetIMSI(char* imsi)
{
102cb0dc:	e92d4010 	push	{r4, lr}
102cb0e0:	e1a04000 	mov	r4, r0
    char strAT[] = "AT+CIMI\0";
102cb0e4:	e8920007 	ldm	r2, {r0, r1, r2}
    }
    Ql_memcpy((char*)param, line+2, len - 4); // <imsi number>\r\n
    return RIL_ATRSP_CONTINUE; //continue wait
}
s32 RIL_SIM_GetIMSI(char* imsi)
{
102cb0e8:	e24dd018 	sub	sp, sp, #24
    char strAT[] = "AT+CIMI\0";
102cb0ec:	e28dc00c 	add	ip, sp, #12
    if (NULL == imsi)
102cb0f0:	e3540000 	cmp	r4, #0
    Ql_memcpy((char*)param, line+2, len - 4); // <imsi number>\r\n
    return RIL_ATRSP_CONTINUE; //continue wait
}
s32 RIL_SIM_GetIMSI(char* imsi)
{
    char strAT[] = "AT+CIMI\0";
102cb0f4:	e8ac0003 	stmia	ip!, {r0, r1}
102cb0f8:	e5cc2000 	strb	r2, [ip]
    if (NULL == imsi)
102cb0fc:	0a00000c 	beq	102cb134 <RIL_SIM_GetIMSI+0x5c>
    {
        return RIL_AT_INVALID_PARAM;
    }
    return Ql_RIL_SendATCmd(strAT, Ql_strlen(strAT), ATRsp_IMSI_Handler,(void*)imsi, 0);
102cb100:	e59f3038 	ldr	r3, [pc, #56]	; 102cb140 <RIL_SIM_GetIMSI+0x68>
102cb104:	e28d000c 	add	r0, sp, #12
102cb108:	e12fff33 	blx	r3
102cb10c:	e3a03000 	mov	r3, #0
102cb110:	e58d3000 	str	r3, [sp]
102cb114:	e59f2028 	ldr	r2, [pc, #40]	; 102cb144 <RIL_SIM_GetIMSI+0x6c>
102cb118:	e1a03004 	mov	r3, r4
102cb11c:	e59fc024 	ldr	ip, [pc, #36]	; 102cb148 <RIL_SIM_GetIMSI+0x70>
102cb120:	e1a01000 	mov	r1, r0
102cb124:	e28d000c 	add	r0, sp, #12
102cb128:	e12fff3c 	blx	ip
}
102cb12c:	e28dd018 	add	sp, sp, #24
102cb130:	e8bd8010 	pop	{r4, pc}
s32 RIL_SIM_GetIMSI(char* imsi)
{
    char strAT[] = "AT+CIMI\0";
    if (NULL == imsi)
    {
        return RIL_AT_INVALID_PARAM;
102cb134:	e3e00003 	mvn	r0, #3
102cb138:	eafffffb 	b	102cb12c <RIL_SIM_GetIMSI+0x54>
102cb13c:	102ce1e8 	.word	0x102ce1e8
102cb140:	102cd560 	.word	0x102cd560
102cb144:	102cace0 	.word	0x102cace0
102cb148:	102cd11c 	.word	0x102cd11c

102cb14c <RIL_SIM_GetCCID>:

    return RIL_ATRSP_CONTINUE; //continue wait
}
s32 RIL_SIM_GetCCID(char* ccid)
{
    char strAT[] = "AT+CCID\0";
102cb14c:	e59f205c 	ldr	r2, [pc, #92]	; 102cb1b0 <RIL_SIM_GetCCID+0x64>
    }

    return RIL_ATRSP_CONTINUE; //continue wait
}
s32 RIL_SIM_GetCCID(char* ccid)
{
102cb150:	e92d4010 	push	{r4, lr}
102cb154:	e1a04000 	mov	r4, r0
    char strAT[] = "AT+CCID\0";
102cb158:	e8920007 	ldm	r2, {r0, r1, r2}
    }

    return RIL_ATRSP_CONTINUE; //continue wait
}
s32 RIL_SIM_GetCCID(char* ccid)
{
102cb15c:	e24dd018 	sub	sp, sp, #24
    char strAT[] = "AT+CCID\0";
102cb160:	e28dc00c 	add	ip, sp, #12
    if (NULL == ccid)
102cb164:	e3540000 	cmp	r4, #0

    return RIL_ATRSP_CONTINUE; //continue wait
}
s32 RIL_SIM_GetCCID(char* ccid)
{
    char strAT[] = "AT+CCID\0";
102cb168:	e8ac0003 	stmia	ip!, {r0, r1}
102cb16c:	e5cc2000 	strb	r2, [ip]
    if (NULL == ccid)
102cb170:	0a00000c 	beq	102cb1a8 <RIL_SIM_GetCCID+0x5c>
    {
        return RIL_AT_INVALID_PARAM;
    }
    return Ql_RIL_SendATCmd(strAT,Ql_strlen(strAT), ATRsp_CCID_Handler,(void*)ccid, 0);
102cb174:	e59f3038 	ldr	r3, [pc, #56]	; 102cb1b4 <RIL_SIM_GetCCID+0x68>
102cb178:	e28d000c 	add	r0, sp, #12
102cb17c:	e12fff33 	blx	r3
102cb180:	e3a03000 	mov	r3, #0
102cb184:	e58d3000 	str	r3, [sp]
102cb188:	e59f2028 	ldr	r2, [pc, #40]	; 102cb1b8 <RIL_SIM_GetCCID+0x6c>
102cb18c:	e1a03004 	mov	r3, r4
102cb190:	e59fc024 	ldr	ip, [pc, #36]	; 102cb1bc <RIL_SIM_GetCCID+0x70>
102cb194:	e1a01000 	mov	r1, r0
102cb198:	e28d000c 	add	r0, sp, #12
102cb19c:	e12fff3c 	blx	ip
}
102cb1a0:	e28dd018 	add	sp, sp, #24
102cb1a4:	e8bd8010 	pop	{r4, pc}
s32 RIL_SIM_GetCCID(char* ccid)
{
    char strAT[] = "AT+CCID\0";
    if (NULL == ccid)
    {
        return RIL_AT_INVALID_PARAM;
102cb1a8:	e3e00003 	mvn	r0, #3
102cb1ac:	eafffffb 	b	102cb1a0 <RIL_SIM_GetCCID+0x54>
102cb1b0:	102ce1f4 	.word	0x102ce1f4
102cb1b4:	102cd560 	.word	0x102cd560
102cb1b8:	102cac1c 	.word	0x102cac1c
102cb1bc:	102cd11c 	.word	0x102cd11c

102cb1c0 <OnURCHandler_HTTP>:
        Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_CFUN_STATE_IND, cfun);
    }
}

static void OnURCHandler_HTTP(const char* strURC, void* reserved)
{
102cb1c0:	e92d4030 	push	{r4, r5, lr}
102cb1c4:	e24dd01c 	sub	sp, sp, #28
    u32 contentLen = 0;
    s32 errCode = 0;
    extern CB_HTTP_DwnldFile callback_http_dwnld;

    //+QHTTPDL: 23772,23772,0
    Ql_sscanf(strURC, "%*[^: ]: %d,%d,%d[^\r\n]", &dwnLoadedSize, &contentLen, &errCode);
102cb1c8:	e28d3014 	add	r3, sp, #20
102cb1cc:	e58d3000 	str	r3, [sp]
102cb1d0:	e59f3048 	ldr	r3, [pc, #72]	; 102cb220 <OnURCHandler_HTTP+0x60>
    }
}

static void OnURCHandler_HTTP(const char* strURC, void* reserved)
{
    u32 dwnLoadedSize = 0;
102cb1d4:	e3a04000 	mov	r4, #0
    s32 errCode = 0;
    extern CB_HTTP_DwnldFile callback_http_dwnld;

    //+QHTTPDL: 23772,23772,0
    Ql_sscanf(strURC, "%*[^: ]: %d,%d,%d[^\r\n]", &dwnLoadedSize, &contentLen, &errCode);
    if (callback_http_dwnld)
102cb1d8:	e59f5044 	ldr	r5, [pc, #68]	; 102cb224 <OnURCHandler_HTTP+0x64>
    u32 contentLen = 0;
    s32 errCode = 0;
    extern CB_HTTP_DwnldFile callback_http_dwnld;

    //+QHTTPDL: 23772,23772,0
    Ql_sscanf(strURC, "%*[^: ]: %d,%d,%d[^\r\n]", &dwnLoadedSize, &contentLen, &errCode);
102cb1dc:	e593c000 	ldr	ip, [r3]
    }
}

static void OnURCHandler_HTTP(const char* strURC, void* reserved)
{
    u32 dwnLoadedSize = 0;
102cb1e0:	e58d400c 	str	r4, [sp, #12]
    u32 contentLen = 0;
    s32 errCode = 0;
    extern CB_HTTP_DwnldFile callback_http_dwnld;

    //+QHTTPDL: 23772,23772,0
    Ql_sscanf(strURC, "%*[^: ]: %d,%d,%d[^\r\n]", &dwnLoadedSize, &contentLen, &errCode);
102cb1e4:	e28d3010 	add	r3, sp, #16
}

static void OnURCHandler_HTTP(const char* strURC, void* reserved)
{
    u32 dwnLoadedSize = 0;
    u32 contentLen = 0;
102cb1e8:	e58d4010 	str	r4, [sp, #16]
    s32 errCode = 0;
102cb1ec:	e58d4014 	str	r4, [sp, #20]
    extern CB_HTTP_DwnldFile callback_http_dwnld;

    //+QHTTPDL: 23772,23772,0
    Ql_sscanf(strURC, "%*[^: ]: %d,%d,%d[^\r\n]", &dwnLoadedSize, &contentLen, &errCode);
102cb1f0:	e59f1030 	ldr	r1, [pc, #48]	; 102cb228 <OnURCHandler_HTTP+0x68>
102cb1f4:	e28d200c 	add	r2, sp, #12
102cb1f8:	e12fff3c 	blx	ip
    if (callback_http_dwnld)
102cb1fc:	e5953000 	ldr	r3, [r5]
102cb200:	e1530004 	cmp	r3, r4
102cb204:	0a000003 	beq	102cb218 <OnURCHandler_HTTP+0x58>
    {
        callback_http_dwnld(dwnLoadedSize, contentLen, errCode);
102cb208:	e28d000c 	add	r0, sp, #12
102cb20c:	e8900007 	ldm	r0, {r0, r1, r2}
102cb210:	e12fff33 	blx	r3
        callback_http_dwnld = NULL;
102cb214:	e5854000 	str	r4, [r5]
    }
}
102cb218:	e28dd01c 	add	sp, sp, #28
102cb21c:	e8bd8030 	pop	{r4, r5, pc}
102cb220:	f03d31f0 	.word	0xf03d31f0
102cb224:	f03d2118 	.word	0xf03d2118
102cb228:	102cf324 	.word	0x102cf324

102cb22c <OnURCHandler_AudPlayInd>:
{
    Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_END, 0);
}

static void OnURCHandler_AudPlayInd(const char* strURC, void* reserved)
{
102cb22c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    s32 errCode1 = 0;
102cb230:	e3a03000 	mov	r3, #0
{
    Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_END, 0);
}

static void OnURCHandler_AudPlayInd(const char* strURC, void* reserved)
{
102cb234:	e24dd00c 	sub	sp, sp, #12
    s32 errCode1 = 0;
102cb238:	e58d3000 	str	r3, [sp]
    s32 errCode2 = 0;
102cb23c:	e58d3004 	str	r3, [sp, #4]
    extern RIL_AUD_PLAY_IND cb_aud_play;

    //"+QAUDPIND: 0,<errCode>"
    //"+QPLAYRES: 0,%d"
    //"+QPRESBG: 0,%d"
    Ql_sscanf(strURC, "%*[^: ]: %d,%d[^\r\n]", &errCode1, &errCode2);
102cb240:	e59f3030 	ldr	r3, [pc, #48]	; 102cb278 <OnURCHandler_AudPlayInd+0x4c>
102cb244:	e59f1030 	ldr	r1, [pc, #48]	; 102cb27c <OnURCHandler_AudPlayInd+0x50>
102cb248:	e593c000 	ldr	ip, [r3]
102cb24c:	e1a0200d 	mov	r2, sp
102cb250:	e28d3004 	add	r3, sp, #4
102cb254:	e12fff3c 	blx	ip
    if (cb_aud_play)
102cb258:	e59f3020 	ldr	r3, [pc, #32]	; 102cb280 <OnURCHandler_AudPlayInd+0x54>
102cb25c:	e5933000 	ldr	r3, [r3]
102cb260:	e3530000 	cmp	r3, #0
102cb264:	0a000001 	beq	102cb270 <OnURCHandler_AudPlayInd+0x44>
    {
        cb_aud_play(errCode2);
102cb268:	e59d0004 	ldr	r0, [sp, #4]
102cb26c:	e12fff33 	blx	r3
    }
}
102cb270:	e28dd00c 	add	sp, sp, #12
102cb274:	e8bd8000 	ldmfd	sp!, {pc}
102cb278:	f03d31f0 	.word	0xf03d31f0
102cb27c:	102cf33c 	.word	0x102cf33c
102cb280:	f03d2054 	.word	0xf03d2054

102cb284 <OnURCHandler_FTP>:
        callback_http_dwnld = NULL;
    }
}

static void OnURCHandler_FTP(const char* strURC, void* reserved)
{
102cb284:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    char* p1 = NULL;
    char* p2 = NULL;
    s32 nFtpDlLen = 0;
    char strTmp[10];
       
    p1 = Ql_strstr(strURC, "\r\n+QFTPGET:");
102cb288:	e59f1140 	ldr	r1, [pc, #320]	; 102cb3d0 <OnURCHandler_FTP+0x14c>
        callback_http_dwnld = NULL;
    }
}

static void OnURCHandler_FTP(const char* strURC, void* reserved)
{
102cb28c:	e24dd010 	sub	sp, sp, #16
    char* p1 = NULL;
    char* p2 = NULL;
    s32 nFtpDlLen = 0;
    char strTmp[10];
       
    p1 = Ql_strstr(strURC, "\r\n+QFTPGET:");
102cb290:	e59f413c 	ldr	r4, [pc, #316]	; 102cb3d4 <OnURCHandler_FTP+0x150>
        callback_http_dwnld = NULL;
    }
}

static void OnURCHandler_FTP(const char* strURC, void* reserved)
{
102cb294:	e1a08000 	mov	r8, r0
    char* p1 = NULL;
    char* p2 = NULL;
    s32 nFtpDlLen = 0;
    char strTmp[10];
       
    p1 = Ql_strstr(strURC, "\r\n+QFTPGET:");
102cb298:	e12fff34 	blx	r4
    p1 += Ql_strlen("\r\n+QFTPGET:");
102cb29c:	e59f6134 	ldr	r6, [pc, #308]	; 102cb3d8 <OnURCHandler_FTP+0x154>
    char* p1 = NULL;
    char* p2 = NULL;
    s32 nFtpDlLen = 0;
    char strTmp[10];
       
    p1 = Ql_strstr(strURC, "\r\n+QFTPGET:");
102cb2a0:	e1a05000 	mov	r5, r0
    p1 += Ql_strlen("\r\n+QFTPGET:");
102cb2a4:	e59f0124 	ldr	r0, [pc, #292]	; 102cb3d0 <OnURCHandler_FTP+0x14c>
102cb2a8:	e12fff36 	blx	r6
    p2 = Ql_strstr(p1, "\r\n");
102cb2ac:	e59f1128 	ldr	r1, [pc, #296]	; 102cb3dc <OnURCHandler_FTP+0x158>
    char* p2 = NULL;
    s32 nFtpDlLen = 0;
    char strTmp[10];
       
    p1 = Ql_strstr(strURC, "\r\n+QFTPGET:");
    p1 += Ql_strlen("\r\n+QFTPGET:");
102cb2b0:	e0855000 	add	r5, r5, r0
    p2 = Ql_strstr(p1, "\r\n");
102cb2b4:	e1a00005 	mov	r0, r5
102cb2b8:	e12fff34 	blx	r4
    if (p1 && p2)
102cb2bc:	e3550000 	cmp	r5, #0
102cb2c0:	13500000 	cmpne	r0, #0
102cb2c4:	e1a07000 	mov	r7, r0
102cb2c8:	0a000019 	beq	102cb334 <OnURCHandler_FTP+0xb0>
    {
        Ql_memset(strTmp, 0x0, sizeof(strTmp));
102cb2cc:	e3a0200a 	mov	r2, #10
102cb2d0:	e3a01000 	mov	r1, #0
102cb2d4:	e59f3104 	ldr	r3, [pc, #260]	; 102cb3e0 <OnURCHandler_FTP+0x15c>
102cb2d8:	e28d0004 	add	r0, sp, #4
102cb2dc:	e12fff33 	blx	r3
        Ql_memcpy(strTmp, p1, p2 - p1);
102cb2e0:	e1a01005 	mov	r1, r5
102cb2e4:	e0652007 	rsb	r2, r5, r7
102cb2e8:	e59f30f4 	ldr	r3, [pc, #244]	; 102cb3e4 <OnURCHandler_FTP+0x160>
102cb2ec:	e28d0004 	add	r0, sp, #4
102cb2f0:	e12fff33 	blx	r3
        nFtpDlLen = Ql_atoi(strTmp);
102cb2f4:	e59f30ec 	ldr	r3, [pc, #236]	; 102cb3e8 <OnURCHandler_FTP+0x164>
102cb2f8:	e28d0004 	add	r0, sp, #4
102cb2fc:	e12fff33 	blx	r3
        //TODO:
        if(NULL != FtpGet_IND_CB)
102cb300:	e59f50e4 	ldr	r5, [pc, #228]	; 102cb3ec <OnURCHandler_FTP+0x168>
102cb304:	e5953000 	ldr	r3, [r5]
102cb308:	e3530000 	cmp	r3, #0
    p2 = Ql_strstr(p1, "\r\n");
    if (p1 && p2)
    {
        Ql_memset(strTmp, 0x0, sizeof(strTmp));
        Ql_memcpy(strTmp, p1, p2 - p1);
        nFtpDlLen = Ql_atoi(strTmp);
102cb30c:	e1a01000 	mov	r1, r0
        //TODO:
        if(NULL != FtpGet_IND_CB)
102cb310:	0a000007 	beq	102cb334 <OnURCHandler_FTP+0xb0>
        {
            if(nFtpDlLen < 0)
102cb314:	e3500000 	cmp	r0, #0
            {
                FtpGet_IND_CB(0,nFtpDlLen);
102cb318:	b3a00000 	movlt	r0, #0
            }
            else
            {
                FtpGet_IND_CB(1,nFtpDlLen);
102cb31c:	a3a00001 	movge	r0, #1
102cb320:	e12fff33 	blx	r3
            }
            FtpGet_IND_CB = NULL;
102cb324:	e3a03000 	mov	r3, #0
102cb328:	e5853000 	str	r3, [r5]
            }
            FtpPut_IND_CB = NULL;
            return;
        }
    }
}
102cb32c:	e28dd010 	add	sp, sp, #16
102cb330:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        }
    }

    p1 = NULL;
    p2 = NULL;
    p1 = Ql_strstr(strURC, "\r\n+QFTPPUT:");
102cb334:	e59f10b4 	ldr	r1, [pc, #180]	; 102cb3f0 <OnURCHandler_FTP+0x16c>
102cb338:	e1a00008 	mov	r0, r8
102cb33c:	e12fff34 	blx	r4
102cb340:	e1a05000 	mov	r5, r0
    p1 += Ql_strlen("\r\n+QFTPPUT:");
102cb344:	e59f00a4 	ldr	r0, [pc, #164]	; 102cb3f0 <OnURCHandler_FTP+0x16c>
102cb348:	e12fff36 	blx	r6
    p2 = Ql_strstr(p1, "\r\n");
102cb34c:	e59f1088 	ldr	r1, [pc, #136]	; 102cb3dc <OnURCHandler_FTP+0x158>
    }

    p1 = NULL;
    p2 = NULL;
    p1 = Ql_strstr(strURC, "\r\n+QFTPPUT:");
    p1 += Ql_strlen("\r\n+QFTPPUT:");
102cb350:	e0855000 	add	r5, r5, r0
    p2 = Ql_strstr(p1, "\r\n");
102cb354:	e1a00005 	mov	r0, r5
102cb358:	e12fff34 	blx	r4
    if (p1 && p2)
102cb35c:	e3550000 	cmp	r5, #0
102cb360:	13500000 	cmpne	r0, #0
102cb364:	e1a04000 	mov	r4, r0
102cb368:	0affffef 	beq	102cb32c <OnURCHandler_FTP+0xa8>
    {
        Ql_memset(strTmp, 0x0, sizeof(strTmp));
102cb36c:	e3a0200a 	mov	r2, #10
102cb370:	e3a01000 	mov	r1, #0
102cb374:	e59f3064 	ldr	r3, [pc, #100]	; 102cb3e0 <OnURCHandler_FTP+0x15c>
102cb378:	e28d0004 	add	r0, sp, #4
102cb37c:	e12fff33 	blx	r3
        Ql_memcpy(strTmp, p1, p2 - p1);
102cb380:	e1a01005 	mov	r1, r5
102cb384:	e0652004 	rsb	r2, r5, r4
102cb388:	e59f3054 	ldr	r3, [pc, #84]	; 102cb3e4 <OnURCHandler_FTP+0x160>
102cb38c:	e28d0004 	add	r0, sp, #4
102cb390:	e12fff33 	blx	r3
        nFtpDlLen = Ql_atoi(strTmp);
102cb394:	e59f304c 	ldr	r3, [pc, #76]	; 102cb3e8 <OnURCHandler_FTP+0x164>
102cb398:	e28d0004 	add	r0, sp, #4
102cb39c:	e12fff33 	blx	r3
        //TODO:
        if(NULL != FtpPut_IND_CB)
102cb3a0:	e59f5044 	ldr	r5, [pc, #68]	; 102cb3ec <OnURCHandler_FTP+0x168>
102cb3a4:	e5953004 	ldr	r3, [r5, #4]
102cb3a8:	e3530000 	cmp	r3, #0
    p2 = Ql_strstr(p1, "\r\n");
    if (p1 && p2)
    {
        Ql_memset(strTmp, 0x0, sizeof(strTmp));
        Ql_memcpy(strTmp, p1, p2 - p1);
        nFtpDlLen = Ql_atoi(strTmp);
102cb3ac:	e1a01000 	mov	r1, r0
        //TODO:
        if(NULL != FtpPut_IND_CB)
102cb3b0:	0affffdd 	beq	102cb32c <OnURCHandler_FTP+0xa8>
        {
            if(nFtpDlLen < 0)
102cb3b4:	e3500000 	cmp	r0, #0
            {
                FtpPut_IND_CB(0,nFtpDlLen);
102cb3b8:	b3a00000 	movlt	r0, #0
            }
            else
            {
                FtpPut_IND_CB(1,nFtpDlLen);
102cb3bc:	a3a00001 	movge	r0, #1
102cb3c0:	e12fff33 	blx	r3
            }
            FtpPut_IND_CB = NULL;
102cb3c4:	e3a03000 	mov	r3, #0
102cb3c8:	e5853004 	str	r3, [r5, #4]
102cb3cc:	eaffffd6 	b	102cb32c <OnURCHandler_FTP+0xa8>
102cb3d0:	102cf350 	.word	0x102cf350
102cb3d4:	102cd7c0 	.word	0x102cd7c0
102cb3d8:	102cd560 	.word	0x102cd560
102cb3dc:	102cf3ac 	.word	0x102cf3ac
102cb3e0:	102cd6b0 	.word	0x102cd6b0
102cb3e4:	102cd738 	.word	0x102cd738
102cb3e8:	102cd848 	.word	0x102cd848
102cb3ec:	f03d2124 	.word	0xf03d2124
102cb3f0:	102cf35c 	.word	0x102cf35c

102cb3f4 <OnURCHandler_AlarmRing>:
    }
}

static void OnURCHandler_AlarmRing(const char* strURC, void* reserved)
{
	Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_ALARM_RING_IND, 0);
102cb3f4:	e3a00000 	mov	r0, #0
        }
    }
}

static void OnURCHandler_AlarmRing(const char* strURC, void* reserved)
{
102cb3f8:	e92d4008 	push	{r3, lr}
	Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_ALARM_RING_IND, 0);
102cb3fc:	e59f1010 	ldr	r1, [pc, #16]	; 102cb414 <OnURCHandler_AlarmRing+0x20>
102cb400:	e3a0200a 	mov	r2, #10
102cb404:	e1a03000 	mov	r3, r0
102cb408:	e59fc008 	ldr	ip, [pc, #8]	; 102cb418 <OnURCHandler_AlarmRing+0x24>
102cb40c:	e12fff3c 	blx	ip
102cb410:	e8bd8008 	pop	{r3, pc}
102cb414:	00001002 	.word	0x00001002
102cb418:	102cda04 	.word	0x102cda04

102cb41c <OnURCHandler_InitStat>:
    }
    Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_MODULE_VOLTAGE_IND, volState);
}

static void OnURCHandler_InitStat(const char* strURC, void* reserved)
{
102cb41c:	e92d4038 	push	{r3, r4, r5, lr}
    u32 sysInitStat = SYS_STATE_START;
    
    if (Ql_strstr(strURC, "\r\nCall Ready\r\n") != NULL)
102cb420:	e59f1048 	ldr	r1, [pc, #72]	; 102cb470 <OnURCHandler_InitStat+0x54>
102cb424:	e59f4048 	ldr	r4, [pc, #72]	; 102cb474 <OnURCHandler_InitStat+0x58>
    }
    Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_MODULE_VOLTAGE_IND, volState);
}

static void OnURCHandler_InitStat(const char* strURC, void* reserved)
{
102cb428:	e1a05000 	mov	r5, r0
    u32 sysInitStat = SYS_STATE_START;
    
    if (Ql_strstr(strURC, "\r\nCall Ready\r\n") != NULL)
102cb42c:	e12fff34 	blx	r4
102cb430:	e3500000 	cmp	r0, #0
    {
        sysInitStat = SYS_STATE_PHBOK;
102cb434:	13a03002 	movne	r3, #2

static void OnURCHandler_InitStat(const char* strURC, void* reserved)
{
    u32 sysInitStat = SYS_STATE_START;
    
    if (Ql_strstr(strURC, "\r\nCall Ready\r\n") != NULL)
102cb438:	0a000005 	beq	102cb454 <OnURCHandler_InitStat+0x38>
    }
    else if(Ql_strstr(strURC, "\r\nSMS Ready\r\n") != NULL)
    {
        sysInitStat = SYS_STATE_SMSOK;
    }
    Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_SYS_INIT_STATE_IND, sysInitStat);
102cb43c:	e59f1034 	ldr	r1, [pc, #52]	; 102cb478 <OnURCHandler_InitStat+0x5c>
102cb440:	e3a02001 	mov	r2, #1
102cb444:	e59fc030 	ldr	ip, [pc, #48]	; 102cb47c <OnURCHandler_InitStat+0x60>
102cb448:	e3a00000 	mov	r0, #0
102cb44c:	e12fff3c 	blx	ip
102cb450:	e8bd8038 	pop	{r3, r4, r5, pc}
    
    if (Ql_strstr(strURC, "\r\nCall Ready\r\n") != NULL)
    {
        sysInitStat = SYS_STATE_PHBOK;
    }
    else if(Ql_strstr(strURC, "\r\nSMS Ready\r\n") != NULL)
102cb454:	e1a00005 	mov	r0, r5
102cb458:	e59f1020 	ldr	r1, [pc, #32]	; 102cb480 <OnURCHandler_InitStat+0x64>
102cb45c:	e12fff34 	blx	r4
    Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_MODULE_VOLTAGE_IND, volState);
}

static void OnURCHandler_InitStat(const char* strURC, void* reserved)
{
    u32 sysInitStat = SYS_STATE_START;
102cb460:	e3500000 	cmp	r0, #0
102cb464:	13a03003 	movne	r3, #3
102cb468:	03a03000 	moveq	r3, #0
102cb46c:	eafffff2 	b	102cb43c <OnURCHandler_InitStat+0x20>
102cb470:	102cf368 	.word	0x102cf368
102cb474:	102cd7c0 	.word	0x102cd7c0
102cb478:	00001002 	.word	0x00001002
102cb47c:	102cda04 	.word	0x102cda04
102cb480:	102cf378 	.word	0x102cf378

102cb484 <OnURCHandler_CFUN>:
    }
    Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_SYS_INIT_STATE_IND, sysInitStat);
}

static void OnURCHandler_CFUN(const char* strURC, void* reserved)
{
102cb484:	e92d4030 	push	{r4, r5, lr}
    char* p2 = NULL;
    char strTmp[10];
    s32 len;
    u32 cfun;

    len = Ql_strlen("\r\n+CFUN: ");
102cb488:	e59f3090 	ldr	r3, [pc, #144]	; 102cb520 <OnURCHandler_CFUN+0x9c>
    }
    Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_SYS_INIT_STATE_IND, sysInitStat);
}

static void OnURCHandler_CFUN(const char* strURC, void* reserved)
{
102cb48c:	e24dd014 	sub	sp, sp, #20
102cb490:	e1a05000 	mov	r5, r0
    char* p2 = NULL;
    char strTmp[10];
    s32 len;
    u32 cfun;

    len = Ql_strlen("\r\n+CFUN: ");
102cb494:	e59f0088 	ldr	r0, [pc, #136]	; 102cb524 <OnURCHandler_CFUN+0xa0>
102cb498:	e12fff33 	blx	r3
    p1 = Ql_strstr(strURC, "\r\n+CFUN: ");
102cb49c:	e59f1080 	ldr	r1, [pc, #128]	; 102cb524 <OnURCHandler_CFUN+0xa0>
    char* p2 = NULL;
    char strTmp[10];
    s32 len;
    u32 cfun;

    len = Ql_strlen("\r\n+CFUN: ");
102cb4a0:	e1a04000 	mov	r4, r0
    p1 = Ql_strstr(strURC, "\r\n+CFUN: ");
102cb4a4:	e1a00005 	mov	r0, r5
102cb4a8:	e59f5078 	ldr	r5, [pc, #120]	; 102cb528 <OnURCHandler_CFUN+0xa4>
102cb4ac:	e12fff35 	blx	r5
    p1 += len;
    p2 = Ql_strstr(p1, "\r\n");
102cb4b0:	e59f1074 	ldr	r1, [pc, #116]	; 102cb52c <OnURCHandler_CFUN+0xa8>
    s32 len;
    u32 cfun;

    len = Ql_strlen("\r\n+CFUN: ");
    p1 = Ql_strstr(strURC, "\r\n+CFUN: ");
    p1 += len;
102cb4b4:	e0804004 	add	r4, r0, r4
    p2 = Ql_strstr(p1, "\r\n");
102cb4b8:	e1a00004 	mov	r0, r4
102cb4bc:	e12fff35 	blx	r5
    if (p1 && p2)
102cb4c0:	e3540000 	cmp	r4, #0
102cb4c4:	13500000 	cmpne	r0, #0
102cb4c8:	0a000012 	beq	102cb518 <OnURCHandler_CFUN+0x94>
    {
        Ql_memset(strTmp, 0x0, sizeof(strTmp));
102cb4cc:	e3a0200a 	mov	r2, #10
102cb4d0:	e3a01000 	mov	r1, #0
102cb4d4:	e59f3054 	ldr	r3, [pc, #84]	; 102cb530 <OnURCHandler_CFUN+0xac>
102cb4d8:	e28d0004 	add	r0, sp, #4
102cb4dc:	e12fff33 	blx	r3
        Ql_memcpy(strTmp, p1, 1);
102cb4e0:	e1a01004 	mov	r1, r4
102cb4e4:	e3a02001 	mov	r2, #1
102cb4e8:	e59f3044 	ldr	r3, [pc, #68]	; 102cb534 <OnURCHandler_CFUN+0xb0>
102cb4ec:	e28d0004 	add	r0, sp, #4
102cb4f0:	e12fff33 	blx	r3
        cfun = Ql_atoi(strTmp);
102cb4f4:	e59f303c 	ldr	r3, [pc, #60]	; 102cb538 <OnURCHandler_CFUN+0xb4>
102cb4f8:	e28d0004 	add	r0, sp, #4
102cb4fc:	e12fff33 	blx	r3
        Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_CFUN_STATE_IND, cfun);
102cb500:	e59f1034 	ldr	r1, [pc, #52]	; 102cb53c <OnURCHandler_CFUN+0xb8>
102cb504:	e3a02005 	mov	r2, #5
102cb508:	e59fc030 	ldr	ip, [pc, #48]	; 102cb540 <OnURCHandler_CFUN+0xbc>
    p2 = Ql_strstr(p1, "\r\n");
    if (p1 && p2)
    {
        Ql_memset(strTmp, 0x0, sizeof(strTmp));
        Ql_memcpy(strTmp, p1, 1);
        cfun = Ql_atoi(strTmp);
102cb50c:	e1a03000 	mov	r3, r0
        Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_CFUN_STATE_IND, cfun);
102cb510:	e3a00000 	mov	r0, #0
102cb514:	e12fff3c 	blx	ip
    }
}
102cb518:	e28dd014 	add	sp, sp, #20
102cb51c:	e8bd8030 	pop	{r4, r5, pc}
102cb520:	102cd560 	.word	0x102cd560
102cb524:	102cf388 	.word	0x102cf388
102cb528:	102cd7c0 	.word	0x102cd7c0
102cb52c:	102cf3ac 	.word	0x102cf3ac
102cb530:	102cd6b0 	.word	0x102cd6b0
102cb534:	102cd738 	.word	0x102cd738
102cb538:	102cd848 	.word	0x102cd848
102cb53c:	00001002 	.word	0x00001002
102cb540:	102cda04 	.word	0x102cda04

102cb544 <OnURCHandler_Voltage>:
    {
    }
}

static void OnURCHandler_Voltage(const char* strURC, void* reserved)
{
102cb544:	e92d4038 	push	{r3, r4, r5, lr}
    u32 volState = VBATT_UNDER_WRN;
    
    if (Ql_StrPrefixMatch(strURC, "\r\nUNDER_VOLTAGE WARNING \r\n"))
102cb548:	e59f107c 	ldr	r1, [pc, #124]	; 102cb5cc <OnURCHandler_Voltage+0x88>
102cb54c:	e59f407c 	ldr	r4, [pc, #124]	; 102cb5d0 <OnURCHandler_Voltage+0x8c>
    {
    }
}

static void OnURCHandler_Voltage(const char* strURC, void* reserved)
{
102cb550:	e1a05000 	mov	r5, r0
    u32 volState = VBATT_UNDER_WRN;
    
    if (Ql_StrPrefixMatch(strURC, "\r\nUNDER_VOLTAGE WARNING \r\n"))
102cb554:	e12fff34 	blx	r4
102cb558:	e3500000 	cmp	r0, #0
102cb55c:	1a00000b 	bne	102cb590 <OnURCHandler_Voltage+0x4c>
    {
        volState = VBATT_UNDER_WRN;
    }
    else if (Ql_StrPrefixMatch(strURC, "\r\nUNDER_VOLTAGE POWER DOWN \r\n"))
102cb560:	e1a00005 	mov	r0, r5
102cb564:	e59f1068 	ldr	r1, [pc, #104]	; 102cb5d4 <OnURCHandler_Voltage+0x90>
102cb568:	e12fff34 	blx	r4
102cb56c:	e3500000 	cmp	r0, #0
    {
        volState = VBATT_UNDER_PDN;
102cb570:	13a03001 	movne	r3, #1
    
    if (Ql_StrPrefixMatch(strURC, "\r\nUNDER_VOLTAGE WARNING \r\n"))
    {
        volState = VBATT_UNDER_WRN;
    }
    else if (Ql_StrPrefixMatch(strURC, "\r\nUNDER_VOLTAGE POWER DOWN \r\n"))
102cb574:	0a000007 	beq	102cb598 <OnURCHandler_Voltage+0x54>
    {
        volState = VBATT_OVER_PDN;
    }else{
        return;
    }
    Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_MODULE_VOLTAGE_IND, volState);
102cb578:	e59f1058 	ldr	r1, [pc, #88]	; 102cb5d8 <OnURCHandler_Voltage+0x94>
102cb57c:	e3a02009 	mov	r2, #9
102cb580:	e59fc054 	ldr	ip, [pc, #84]	; 102cb5dc <OnURCHandler_Voltage+0x98>
102cb584:	e3a00000 	mov	r0, #0
102cb588:	e12fff3c 	blx	ip
102cb58c:	e8bd8038 	pop	{r3, r4, r5, pc}
{
    u32 volState = VBATT_UNDER_WRN;
    
    if (Ql_StrPrefixMatch(strURC, "\r\nUNDER_VOLTAGE WARNING \r\n"))
    {
        volState = VBATT_UNDER_WRN;
102cb590:	e3a03000 	mov	r3, #0
102cb594:	eafffff7 	b	102cb578 <OnURCHandler_Voltage+0x34>
    }
    else if (Ql_StrPrefixMatch(strURC, "\r\nUNDER_VOLTAGE POWER DOWN \r\n"))
    {
        volState = VBATT_UNDER_PDN;
    }
    else if (Ql_StrPrefixMatch(strURC, "\r\nOVER_VOLTAGE WARNING \r\n"))
102cb598:	e1a00005 	mov	r0, r5
102cb59c:	e59f103c 	ldr	r1, [pc, #60]	; 102cb5e0 <OnURCHandler_Voltage+0x9c>
102cb5a0:	e12fff34 	blx	r4
102cb5a4:	e3500000 	cmp	r0, #0
    {
        volState = VBATT_OVER_WRN;
102cb5a8:	13a03002 	movne	r3, #2
    }
    else if (Ql_StrPrefixMatch(strURC, "\r\nUNDER_VOLTAGE POWER DOWN \r\n"))
    {
        volState = VBATT_UNDER_PDN;
    }
    else if (Ql_StrPrefixMatch(strURC, "\r\nOVER_VOLTAGE WARNING \r\n"))
102cb5ac:	1afffff1 	bne	102cb578 <OnURCHandler_Voltage+0x34>
    {
        volState = VBATT_OVER_WRN;
    }
    else if (Ql_StrPrefixMatch(strURC, "\r\nOVER_VOLTAGE POWER DOWN \r\n"))
102cb5b0:	e1a00005 	mov	r0, r5
102cb5b4:	e59f1028 	ldr	r1, [pc, #40]	; 102cb5e4 <OnURCHandler_Voltage+0xa0>
102cb5b8:	e12fff34 	blx	r4
102cb5bc:	e3500000 	cmp	r0, #0
    {
        volState = VBATT_OVER_PDN;
102cb5c0:	13a03003 	movne	r3, #3
    }
    else if (Ql_StrPrefixMatch(strURC, "\r\nOVER_VOLTAGE WARNING \r\n"))
    {
        volState = VBATT_OVER_WRN;
    }
    else if (Ql_StrPrefixMatch(strURC, "\r\nOVER_VOLTAGE POWER DOWN \r\n"))
102cb5c4:	1affffeb 	bne	102cb578 <OnURCHandler_Voltage+0x34>
102cb5c8:	e8bd8038 	pop	{r3, r4, r5, pc}
102cb5cc:	102cf394 	.word	0x102cf394
102cb5d0:	102cbda0 	.word	0x102cbda0
102cb5d4:	102cf3b0 	.word	0x102cf3b0
102cb5d8:	00001002 	.word	0x00001002
102cb5dc:	102cda04 	.word	0x102cda04
102cb5e0:	102cf3d0 	.word	0x102cf3d0
102cb5e4:	102cf3ec 	.word	0x102cf3ec

102cb5e8 <OnURCHandler_Network>:
            Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_SIM_CARD_STATE_IND, cpinStat);
        }
    }
}
static void OnURCHandler_Network(const char* strURC, void* reserved)
{
102cb5e8:	e92d4070 	push	{r4, r5, r6, lr}
    char* p1 = NULL;
    char* p2 = NULL;
    char strTmp[10];
    
    if (Ql_StrPrefixMatch(strURC, "\r\n+CREG: "))
102cb5ec:	e59f1158 	ldr	r1, [pc, #344]	; 102cb74c <OnURCHandler_Network+0x164>
            Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_SIM_CARD_STATE_IND, cpinStat);
        }
    }
}
static void OnURCHandler_Network(const char* strURC, void* reserved)
{
102cb5f0:	e24dd010 	sub	sp, sp, #16
    char* p1 = NULL;
    char* p2 = NULL;
    char strTmp[10];
    
    if (Ql_StrPrefixMatch(strURC, "\r\n+CREG: "))
102cb5f4:	e59f4154 	ldr	r4, [pc, #340]	; 102cb750 <OnURCHandler_Network+0x168>
            Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_SIM_CARD_STATE_IND, cpinStat);
        }
    }
}
static void OnURCHandler_Network(const char* strURC, void* reserved)
{
102cb5f8:	e1a05000 	mov	r5, r0
    char* p1 = NULL;
    char* p2 = NULL;
    char strTmp[10];
    
    if (Ql_StrPrefixMatch(strURC, "\r\n+CREG: "))
102cb5fc:	e12fff34 	blx	r4
102cb600:	e2506000 	subs	r6, r0, #0
102cb604:	0a000012 	beq	102cb654 <OnURCHandler_Network+0x6c>
    {
        u32 nwStat;
        p1 = Ql_strstr(strURC, "\r\n+CREG: ");
102cb608:	e59f113c 	ldr	r1, [pc, #316]	; 102cb74c <OnURCHandler_Network+0x164>
102cb60c:	e1a00005 	mov	r0, r5
102cb610:	e59f513c 	ldr	r5, [pc, #316]	; 102cb754 <OnURCHandler_Network+0x16c>
102cb614:	e12fff35 	blx	r5
        p1 += Ql_strlen("\r\n+CREG: ");
102cb618:	e59f3138 	ldr	r3, [pc, #312]	; 102cb758 <OnURCHandler_Network+0x170>
    char strTmp[10];
    
    if (Ql_StrPrefixMatch(strURC, "\r\n+CREG: "))
    {
        u32 nwStat;
        p1 = Ql_strstr(strURC, "\r\n+CREG: ");
102cb61c:	e1a04000 	mov	r4, r0
        p1 += Ql_strlen("\r\n+CREG: ");
102cb620:	e59f0124 	ldr	r0, [pc, #292]	; 102cb74c <OnURCHandler_Network+0x164>
102cb624:	e12fff33 	blx	r3
102cb628:	e0844000 	add	r4, r4, r0
		if(*(p1+1) == 0x2C)          //Active query network status without reporting URCS
102cb62c:	e5d43001 	ldrb	r3, [r4, #1]
102cb630:	e353002c 	cmp	r3, #44	; 0x2c
102cb634:	0a000004 	beq	102cb64c <OnURCHandler_Network+0x64>
		{
		   return;
		}	
        p2 = Ql_strstr(p1, "\r\n");
102cb638:	e1a00004 	mov	r0, r4
102cb63c:	e59f1118 	ldr	r1, [pc, #280]	; 102cb75c <OnURCHandler_Network+0x174>
102cb640:	e12fff35 	blx	r5
        if (p1 && p2)
102cb644:	e2505000 	subs	r5, r0, #0
102cb648:	1a00002b 	bne	102cb6fc <OnURCHandler_Network+0x114>
            Ql_memcpy(strTmp, p1, p2 - p1);
            nwStat = Ql_atoi(strTmp);
            Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_GPRS_NW_STATE_IND, nwStat);
        }
    }
}
102cb64c:	e28dd010 	add	sp, sp, #16
102cb650:	e8bd8070 	pop	{r4, r5, r6, pc}
            Ql_memcpy(strTmp, p1, p2 - p1);
            nwStat = Ql_atoi(strTmp);
            Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_GSM_NW_STATE_IND, nwStat);
        }
    }
    else if (Ql_StrPrefixMatch(strURC, "\r\n+CGREG: "))
102cb654:	e1a00005 	mov	r0, r5
102cb658:	e59f1100 	ldr	r1, [pc, #256]	; 102cb760 <OnURCHandler_Network+0x178>
102cb65c:	e12fff34 	blx	r4
102cb660:	e3500000 	cmp	r0, #0
102cb664:	0afffff8 	beq	102cb64c <OnURCHandler_Network+0x64>
    {
        u32 nwStat;
        p1 = Ql_strstr(strURC, "\r\n+CGREG: ");
102cb668:	e59f10f0 	ldr	r1, [pc, #240]	; 102cb760 <OnURCHandler_Network+0x178>
102cb66c:	e1a00005 	mov	r0, r5
102cb670:	e59f50dc 	ldr	r5, [pc, #220]	; 102cb754 <OnURCHandler_Network+0x16c>
102cb674:	e12fff35 	blx	r5
        p1 += Ql_strlen("\r\n+CGREG: ");
102cb678:	e59f30d8 	ldr	r3, [pc, #216]	; 102cb758 <OnURCHandler_Network+0x170>
        }
    }
    else if (Ql_StrPrefixMatch(strURC, "\r\n+CGREG: "))
    {
        u32 nwStat;
        p1 = Ql_strstr(strURC, "\r\n+CGREG: ");
102cb67c:	e1a04000 	mov	r4, r0
        p1 += Ql_strlen("\r\n+CGREG: ");
102cb680:	e59f00d8 	ldr	r0, [pc, #216]	; 102cb760 <OnURCHandler_Network+0x178>
102cb684:	e12fff33 	blx	r3
102cb688:	e0844000 	add	r4, r4, r0
		if(*(p1+1) == 0x2C)          //Active query network status without reporting URCS
102cb68c:	e5d43001 	ldrb	r3, [r4, #1]
102cb690:	e353002c 	cmp	r3, #44	; 0x2c
102cb694:	0affffec 	beq	102cb64c <OnURCHandler_Network+0x64>
		{
		   return;
		}
        p2 = Ql_strstr(p1, "\r\n");
102cb698:	e1a00004 	mov	r0, r4
102cb69c:	e59f10b8 	ldr	r1, [pc, #184]	; 102cb75c <OnURCHandler_Network+0x174>
102cb6a0:	e12fff35 	blx	r5
        if (p1 && p2)
102cb6a4:	e2505000 	subs	r5, r0, #0
102cb6a8:	0affffe7 	beq	102cb64c <OnURCHandler_Network+0x64>
        {
            Ql_memset(strTmp, 0x0, sizeof(strTmp));
102cb6ac:	e1a01006 	mov	r1, r6
102cb6b0:	e3a0200a 	mov	r2, #10
102cb6b4:	e28d0004 	add	r0, sp, #4
102cb6b8:	e59f30a4 	ldr	r3, [pc, #164]	; 102cb764 <OnURCHandler_Network+0x17c>
102cb6bc:	e12fff33 	blx	r3
            Ql_memcpy(strTmp, p1, p2 - p1);
102cb6c0:	e1a01004 	mov	r1, r4
102cb6c4:	e0642005 	rsb	r2, r4, r5
102cb6c8:	e28d0004 	add	r0, sp, #4
102cb6cc:	e59f3094 	ldr	r3, [pc, #148]	; 102cb768 <OnURCHandler_Network+0x180>
102cb6d0:	e12fff33 	blx	r3
            nwStat = Ql_atoi(strTmp);
102cb6d4:	e28d0004 	add	r0, sp, #4
102cb6d8:	e59f308c 	ldr	r3, [pc, #140]	; 102cb76c <OnURCHandler_Network+0x184>
102cb6dc:	e12fff33 	blx	r3
            Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_GPRS_NW_STATE_IND, nwStat);
102cb6e0:	e59f1088 	ldr	r1, [pc, #136]	; 102cb770 <OnURCHandler_Network+0x188>
102cb6e4:	e3a02004 	mov	r2, #4
102cb6e8:	e59fc084 	ldr	ip, [pc, #132]	; 102cb774 <OnURCHandler_Network+0x18c>
        p2 = Ql_strstr(p1, "\r\n");
        if (p1 && p2)
        {
            Ql_memset(strTmp, 0x0, sizeof(strTmp));
            Ql_memcpy(strTmp, p1, p2 - p1);
            nwStat = Ql_atoi(strTmp);
102cb6ec:	e1a03000 	mov	r3, r0
            Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_GPRS_NW_STATE_IND, nwStat);
102cb6f0:	e1a00006 	mov	r0, r6
102cb6f4:	e12fff3c 	blx	ip
102cb6f8:	eaffffd3 	b	102cb64c <OnURCHandler_Network+0x64>
		   return;
		}	
        p2 = Ql_strstr(p1, "\r\n");
        if (p1 && p2)
        {
            Ql_memset(strTmp, 0x0, sizeof(strTmp));
102cb6fc:	e28d0004 	add	r0, sp, #4
102cb700:	e3a0200a 	mov	r2, #10
102cb704:	e3a01000 	mov	r1, #0
102cb708:	e59f3054 	ldr	r3, [pc, #84]	; 102cb764 <OnURCHandler_Network+0x17c>
102cb70c:	e12fff33 	blx	r3
            Ql_memcpy(strTmp, p1, p2 - p1);
102cb710:	e1a01004 	mov	r1, r4
102cb714:	e0642005 	rsb	r2, r4, r5
102cb718:	e28d0004 	add	r0, sp, #4
102cb71c:	e59f3044 	ldr	r3, [pc, #68]	; 102cb768 <OnURCHandler_Network+0x180>
102cb720:	e12fff33 	blx	r3
            nwStat = Ql_atoi(strTmp);
102cb724:	e28d0004 	add	r0, sp, #4
102cb728:	e59f303c 	ldr	r3, [pc, #60]	; 102cb76c <OnURCHandler_Network+0x184>
102cb72c:	e12fff33 	blx	r3
            Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_GSM_NW_STATE_IND, nwStat);
102cb730:	e59f1038 	ldr	r1, [pc, #56]	; 102cb770 <OnURCHandler_Network+0x188>
102cb734:	e3a02003 	mov	r2, #3
102cb738:	e59fc034 	ldr	ip, [pc, #52]	; 102cb774 <OnURCHandler_Network+0x18c>
        p2 = Ql_strstr(p1, "\r\n");
        if (p1 && p2)
        {
            Ql_memset(strTmp, 0x0, sizeof(strTmp));
            Ql_memcpy(strTmp, p1, p2 - p1);
            nwStat = Ql_atoi(strTmp);
102cb73c:	e1a03000 	mov	r3, r0
            Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_GSM_NW_STATE_IND, nwStat);
102cb740:	e3a00000 	mov	r0, #0
102cb744:	e12fff3c 	blx	ip
102cb748:	eaffffbf 	b	102cb64c <OnURCHandler_Network+0x64>
102cb74c:	102cf40c 	.word	0x102cf40c
102cb750:	102cbda0 	.word	0x102cbda0
102cb754:	102cd7c0 	.word	0x102cd7c0
102cb758:	102cd560 	.word	0x102cd560
102cb75c:	102cf3ac 	.word	0x102cf3ac
102cb760:	102cf418 	.word	0x102cf418
102cb764:	102cd6b0 	.word	0x102cd6b0
102cb768:	102cd738 	.word	0x102cd738
102cb76c:	102cd848 	.word	0x102cd848
102cb770:	00001002 	.word	0x00001002
102cb774:	102cda04 	.word	0x102cda04

102cb778 <OnURCHandler_Call>:
            Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_GPRS_NW_STATE_IND, nwStat);
        }
    }
}
static void OnURCHandler_Call(const char* strURC, void* reserved)
{
102cb778:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    char* p1 = NULL;
    char* p2 = NULL;
    char strTmp[10];
    if (Ql_StrPrefixMatch(strURC, "\r\nRING\r\n") || 
102cb77c:	e59f123c 	ldr	r1, [pc, #572]	; 102cb9c0 <OnURCHandler_Call+0x248>
            Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_GPRS_NW_STATE_IND, nwStat);
        }
    }
}
static void OnURCHandler_Call(const char* strURC, void* reserved)
{
102cb780:	e24dd010 	sub	sp, sp, #16
    char* p1 = NULL;
    char* p2 = NULL;
    char strTmp[10];
    if (Ql_StrPrefixMatch(strURC, "\r\nRING\r\n") || 
102cb784:	e59f4238 	ldr	r4, [pc, #568]	; 102cb9c4 <OnURCHandler_Call+0x24c>
            Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_GPRS_NW_STATE_IND, nwStat);
        }
    }
}
static void OnURCHandler_Call(const char* strURC, void* reserved)
{
102cb788:	e1a05000 	mov	r5, r0
    char* p1 = NULL;
    char* p2 = NULL;
    char strTmp[10];
    if (Ql_StrPrefixMatch(strURC, "\r\nRING\r\n") || 
102cb78c:	e12fff34 	blx	r4
102cb790:	e3500000 	cmp	r0, #0
102cb794:	1a000004 	bne	102cb7ac <OnURCHandler_Call+0x34>
        Ql_StrPrefixMatch(strURC, "\r\n+CLIP:") ||
102cb798:	e1a00005 	mov	r0, r5
102cb79c:	e59f1224 	ldr	r1, [pc, #548]	; 102cb9c8 <OnURCHandler_Call+0x250>
102cb7a0:	e12fff34 	blx	r4
static void OnURCHandler_Call(const char* strURC, void* reserved)
{
    char* p1 = NULL;
    char* p2 = NULL;
    char strTmp[10];
    if (Ql_StrPrefixMatch(strURC, "\r\nRING\r\n") || 
102cb7a4:	e3500000 	cmp	r0, #0
102cb7a8:	0a00004a 	beq	102cb8d8 <OnURCHandler_Call+0x160>
        Ql_StrPrefixMatch(strURC, "\r\n+CRING: VOICE\r\n"))
    {// Coming call
        extern ST_ComingCallInfo  g_comingCall;
        u16 len;

        p1 = Ql_strstr(strURC, "\r\n+CLIP:");
102cb7ac:	e1a00005 	mov	r0, r5
102cb7b0:	e59f1210 	ldr	r1, [pc, #528]	; 102cb9c8 <OnURCHandler_Call+0x250>
102cb7b4:	e59f5210 	ldr	r5, [pc, #528]	; 102cb9cc <OnURCHandler_Call+0x254>
102cb7b8:	e12fff35 	blx	r5
        if (!p1)
102cb7bc:	e250a000 	subs	sl, r0, #0
102cb7c0:	0a000042 	beq	102cb8d0 <OnURCHandler_Call+0x158>
        {
            return;
        }

        g_comingCall.ringCnt++;
102cb7c4:	e59f4204 	ldr	r4, [pc, #516]	; 102cb9d0 <OnURCHandler_Call+0x258>
        {
            g_comingCall.ringCnt %= 6;
        }

        // Retrieve phone number
        p1 += Ql_strlen("\r\n+CLIP:");
102cb7c8:	e59f01f8 	ldr	r0, [pc, #504]	; 102cb9c8 <OnURCHandler_Call+0x250>
        if (!p1)
        {
            return;
        }

        g_comingCall.ringCnt++;
102cb7cc:	e5943000 	ldr	r3, [r4]

        // Retrieve phone number
        p1 += Ql_strlen("\r\n+CLIP:");
        p2 = Ql_strstr(p1 + 1, ",");
        len = p2 - (p1 + 2) - 1;
        Ql_memcpy(g_comingCall.comingCall[g_comingCall.ringCnt].phoneNumber, p1 + 2, len);
102cb7d0:	e59f81fc 	ldr	r8, [pc, #508]	; 102cb9d4 <OnURCHandler_Call+0x25c>
        if (!p1)
        {
            return;
        }

        g_comingCall.ringCnt++;
102cb7d4:	e2833001 	add	r3, r3, #1
        if ((g_comingCall.ringCnt / 6) > 0)
102cb7d8:	e3530005 	cmp	r3, #5
        {
            g_comingCall.ringCnt %= 6;
102cb7dc:	859f21f4 	ldrhi	r2, [pc, #500]	; 102cb9d8 <OnURCHandler_Call+0x260>
        // Retrieve phone number
        p1 += Ql_strlen("\r\n+CLIP:");
        p2 = Ql_strstr(p1 + 1, ",");
        len = p2 - (p1 + 2) - 1;
        Ql_memcpy(g_comingCall.comingCall[g_comingCall.ringCnt].phoneNumber, p1 + 2, len);
        g_comingCall.comingCall[g_comingCall.ringCnt].phoneNumber[len] = '\0';
102cb7e0:	e3a06000 	mov	r6, #0
        }

        g_comingCall.ringCnt++;
        if ((g_comingCall.ringCnt / 6) > 0)
        {
            g_comingCall.ringCnt %= 6;
102cb7e4:	80821293 	umullhi	r1, r2, r3, r2
102cb7e8:	81a02122 	lsrhi	r2, r2, #2
102cb7ec:	80822082 	addhi	r2, r2, r2, lsl #1
102cb7f0:	80433082 	subhi	r3, r3, r2, lsl #1
102cb7f4:	e5843000 	str	r3, [r4]
        }

        // Retrieve phone number
        p1 += Ql_strlen("\r\n+CLIP:");
102cb7f8:	e59f31dc 	ldr	r3, [pc, #476]	; 102cb9dc <OnURCHandler_Call+0x264>
102cb7fc:	e12fff33 	blx	r3
        p2 = Ql_strstr(p1 + 1, ",");
102cb800:	e59f11d8 	ldr	r1, [pc, #472]	; 102cb9e0 <OnURCHandler_Call+0x268>
        {
            g_comingCall.ringCnt %= 6;
        }

        // Retrieve phone number
        p1 += Ql_strlen("\r\n+CLIP:");
102cb804:	e08aa000 	add	sl, sl, r0
        p2 = Ql_strstr(p1 + 1, ",");
102cb808:	e28a0001 	add	r0, sl, #1
102cb80c:	e12fff35 	blx	r5
        len = p2 - (p1 + 2) - 1;
102cb810:	e28a1002 	add	r1, sl, #2
        Ql_memcpy(g_comingCall.comingCall[g_comingCall.ringCnt].phoneNumber, p1 + 2, len);
102cb814:	e5943000 	ldr	r3, [r4]
102cb818:	e0833083 	add	r3, r3, r3, lsl #1
        }

        // Retrieve phone number
        p1 += Ql_strlen("\r\n+CLIP:");
        p2 = Ql_strstr(p1 + 1, ",");
        len = p2 - (p1 + 2) - 1;
102cb81c:	e0619000 	rsb	r9, r1, r0
102cb820:	e2499001 	sub	r9, r9, #1
102cb824:	e1a09809 	lsl	r9, r9, #16
            g_comingCall.ringCnt %= 6;
        }

        // Retrieve phone number
        p1 += Ql_strlen("\r\n+CLIP:");
        p2 = Ql_strstr(p1 + 1, ",");
102cb828:	e1a07000 	mov	r7, r0
        len = p2 - (p1 + 2) - 1;
102cb82c:	e1a09829 	lsr	r9, r9, #16
        Ql_memcpy(g_comingCall.comingCall[g_comingCall.ringCnt].phoneNumber, p1 + 2, len);
102cb830:	e0840203 	add	r0, r4, r3, lsl #4
102cb834:	e1a02009 	mov	r2, r9
102cb838:	e2800008 	add	r0, r0, #8
102cb83c:	e12fff38 	blx	r8
        g_comingCall.comingCall[g_comingCall.ringCnt].phoneNumber[len] = '\0';
102cb840:	e5943000 	ldr	r3, [r4]

        // Retrieve number type
        p1 = p2;
        p2 = Ql_strstr(p1 + 1, ",");
102cb844:	e287a001 	add	sl, r7, #1
        // Retrieve phone number
        p1 += Ql_strlen("\r\n+CLIP:");
        p2 = Ql_strstr(p1 + 1, ",");
        len = p2 - (p1 + 2) - 1;
        Ql_memcpy(g_comingCall.comingCall[g_comingCall.ringCnt].phoneNumber, p1 + 2, len);
        g_comingCall.comingCall[g_comingCall.ringCnt].phoneNumber[len] = '\0';
102cb848:	e0833083 	add	r3, r3, r3, lsl #1
102cb84c:	e0899203 	add	r9, r9, r3, lsl #4
102cb850:	e0849009 	add	r9, r4, r9

        // Retrieve number type
        p1 = p2;
        p2 = Ql_strstr(p1 + 1, ",");
102cb854:	e59f1184 	ldr	r1, [pc, #388]	; 102cb9e0 <OnURCHandler_Call+0x268>
102cb858:	e1a0000a 	mov	r0, sl
        // Retrieve phone number
        p1 += Ql_strlen("\r\n+CLIP:");
        p2 = Ql_strstr(p1 + 1, ",");
        len = p2 - (p1 + 2) - 1;
        Ql_memcpy(g_comingCall.comingCall[g_comingCall.ringCnt].phoneNumber, p1 + 2, len);
        g_comingCall.comingCall[g_comingCall.ringCnt].phoneNumber[len] = '\0';
102cb85c:	e5c96008 	strb	r6, [r9, #8]

        // Retrieve number type
        p1 = p2;
        p2 = Ql_strstr(p1 + 1, ",");
102cb860:	e12fff35 	blx	r5
        Ql_memset(strTmp, 0x0, sizeof(strTmp));
102cb864:	e59f3178 	ldr	r3, [pc, #376]	; 102cb9e4 <OnURCHandler_Call+0x26c>
102cb868:	e1a01006 	mov	r1, r6
102cb86c:	e3a0200a 	mov	r2, #10
        Ql_memcpy(g_comingCall.comingCall[g_comingCall.ringCnt].phoneNumber, p1 + 2, len);
        g_comingCall.comingCall[g_comingCall.ringCnt].phoneNumber[len] = '\0';

        // Retrieve number type
        p1 = p2;
        p2 = Ql_strstr(p1 + 1, ",");
102cb870:	e1a05000 	mov	r5, r0
        Ql_memset(strTmp, 0x0, sizeof(strTmp));
102cb874:	e28d0004 	add	r0, sp, #4
102cb878:	e12fff33 	blx	r3
        Ql_memcpy(strTmp, p1 + 1, p2 - p1 -1);
102cb87c:	e0672005 	rsb	r2, r7, r5
102cb880:	e1a0100a 	mov	r1, sl
102cb884:	e2422001 	sub	r2, r2, #1
102cb888:	e28d0004 	add	r0, sp, #4
102cb88c:	e12fff38 	blx	r8
        g_comingCall.comingCall[g_comingCall.ringCnt].type = Ql_atoi(strTmp);
102cb890:	e59f3150 	ldr	r3, [pc, #336]	; 102cb9e8 <OnURCHandler_Call+0x270>
102cb894:	e28d0004 	add	r0, sp, #4
102cb898:	e5945000 	ldr	r5, [r4]
102cb89c:	e12fff33 	blx	r3
        Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_COMING_CALL_IND, (u32)(&(g_comingCall.comingCall[g_comingCall.ringCnt])));
102cb8a0:	e5943000 	ldr	r3, [r4]
        // Retrieve number type
        p1 = p2;
        p2 = Ql_strstr(p1 + 1, ",");
        Ql_memset(strTmp, 0x0, sizeof(strTmp));
        Ql_memcpy(strTmp, p1 + 1, p2 - p1 -1);
        g_comingCall.comingCall[g_comingCall.ringCnt].type = Ql_atoi(strTmp);
102cb8a4:	e0855085 	add	r5, r5, r5, lsl #1
        Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_COMING_CALL_IND, (u32)(&(g_comingCall.comingCall[g_comingCall.ringCnt])));
102cb8a8:	e0833083 	add	r3, r3, r3, lsl #1
        // Retrieve number type
        p1 = p2;
        p2 = Ql_strstr(p1 + 1, ",");
        Ql_memset(strTmp, 0x0, sizeof(strTmp));
        Ql_memcpy(strTmp, p1 + 1, p2 - p1 -1);
        g_comingCall.comingCall[g_comingCall.ringCnt].type = Ql_atoi(strTmp);
102cb8ac:	e0845205 	add	r5, r4, r5, lsl #4
        Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_COMING_CALL_IND, (u32)(&(g_comingCall.comingCall[g_comingCall.ringCnt])));
102cb8b0:	e0843203 	add	r3, r4, r3, lsl #4
102cb8b4:	e59f1130 	ldr	r1, [pc, #304]	; 102cb9ec <OnURCHandler_Call+0x274>
102cb8b8:	e3a02006 	mov	r2, #6
102cb8bc:	e2833004 	add	r3, r3, #4
102cb8c0:	e59fc128 	ldr	ip, [pc, #296]	; 102cb9f0 <OnURCHandler_Call+0x278>
        // Retrieve number type
        p1 = p2;
        p2 = Ql_strstr(p1 + 1, ",");
        Ql_memset(strTmp, 0x0, sizeof(strTmp));
        Ql_memcpy(strTmp, p1 + 1, p2 - p1 -1);
        g_comingCall.comingCall[g_comingCall.ringCnt].type = Ql_atoi(strTmp);
102cb8c4:	e5850004 	str	r0, [r5, #4]
        Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_COMING_CALL_IND, (u32)(&(g_comingCall.comingCall[g_comingCall.ringCnt])));
102cb8c8:	e1a00006 	mov	r0, r6
102cb8cc:	e12fff3c 	blx	ip
        }else{
            return;
        }
        Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_CALL_STATE_IND, callStat);
    }
}
102cb8d0:	e28dd010 	add	sp, sp, #16
102cb8d4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    char* p1 = NULL;
    char* p2 = NULL;
    char strTmp[10];
    if (Ql_StrPrefixMatch(strURC, "\r\nRING\r\n") || 
        Ql_StrPrefixMatch(strURC, "\r\n+CLIP:") ||
        Ql_StrPrefixMatch(strURC, "\r\n+CRING: VOICE\r\n"))
102cb8d8:	e1a00005 	mov	r0, r5
102cb8dc:	e59f1110 	ldr	r1, [pc, #272]	; 102cb9f4 <OnURCHandler_Call+0x27c>
102cb8e0:	e12fff34 	blx	r4
{
    char* p1 = NULL;
    char* p2 = NULL;
    char strTmp[10];
    if (Ql_StrPrefixMatch(strURC, "\r\nRING\r\n") || 
        Ql_StrPrefixMatch(strURC, "\r\n+CLIP:") ||
102cb8e4:	e3500000 	cmp	r0, #0
102cb8e8:	1affffaf 	bne	102cb7ac <OnURCHandler_Call+0x34>
        Ql_memset(strTmp, 0x0, sizeof(strTmp));
        Ql_memcpy(strTmp, p1 + 1, p2 - p1 -1);
        g_comingCall.comingCall[g_comingCall.ringCnt].type = Ql_atoi(strTmp);
        Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_COMING_CALL_IND, (u32)(&(g_comingCall.comingCall[g_comingCall.ringCnt])));
    }
    else if (Ql_StrPrefixMatch(strURC, "\r\nBUSY\r\n")         ||
102cb8ec:	e1a00005 	mov	r0, r5
102cb8f0:	e59f1100 	ldr	r1, [pc, #256]	; 102cb9f8 <OnURCHandler_Call+0x280>
102cb8f4:	e12fff34 	blx	r4
102cb8f8:	e3500000 	cmp	r0, #0
102cb8fc:	1a000004 	bne	102cb914 <OnURCHandler_Call+0x19c>
             Ql_StrPrefixMatch(strURC, "\r\nNO ANSWER\r\n")    ||
102cb900:	e1a00005 	mov	r0, r5
102cb904:	e59f10f0 	ldr	r1, [pc, #240]	; 102cb9fc <OnURCHandler_Call+0x284>
102cb908:	e12fff34 	blx	r4
        Ql_memset(strTmp, 0x0, sizeof(strTmp));
        Ql_memcpy(strTmp, p1 + 1, p2 - p1 -1);
        g_comingCall.comingCall[g_comingCall.ringCnt].type = Ql_atoi(strTmp);
        Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_COMING_CALL_IND, (u32)(&(g_comingCall.comingCall[g_comingCall.ringCnt])));
    }
    else if (Ql_StrPrefixMatch(strURC, "\r\nBUSY\r\n")         ||
102cb90c:	e3500000 	cmp	r0, #0
102cb910:	0a00001f 	beq	102cb994 <OnURCHandler_Call+0x21c>
             Ql_StrPrefixMatch(strURC, "\r\nNO CARRIER\r\n")   ||
             Ql_StrPrefixMatch(strURC, "\r\nNO DIALTONE\r\n"))
    {
        u32 callStat;

        if (Ql_StrPrefixMatch(strURC, "\r\nBUSY\r\n"))
102cb914:	e1a00005 	mov	r0, r5
102cb918:	e59f10d8 	ldr	r1, [pc, #216]	; 102cb9f8 <OnURCHandler_Call+0x280>
102cb91c:	e12fff34 	blx	r4
102cb920:	e59f409c 	ldr	r4, [pc, #156]	; 102cb9c4 <OnURCHandler_Call+0x24c>
102cb924:	e3500000 	cmp	r0, #0
102cb928:	0a000006 	beq	102cb948 <OnURCHandler_Call+0x1d0>
        {
            callStat = CALL_STATE_BUSY;
102cb92c:	e3a03001 	mov	r3, #1
        {
            callStat = CALL_STATE_NO_DIALTONE;
        }else{
            return;
        }
        Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_CALL_STATE_IND, callStat);
102cb930:	e59f10b4 	ldr	r1, [pc, #180]	; 102cb9ec <OnURCHandler_Call+0x274>
102cb934:	e3a02007 	mov	r2, #7
102cb938:	e59fc0b0 	ldr	ip, [pc, #176]	; 102cb9f0 <OnURCHandler_Call+0x278>
102cb93c:	e3a00000 	mov	r0, #0
102cb940:	e12fff3c 	blx	ip
102cb944:	eaffffe1 	b	102cb8d0 <OnURCHandler_Call+0x158>

        if (Ql_StrPrefixMatch(strURC, "\r\nBUSY\r\n"))
        {
            callStat = CALL_STATE_BUSY;
        }
        else if (Ql_StrPrefixMatch(strURC, "\r\nNO ANSWER\r\n"))
102cb948:	e1a00005 	mov	r0, r5
102cb94c:	e59f10a8 	ldr	r1, [pc, #168]	; 102cb9fc <OnURCHandler_Call+0x284>
102cb950:	e12fff34 	blx	r4
102cb954:	e3500000 	cmp	r0, #0
        {
            callStat = CALL_STATE_NO_ANSWER;
102cb958:	13a03002 	movne	r3, #2

        if (Ql_StrPrefixMatch(strURC, "\r\nBUSY\r\n"))
        {
            callStat = CALL_STATE_BUSY;
        }
        else if (Ql_StrPrefixMatch(strURC, "\r\nNO ANSWER\r\n"))
102cb95c:	1afffff3 	bne	102cb930 <OnURCHandler_Call+0x1b8>
        {
            callStat = CALL_STATE_NO_ANSWER;
        }
        else if (Ql_StrPrefixMatch(strURC, "\r\nNO CARRIER\r\n"))
102cb960:	e1a00005 	mov	r0, r5
102cb964:	e59f1094 	ldr	r1, [pc, #148]	; 102cba00 <OnURCHandler_Call+0x288>
102cb968:	e12fff34 	blx	r4
102cb96c:	e3500000 	cmp	r0, #0
        {
            callStat = CALL_STATE_NO_CARRIER;
102cb970:	13a03003 	movne	r3, #3
        }
        else if (Ql_StrPrefixMatch(strURC, "\r\nNO ANSWER\r\n"))
        {
            callStat = CALL_STATE_NO_ANSWER;
        }
        else if (Ql_StrPrefixMatch(strURC, "\r\nNO CARRIER\r\n"))
102cb974:	1affffed 	bne	102cb930 <OnURCHandler_Call+0x1b8>
        {
            callStat = CALL_STATE_NO_CARRIER;
        }
        else if (Ql_StrPrefixMatch(strURC, "\r\nNO DIALTONE\r\n"))
102cb978:	e1a00005 	mov	r0, r5
102cb97c:	e59f1080 	ldr	r1, [pc, #128]	; 102cba04 <OnURCHandler_Call+0x28c>
102cb980:	e12fff34 	blx	r4
102cb984:	e3500000 	cmp	r0, #0
        {
            callStat = CALL_STATE_NO_DIALTONE;
102cb988:	13a03004 	movne	r3, #4
        }
        else if (Ql_StrPrefixMatch(strURC, "\r\nNO CARRIER\r\n"))
        {
            callStat = CALL_STATE_NO_CARRIER;
        }
        else if (Ql_StrPrefixMatch(strURC, "\r\nNO DIALTONE\r\n"))
102cb98c:	1affffe7 	bne	102cb930 <OnURCHandler_Call+0x1b8>
102cb990:	eaffffce 	b	102cb8d0 <OnURCHandler_Call+0x158>
        g_comingCall.comingCall[g_comingCall.ringCnt].type = Ql_atoi(strTmp);
        Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_COMING_CALL_IND, (u32)(&(g_comingCall.comingCall[g_comingCall.ringCnt])));
    }
    else if (Ql_StrPrefixMatch(strURC, "\r\nBUSY\r\n")         ||
             Ql_StrPrefixMatch(strURC, "\r\nNO ANSWER\r\n")    ||
             Ql_StrPrefixMatch(strURC, "\r\nNO CARRIER\r\n")   ||
102cb994:	e1a00005 	mov	r0, r5
102cb998:	e59f1060 	ldr	r1, [pc, #96]	; 102cba00 <OnURCHandler_Call+0x288>
102cb99c:	e12fff34 	blx	r4
        Ql_memcpy(strTmp, p1 + 1, p2 - p1 -1);
        g_comingCall.comingCall[g_comingCall.ringCnt].type = Ql_atoi(strTmp);
        Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_COMING_CALL_IND, (u32)(&(g_comingCall.comingCall[g_comingCall.ringCnt])));
    }
    else if (Ql_StrPrefixMatch(strURC, "\r\nBUSY\r\n")         ||
             Ql_StrPrefixMatch(strURC, "\r\nNO ANSWER\r\n")    ||
102cb9a0:	e3500000 	cmp	r0, #0
102cb9a4:	1affffda 	bne	102cb914 <OnURCHandler_Call+0x19c>
             Ql_StrPrefixMatch(strURC, "\r\nNO CARRIER\r\n")   ||
             Ql_StrPrefixMatch(strURC, "\r\nNO DIALTONE\r\n"))
102cb9a8:	e1a00005 	mov	r0, r5
102cb9ac:	e59f1050 	ldr	r1, [pc, #80]	; 102cba04 <OnURCHandler_Call+0x28c>
102cb9b0:	e12fff34 	blx	r4
        g_comingCall.comingCall[g_comingCall.ringCnt].type = Ql_atoi(strTmp);
        Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_COMING_CALL_IND, (u32)(&(g_comingCall.comingCall[g_comingCall.ringCnt])));
    }
    else if (Ql_StrPrefixMatch(strURC, "\r\nBUSY\r\n")         ||
             Ql_StrPrefixMatch(strURC, "\r\nNO ANSWER\r\n")    ||
             Ql_StrPrefixMatch(strURC, "\r\nNO CARRIER\r\n")   ||
102cb9b4:	e3500000 	cmp	r0, #0
102cb9b8:	1affffd5 	bne	102cb914 <OnURCHandler_Call+0x19c>
102cb9bc:	eaffffc3 	b	102cb8d0 <OnURCHandler_Call+0x158>
102cb9c0:	102cf424 	.word	0x102cf424
102cb9c4:	102cbda0 	.word	0x102cbda0
102cb9c8:	102cf430 	.word	0x102cf430
102cb9cc:	102cd7c0 	.word	0x102cd7c0
102cb9d0:	f03d30c0 	.word	0xf03d30c0
102cb9d4:	102cd738 	.word	0x102cd738
102cb9d8:	aaaaaaab 	.word	0xaaaaaaab
102cb9dc:	102cd560 	.word	0x102cd560
102cb9e0:	102cf268 	.word	0x102cf268
102cb9e4:	102cd6b0 	.word	0x102cd6b0
102cb9e8:	102cd848 	.word	0x102cd848
102cb9ec:	00001002 	.word	0x00001002
102cb9f0:	102cda04 	.word	0x102cda04
102cb9f4:	102cf43c 	.word	0x102cf43c
102cb9f8:	102cf450 	.word	0x102cf450
102cb9fc:	102cf45c 	.word	0x102cf45c
102cba00:	102cf46c 	.word	0x102cf46c
102cba04:	102cf47c 	.word	0x102cf47c

102cba08 <OnURCHandler_SIM>:
    {"\r\n+QLBS:",							  	  OnURCHandler_QLBS},
#endif
};

static void OnURCHandler_SIM(const char* strURC, void* reserved)
{
102cba08:	e92d40f0 	push	{r4, r5, r6, r7, lr}
102cba0c:	e24dd01c 	sub	sp, sp, #28
    char* p2 = NULL;
    char strTmp[20];
    s32 len;
    extern s32 RIL_SIM_GetSimStateByName(char* simStat, u32 len);

    Ql_memset(strTmp, 0x0, sizeof(strTmp));
102cba10:	e3a02014 	mov	r2, #20
    {"\r\n+QLBS:",							  	  OnURCHandler_QLBS},
#endif
};

static void OnURCHandler_SIM(const char* strURC, void* reserved)
{
102cba14:	e1a04000 	mov	r4, r0
    char* p2 = NULL;
    char strTmp[20];
    s32 len;
    extern s32 RIL_SIM_GetSimStateByName(char* simStat, u32 len);

    Ql_memset(strTmp, 0x0, sizeof(strTmp));
102cba18:	e3a01000 	mov	r1, #0
102cba1c:	e28d0004 	add	r0, sp, #4
102cba20:	e59f50b8 	ldr	r5, [pc, #184]	; 102cbae0 <OnURCHandler_SIM+0xd8>
102cba24:	e12fff35 	blx	r5
    len = Ql_sprintf(strTmp, "\r\n+CPIN: ");
102cba28:	e59f30b4 	ldr	r3, [pc, #180]	; 102cbae4 <OnURCHandler_SIM+0xdc>
102cba2c:	e59f10b4 	ldr	r1, [pc, #180]	; 102cbae8 <OnURCHandler_SIM+0xe0>
102cba30:	e5933000 	ldr	r3, [r3]
102cba34:	e28d0004 	add	r0, sp, #4
102cba38:	e12fff33 	blx	r3
    if (Ql_StrPrefixMatch(strURC, strTmp))
102cba3c:	e28d1004 	add	r1, sp, #4
102cba40:	e59f30a4 	ldr	r3, [pc, #164]	; 102cbaec <OnURCHandler_SIM+0xe4>
    char strTmp[20];
    s32 len;
    extern s32 RIL_SIM_GetSimStateByName(char* simStat, u32 len);

    Ql_memset(strTmp, 0x0, sizeof(strTmp));
    len = Ql_sprintf(strTmp, "\r\n+CPIN: ");
102cba44:	e1a06000 	mov	r6, r0
    if (Ql_StrPrefixMatch(strURC, strTmp))
102cba48:	e1a00004 	mov	r0, r4
102cba4c:	e12fff33 	blx	r3
102cba50:	e3500000 	cmp	r0, #0
102cba54:	1a000001 	bne	102cba60 <OnURCHandler_SIM+0x58>
            Ql_memcpy(strTmp, p1, p2 - p1);
            cpinStat = (u32)RIL_SIM_GetSimStateByName(strTmp, p2 - p1);
            Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_SIM_CARD_STATE_IND, cpinStat);
        }
    }
}
102cba58:	e28dd01c 	add	sp, sp, #28
102cba5c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

    Ql_memset(strTmp, 0x0, sizeof(strTmp));
    len = Ql_sprintf(strTmp, "\r\n+CPIN: ");
    if (Ql_StrPrefixMatch(strURC, strTmp))
    {
        p1 = Ql_strstr(strURC, "\r\n+CPIN: ");
102cba60:	e59f1080 	ldr	r1, [pc, #128]	; 102cbae8 <OnURCHandler_SIM+0xe0>
102cba64:	e59f7084 	ldr	r7, [pc, #132]	; 102cbaf0 <OnURCHandler_SIM+0xe8>
102cba68:	e1a00004 	mov	r0, r4
102cba6c:	e12fff37 	blx	r7
        p1 += len;
        p2 = Ql_strstr(p1, "\r\n");
102cba70:	e59f107c 	ldr	r1, [pc, #124]	; 102cbaf4 <OnURCHandler_SIM+0xec>
    Ql_memset(strTmp, 0x0, sizeof(strTmp));
    len = Ql_sprintf(strTmp, "\r\n+CPIN: ");
    if (Ql_StrPrefixMatch(strURC, strTmp))
    {
        p1 = Ql_strstr(strURC, "\r\n+CPIN: ");
        p1 += len;
102cba74:	e0804006 	add	r4, r0, r6
        p2 = Ql_strstr(p1, "\r\n");
102cba78:	e1a00004 	mov	r0, r4
102cba7c:	e12fff37 	blx	r7
        if (p1 && p2)
102cba80:	e3540000 	cmp	r4, #0
102cba84:	13500000 	cmpne	r0, #0
102cba88:	0afffff2 	beq	102cba58 <OnURCHandler_SIM+0x50>
        {
            u32 cpinStat;
            Ql_memset(strTmp, 0x0, sizeof(strTmp));
            Ql_memcpy(strTmp, p1, p2 - p1);
102cba8c:	e0646000 	rsb	r6, r4, r0
        p1 += len;
        p2 = Ql_strstr(p1, "\r\n");
        if (p1 && p2)
        {
            u32 cpinStat;
            Ql_memset(strTmp, 0x0, sizeof(strTmp));
102cba90:	e3a01000 	mov	r1, #0
102cba94:	e3a02014 	mov	r2, #20
102cba98:	e28d0004 	add	r0, sp, #4
102cba9c:	e12fff35 	blx	r5
            Ql_memcpy(strTmp, p1, p2 - p1);
102cbaa0:	e1a02006 	mov	r2, r6
102cbaa4:	e1a01004 	mov	r1, r4
102cbaa8:	e28d0004 	add	r0, sp, #4
102cbaac:	e59f3044 	ldr	r3, [pc, #68]	; 102cbaf8 <OnURCHandler_SIM+0xf0>
102cbab0:	e12fff33 	blx	r3
            cpinStat = (u32)RIL_SIM_GetSimStateByName(strTmp, p2 - p1);
102cbab4:	e1a01006 	mov	r1, r6
102cbab8:	e28d0004 	add	r0, sp, #4
102cbabc:	e59f3038 	ldr	r3, [pc, #56]	; 102cbafc <OnURCHandler_SIM+0xf4>
102cbac0:	e12fff33 	blx	r3
            Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_SIM_CARD_STATE_IND, cpinStat);
102cbac4:	e59f1034 	ldr	r1, [pc, #52]	; 102cbb00 <OnURCHandler_SIM+0xf8>
102cbac8:	e3a02002 	mov	r2, #2
102cbacc:	e59fc030 	ldr	ip, [pc, #48]	; 102cbb04 <OnURCHandler_SIM+0xfc>
        if (p1 && p2)
        {
            u32 cpinStat;
            Ql_memset(strTmp, 0x0, sizeof(strTmp));
            Ql_memcpy(strTmp, p1, p2 - p1);
            cpinStat = (u32)RIL_SIM_GetSimStateByName(strTmp, p2 - p1);
102cbad0:	e1a03000 	mov	r3, r0
            Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_SIM_CARD_STATE_IND, cpinStat);
102cbad4:	e3a00000 	mov	r0, #0
102cbad8:	e12fff3c 	blx	ip
102cbadc:	eaffffdd 	b	102cba58 <OnURCHandler_SIM+0x50>
102cbae0:	102cd6b0 	.word	0x102cd6b0
102cbae4:	f03d31e8 	.word	0xf03d31e8
102cbae8:	102cf48c 	.word	0x102cf48c
102cbaec:	102cbda0 	.word	0x102cbda0
102cbaf0:	102cd7c0 	.word	0x102cd7c0
102cbaf4:	102cf3ac 	.word	0x102cf3ac
102cbaf8:	102cd738 	.word	0x102cd738
102cbafc:	102cad7c 	.word	0x102cad7c
102cbb00:	00001002 	.word	0x00001002
102cbb04:	102cda04 	.word	0x102cda04

102cbb08 <OnURCHandler_SMS>:
        Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_CALL_STATE_IND, callStat);
    }
}

static void OnURCHandler_SMS(const char* strURC, void* reserved)
{
102cbb08:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    char* p1 = NULL;
    char* p2 = NULL;

    //TODO: Something wrong with long SMS
    if (Ql_StrPrefixMatch(strURC, "\r\n+CMTI:")) 
102cbb0c:	e59f110c 	ldr	r1, [pc, #268]	; 102cbc20 <OnURCHandler_SMS+0x118>
        Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_CALL_STATE_IND, callStat);
    }
}

static void OnURCHandler_SMS(const char* strURC, void* reserved)
{
102cbb10:	e24dd014 	sub	sp, sp, #20
    char* p1 = NULL;
    char* p2 = NULL;

    //TODO: Something wrong with long SMS
    if (Ql_StrPrefixMatch(strURC, "\r\n+CMTI:")) 
102cbb14:	e59f4108 	ldr	r4, [pc, #264]	; 102cbc24 <OnURCHandler_SMS+0x11c>
        Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_CALL_STATE_IND, callStat);
    }
}

static void OnURCHandler_SMS(const char* strURC, void* reserved)
{
102cbb18:	e1a06000 	mov	r6, r0
    char* p1 = NULL;
    char* p2 = NULL;

    //TODO: Something wrong with long SMS
    if (Ql_StrPrefixMatch(strURC, "\r\n+CMTI:")) 
102cbb1c:	e12fff34 	blx	r4
102cbb20:	e3500000 	cmp	r0, #0
102cbb24:	0a000018 	beq	102cbb8c <OnURCHandler_SMS+0x84>
    {
        u32 smsIndex;
        char mem[SMS_MEM_CHAR_LEN];

        // Get 'mem'
        p1 = Ql_strstr(strURC, ":");
102cbb28:	e59f10f8 	ldr	r1, [pc, #248]	; 102cbc28 <OnURCHandler_SMS+0x120>
102cbb2c:	e59f50f8 	ldr	r5, [pc, #248]	; 102cbc2c <OnURCHandler_SMS+0x124>
102cbb30:	e1a00006 	mov	r0, r6
102cbb34:	e12fff35 	blx	r5
        p1 += 3;
        p2 = Ql_strstr(p1, ",");
102cbb38:	e59f10f0 	ldr	r1, [pc, #240]	; 102cbc30 <OnURCHandler_SMS+0x128>
        u32 smsIndex;
        char mem[SMS_MEM_CHAR_LEN];

        // Get 'mem'
        p1 = Ql_strstr(strURC, ":");
        p1 += 3;
102cbb3c:	e2806003 	add	r6, r0, #3
        p2 = Ql_strstr(p1, ",");
102cbb40:	e1a00006 	mov	r0, r6
102cbb44:	e12fff35 	blx	r5
        if (p1 && p2)
102cbb48:	e2907000 	adds	r7, r0, #0
102cbb4c:	13a07001 	movne	r7, #1
102cbb50:	e3560000 	cmp	r6, #0
102cbb54:	13500000 	cmpne	r0, #0
102cbb58:	e1a04000 	mov	r4, r0
102cbb5c:	1a000023 	bne	102cbbf0 <OnURCHandler_SMS+0xe8>
            Ql_strncpy(mem, p1, (p2 - p1 - 1));
        }

        // Get index
        p1 = p2;
        p2 = Ql_strstr(p1, "\r\n");
102cbb60:	e1a00004 	mov	r0, r4
102cbb64:	e59f10c8 	ldr	r1, [pc, #200]	; 102cbc34 <OnURCHandler_SMS+0x12c>
102cbb68:	e12fff35 	blx	r5
        if (p1 && p2)
102cbb6c:	e3500000 	cmp	r0, #0
102cbb70:	03a07000 	moveq	r7, #0
102cbb74:	12077001 	andne	r7, r7, #1
102cbb78:	e3570000 	cmp	r7, #0
102cbb7c:	e1a05000 	mov	r5, r0
102cbb80:	1a000005 	bne	102cbb9c <OnURCHandler_SMS+0x94>
        }
    }
    else if (Ql_StrPrefixMatch(strURC, "\r\n+CMT:"))
    {
    }
}
102cbb84:	e28dd014 	add	sp, sp, #20
102cbb88:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
            Ql_strncpy(strIndex, p1 + 1, p2 - p1 - 1);
            smsIndex = Ql_atoi(strIndex);
            Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_NEW_SMS_IND, smsIndex);
        }
    }
    else if (Ql_StrPrefixMatch(strURC, "\r\n+CMT:"))
102cbb8c:	e1a00006 	mov	r0, r6
102cbb90:	e59f10a0 	ldr	r1, [pc, #160]	; 102cbc38 <OnURCHandler_SMS+0x130>
102cbb94:	e12fff34 	blx	r4
102cbb98:	eafffff9 	b	102cbb84 <OnURCHandler_SMS+0x7c>
        p1 = p2;
        p2 = Ql_strstr(p1, "\r\n");
        if (p1 && p2)
        {
            char strIndex[10];
            Ql_memset(strIndex, 0x0, sizeof(strIndex));
102cbb9c:	e28d0004 	add	r0, sp, #4
102cbba0:	e3a01000 	mov	r1, #0
102cbba4:	e3a0200a 	mov	r2, #10
102cbba8:	e59f308c 	ldr	r3, [pc, #140]	; 102cbc3c <OnURCHandler_SMS+0x134>
102cbbac:	e12fff33 	blx	r3
            Ql_strncpy(strIndex, p1 + 1, p2 - p1 - 1);
102cbbb0:	e0642005 	rsb	r2, r4, r5
102cbbb4:	e2841001 	add	r1, r4, #1
102cbbb8:	e2422001 	sub	r2, r2, #1
102cbbbc:	e28d0004 	add	r0, sp, #4
102cbbc0:	e59f3078 	ldr	r3, [pc, #120]	; 102cbc40 <OnURCHandler_SMS+0x138>
102cbbc4:	e12fff33 	blx	r3
            smsIndex = Ql_atoi(strIndex);
102cbbc8:	e28d0004 	add	r0, sp, #4
102cbbcc:	e59f3070 	ldr	r3, [pc, #112]	; 102cbc44 <OnURCHandler_SMS+0x13c>
102cbbd0:	e12fff33 	blx	r3
            Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_NEW_SMS_IND, smsIndex);
102cbbd4:	e59f106c 	ldr	r1, [pc, #108]	; 102cbc48 <OnURCHandler_SMS+0x140>
102cbbd8:	e3a02008 	mov	r2, #8
102cbbdc:	e59fc068 	ldr	ip, [pc, #104]	; 102cbc4c <OnURCHandler_SMS+0x144>
        if (p1 && p2)
        {
            char strIndex[10];
            Ql_memset(strIndex, 0x0, sizeof(strIndex));
            Ql_strncpy(strIndex, p1 + 1, p2 - p1 - 1);
            smsIndex = Ql_atoi(strIndex);
102cbbe0:	e1a03000 	mov	r3, r0
            Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_NEW_SMS_IND, smsIndex);
102cbbe4:	e3a00000 	mov	r0, #0
102cbbe8:	e12fff3c 	blx	ip
102cbbec:	eaffffe4 	b	102cbb84 <OnURCHandler_SMS+0x7c>
        p1 = Ql_strstr(strURC, ":");
        p1 += 3;
        p2 = Ql_strstr(p1, ",");
        if (p1 && p2)
        {
            Ql_memset(mem, 0x0, sizeof(mem));
102cbbf0:	e3a01000 	mov	r1, #0
102cbbf4:	e3a02004 	mov	r2, #4
102cbbf8:	e1a0000d 	mov	r0, sp
102cbbfc:	e59f3038 	ldr	r3, [pc, #56]	; 102cbc3c <OnURCHandler_SMS+0x134>
102cbc00:	e12fff33 	blx	r3
            Ql_strncpy(mem, p1, (p2 - p1 - 1));
102cbc04:	e0662004 	rsb	r2, r6, r4
102cbc08:	e1a0000d 	mov	r0, sp
102cbc0c:	e1a01006 	mov	r1, r6
102cbc10:	e2422001 	sub	r2, r2, #1
102cbc14:	e59f3024 	ldr	r3, [pc, #36]	; 102cbc40 <OnURCHandler_SMS+0x138>
102cbc18:	e12fff33 	blx	r3
102cbc1c:	eaffffcf 	b	102cbb60 <OnURCHandler_SMS+0x58>
102cbc20:	102cf498 	.word	0x102cf498
102cbc24:	102cbda0 	.word	0x102cbda0
102cbc28:	102cf4a4 	.word	0x102cf4a4
102cbc2c:	102cd7c0 	.word	0x102cd7c0
102cbc30:	102cf268 	.word	0x102cf268
102cbc34:	102cf3ac 	.word	0x102cf3ac
102cbc38:	102cf4a8 	.word	0x102cf4a8
102cbc3c:	102cd6b0 	.word	0x102cd6b0
102cbc40:	102cd4d8 	.word	0x102cd4d8
102cbc44:	102cd848 	.word	0x102cd848
102cbc48:	00001002 	.word	0x00001002
102cbc4c:	102cda04 	.word	0x102cda04

102cbc50 <OnURCHandler>:
*                   reserved, can be NULL.
* Return:        
*               The function returns "ptrUrc".
*****************************************************************/
void OnURCHandler(const char* strURC, void* reserved)
{
102cbc50:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, sl, lr}
    s32 i;
    
    if (NULL == strURC)
102cbc54:	e2506000 	subs	r6, r0, #0
*                   reserved, can be NULL.
* Return:        
*               The function returns "ptrUrc".
*****************************************************************/
void OnURCHandler(const char* strURC, void* reserved)
{
102cbc58:	e1a0a001 	mov	sl, r1
    s32 i;
    
    if (NULL == strURC)
102cbc5c:	08bd85f8 	popeq	{r3, r4, r5, r6, r7, r8, sl, pc}
102cbc60:	e59f80a4 	ldr	r8, [pc, #164]	; 102cbd0c <OnURCHandler+0xbc>
102cbc64:	e59f70a4 	ldr	r7, [pc, #164]	; 102cbd10 <OnURCHandler+0xc0>
102cbc68:	e3a04000 	mov	r4, #0
102cbc6c:	ea000001 	b	102cbc78 <OnURCHandler+0x28>
    {
        return;
    }

    // For system URCs
    for (i = 0; i < NUM_ELEMS(m_SysURCHdlEntry); i++)
102cbc70:	e3540015 	cmp	r4, #21
102cbc74:	0a00000c 	beq	102cbcac <OnURCHandler+0x5c>
    {
        if (Ql_strstr(strURC, m_SysURCHdlEntry[i].keyword))
102cbc78:	e0645184 	rsb	r5, r4, r4, lsl #3
102cbc7c:	e0885185 	add	r5, r8, r5, lsl #3
102cbc80:	e1a00006 	mov	r0, r6
102cbc84:	e1a01005 	mov	r1, r5
102cbc88:	e12fff37 	blx	r7
    {
        return;
    }

    // For system URCs
    for (i = 0; i < NUM_ELEMS(m_SysURCHdlEntry); i++)
102cbc8c:	e2844001 	add	r4, r4, #1
    {
        if (Ql_strstr(strURC, m_SysURCHdlEntry[i].keyword))
102cbc90:	e3500000 	cmp	r0, #0
102cbc94:	0afffff5 	beq	102cbc70 <OnURCHandler+0x20>
        {
            m_SysURCHdlEntry[i].handler(strURC, reserved);
102cbc98:	e5953034 	ldr	r3, [r5, #52]	; 0x34
102cbc9c:	e1a00006 	mov	r0, r6
102cbca0:	e1a0100a 	mov	r1, sl
102cbca4:	e12fff33 	blx	r3
            return;
102cbca8:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, sl, pc}
102cbcac:	e59f8060 	ldr	r8, [pc, #96]	; 102cbd14 <OnURCHandler+0xc4>
    {
        return;
    }

    // For system URCs
    for (i = 0; i < NUM_ELEMS(m_SysURCHdlEntry); i++)
102cbcb0:	e1a04000 	mov	r4, r0
    }

    // For AT URCs
    for (i = 0; i < NUM_ELEMS(m_AtURCHdlEntry); i++)
    {
        if (Ql_strstr(strURC, m_AtURCHdlEntry[i].keyword))
102cbcb4:	e0645184 	rsb	r5, r4, r4, lsl #3
102cbcb8:	e1a05185 	lsl	r5, r5, #3
102cbcbc:	e1a00006 	mov	r0, r6
102cbcc0:	e0881005 	add	r1, r8, r5
102cbcc4:	e12fff37 	blx	r7
            return;
        }
    }

    // For AT URCs
    for (i = 0; i < NUM_ELEMS(m_AtURCHdlEntry); i++)
102cbcc8:	e2844001 	add	r4, r4, #1
    {
        if (Ql_strstr(strURC, m_AtURCHdlEntry[i].keyword))
102cbccc:	e2503000 	subs	r3, r0, #0
102cbcd0:	1a000006 	bne	102cbcf0 <OnURCHandler+0xa0>
            return;
        }
    }

    // For AT URCs
    for (i = 0; i < NUM_ELEMS(m_AtURCHdlEntry); i++)
102cbcd4:	e3540012 	cmp	r4, #18
102cbcd8:	1afffff5 	bne	102cbcb4 <OnURCHandler+0x64>
	Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_ALARM_RING_IND, 0);
}

static void OnURCHandler_Undefined(const char* strURC, void* reserved)
{
    Ql_OS_SendMessage(URC_RCV_TASK_ID, MSG_ID_URC_INDICATION, URC_END, 0);
102cbcdc:	e59f1034 	ldr	r1, [pc, #52]	; 102cbd18 <OnURCHandler+0xc8>
102cbce0:	e3a02065 	mov	r2, #101	; 0x65
102cbce4:	e59fc030 	ldr	ip, [pc, #48]	; 102cbd1c <OnURCHandler+0xcc>
102cbce8:	e12fff3c 	blx	ip
102cbcec:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, sl, pc}
    // For AT URCs
    for (i = 0; i < NUM_ELEMS(m_AtURCHdlEntry); i++)
    {
        if (Ql_strstr(strURC, m_AtURCHdlEntry[i].keyword))
        {
            m_AtURCHdlEntry[i].handler(strURC, reserved);
102cbcf0:	e59f3014 	ldr	r3, [pc, #20]	; 102cbd0c <OnURCHandler+0xbc>
102cbcf4:	e1a00006 	mov	r0, r6
102cbcf8:	e0835005 	add	r5, r3, r5
102cbcfc:	e59534cc 	ldr	r3, [r5, #1228]	; 0x4cc
102cbd00:	e1a0100a 	mov	r1, sl
102cbd04:	e12fff33 	blx	r3
            return;
102cbd08:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, sl, pc}
102cbd0c:	102ce200 	.word	0x102ce200
102cbd10:	102cd7c0 	.word	0x102cd7c0
102cbd14:	102ce698 	.word	0x102ce698
102cbd18:	00001002 	.word	0x00001002
102cbd1c:	102cda04 	.word	0x102cda04

102cbd20 <Ql_RIL_IsURCStr>:
* Return:  
*               0 : not URC information
*               1 : URC information
******************************************************************************/
s32 Ql_RIL_IsURCStr(const char* strRsp)
{
102cbd20:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
102cbd24:	e59f7068 	ldr	r7, [pc, #104]	; 102cbd94 <Ql_RIL_IsURCStr+0x74>
102cbd28:	e59f6068 	ldr	r6, [pc, #104]	; 102cbd98 <Ql_RIL_IsURCStr+0x78>
102cbd2c:	e1a05000 	mov	r5, r0
    s32 i;
    for (i = 0; i < NUM_ELEMS(m_SysURCHdlEntry); i++) 
102cbd30:	e3a04000 	mov	r4, #0
102cbd34:	ea000001 	b	102cbd40 <Ql_RIL_IsURCStr+0x20>
102cbd38:	e3540015 	cmp	r4, #21
102cbd3c:	0a000008 	beq	102cbd64 <Ql_RIL_IsURCStr+0x44>
    {
        if (Ql_strstr(strRsp, m_SysURCHdlEntry[i].keyword)) 
102cbd40:	e0641184 	rsb	r1, r4, r4, lsl #3
102cbd44:	e1a00005 	mov	r0, r5
102cbd48:	e0871181 	add	r1, r7, r1, lsl #3
102cbd4c:	e12fff36 	blx	r6
*               1 : URC information
******************************************************************************/
s32 Ql_RIL_IsURCStr(const char* strRsp)
{
    s32 i;
    for (i = 0; i < NUM_ELEMS(m_SysURCHdlEntry); i++) 
102cbd50:	e2844001 	add	r4, r4, #1
    {
        if (Ql_strstr(strRsp, m_SysURCHdlEntry[i].keyword)) 
102cbd54:	e3500000 	cmp	r0, #0
102cbd58:	0afffff6 	beq	102cbd38 <Ql_RIL_IsURCStr+0x18>
        {
            return 1;
102cbd5c:	e3a00001 	mov	r0, #1
102cbd60:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
102cbd64:	e59f7030 	ldr	r7, [pc, #48]	; 102cbd9c <Ql_RIL_IsURCStr+0x7c>
*               1 : URC information
******************************************************************************/
s32 Ql_RIL_IsURCStr(const char* strRsp)
{
    s32 i;
    for (i = 0; i < NUM_ELEMS(m_SysURCHdlEntry); i++) 
102cbd68:	e1a04000 	mov	r4, r0
            return 1;
        }
    }
    for (i = 0; i < NUM_ELEMS(m_AtURCHdlEntry); i++) 
    {
        if (Ql_strstr(strRsp, m_AtURCHdlEntry[i].keyword)) 
102cbd6c:	e0641184 	rsb	r1, r4, r4, lsl #3
102cbd70:	e1a00005 	mov	r0, r5
102cbd74:	e0871181 	add	r1, r7, r1, lsl #3
102cbd78:	e12fff36 	blx	r6
        if (Ql_strstr(strRsp, m_SysURCHdlEntry[i].keyword)) 
        {
            return 1;
        }
    }
    for (i = 0; i < NUM_ELEMS(m_AtURCHdlEntry); i++) 
102cbd7c:	e2844001 	add	r4, r4, #1
    {
        if (Ql_strstr(strRsp, m_AtURCHdlEntry[i].keyword)) 
102cbd80:	e3500000 	cmp	r0, #0
102cbd84:	1afffff4 	bne	102cbd5c <Ql_RIL_IsURCStr+0x3c>
        if (Ql_strstr(strRsp, m_SysURCHdlEntry[i].keyword)) 
        {
            return 1;
        }
    }
    for (i = 0; i < NUM_ELEMS(m_AtURCHdlEntry); i++) 
102cbd88:	e3540012 	cmp	r4, #18
102cbd8c:	1afffff6 	bne	102cbd6c <Ql_RIL_IsURCStr+0x4c>
        {
            return 1;
        }
    }
    return 0;
}
102cbd90:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
102cbd94:	102ce200 	.word	0x102ce200
102cbd98:	102cd7c0 	.word	0x102cd7c0
102cbd9c:	102ce698 	.word	0x102ce698

102cbda0 <Ql_StrPrefixMatch>:
#include "ql_memory.h"
#include "ql_stdlib.h"

s32 Ql_StrPrefixMatch(const char* str, const char *prefix)
{
    for ( ; *str != '\0' && *prefix != '\0' ; str++, prefix++) {
102cbda0:	e5d03000 	ldrb	r3, [r0]
102cbda4:	e5d12000 	ldrb	r2, [r1]
102cbda8:	e3530000 	cmp	r3, #0
102cbdac:	1a000006 	bne	102cbdcc <Ql_StrPrefixMatch+0x2c>
102cbdb0:	ea000007 	b	102cbdd4 <Ql_StrPrefixMatch+0x34>
        if (*str != *prefix) {
102cbdb4:	e1530002 	cmp	r3, r2
102cbdb8:	1a000008 	bne	102cbde0 <Ql_StrPrefixMatch+0x40>
#include "ql_memory.h"
#include "ql_stdlib.h"

s32 Ql_StrPrefixMatch(const char* str, const char *prefix)
{
    for ( ; *str != '\0' && *prefix != '\0' ; str++, prefix++) {
102cbdbc:	e5f03001 	ldrb	r3, [r0, #1]!
102cbdc0:	e3530000 	cmp	r3, #0
102cbdc4:	0a000007 	beq	102cbde8 <Ql_StrPrefixMatch+0x48>
102cbdc8:	e5f12001 	ldrb	r2, [r1, #1]!
102cbdcc:	e3520000 	cmp	r2, #0
102cbdd0:	1afffff7 	bne	102cbdb4 <Ql_StrPrefixMatch+0x14>
        if (*str != *prefix) {
            return 0;
        }
    }
    return *prefix == '\0';
102cbdd4:	e2720001 	rsbs	r0, r2, #1
102cbdd8:	33a00000 	movcc	r0, #0
102cbddc:	e12fff1e 	bx	lr

s32 Ql_StrPrefixMatch(const char* str, const char *prefix)
{
    for ( ; *str != '\0' && *prefix != '\0' ; str++, prefix++) {
        if (*str != *prefix) {
            return 0;
102cbde0:	e3a00000 	mov	r0, #0
        }
    }
    return *prefix == '\0';
}
102cbde4:	e12fff1e 	bx	lr
102cbde8:	e5d12001 	ldrb	r2, [r1, #1]
102cbdec:	eafffff8 	b	102cbdd4 <Ql_StrPrefixMatch+0x34>

102cbdf0 <Ql_StrToUpper>:

char* Ql_StrToUpper(char* str)
{
102cbdf0:	e92d4070 	push	{r4, r5, r6, lr}
    char* pCh = str;
    if (!str)
102cbdf4:	e2505000 	subs	r5, r0, #0
102cbdf8:	0a000010 	beq	102cbe40 <Ql_StrToUpper+0x50>
    {
        return NULL;
    }
    for ( ; *pCh != '\0'; pCh++)
102cbdfc:	e5d50000 	ldrb	r0, [r5]
102cbe00:	e3500000 	cmp	r0, #0
102cbe04:	0a00000d 	beq	102cbe40 <Ql_StrToUpper+0x50>
    {
        if (((*pCh) >= 'a') && ((*pCh) <= 'z'))
        {
            *pCh = Ql_toupper(*pCh);
102cbe08:	e59f6038 	ldr	r6, [pc, #56]	; 102cbe48 <Ql_StrToUpper+0x58>
        }
    }
    return *prefix == '\0';
}

char* Ql_StrToUpper(char* str)
102cbe0c:	e2854001 	add	r4, r5, #1
102cbe10:	ea000002 	b	102cbe20 <Ql_StrToUpper+0x30>
    char* pCh = str;
    if (!str)
    {
        return NULL;
    }
    for ( ; *pCh != '\0'; pCh++)
102cbe14:	e4d40001 	ldrb	r0, [r4], #1
102cbe18:	e3500000 	cmp	r0, #0
102cbe1c:	0a000007 	beq	102cbe40 <Ql_StrToUpper+0x50>
    {
        if (((*pCh) >= 'a') && ((*pCh) <= 'z'))
102cbe20:	e2403061 	sub	r3, r0, #97	; 0x61
102cbe24:	e3530019 	cmp	r3, #25
102cbe28:	8afffff9 	bhi	102cbe14 <Ql_StrToUpper+0x24>
        {
            *pCh = Ql_toupper(*pCh);
102cbe2c:	e12fff36 	blx	r6
102cbe30:	e5440001 	strb	r0, [r4, #-1]
    char* pCh = str;
    if (!str)
    {
        return NULL;
    }
    for ( ; *pCh != '\0'; pCh++)
102cbe34:	e4d40001 	ldrb	r0, [r4], #1
102cbe38:	e3500000 	cmp	r0, #0
102cbe3c:	1afffff7 	bne	102cbe20 <Ql_StrToUpper+0x30>
        {
            *pCh = Ql_toupper(*pCh);
        }
    }
    return str;
}
102cbe40:	e1a00005 	mov	r0, r5
102cbe44:	e8bd8070 	pop	{r4, r5, r6, pc}
102cbe48:	102cd840 	.word	0x102cd840

102cbe4c <Ql_HexStrToInt>:
{
    u16 i = 0;
    u32 temp = 0;

    //ASSERT((str != NULL) && (val != NULL));
    if (NULL == str || NULL == val)
102cbe4c:	e3500000 	cmp	r0, #0
102cbe50:	13510000 	cmpne	r1, #0
    }
    return str;
}

bool Ql_HexStrToInt(u8* str, u32* val)
{
102cbe54:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    u16 i = 0;
    u32 temp = 0;

    //ASSERT((str != NULL) && (val != NULL));
    if (NULL == str || NULL == val)
102cbe58:	e1a08001 	mov	r8, r1
102cbe5c:	13a04000 	movne	r4, #0
102cbe60:	03a04001 	moveq	r4, #1
102cbe64:	e1a07000 	mov	r7, r0
102cbe68:	1a000001 	bne	102cbe74 <Ql_HexStrToInt+0x28>
    {
        return FALSE;
102cbe6c:	e3a00000 	mov	r0, #0
102cbe70:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    }
    Ql_StrToUpper((char*)str);
102cbe74:	ebffffdd 	bl	102cbdf0 <Ql_StrToUpper>

    while (str[i] != '\0')
102cbe78:	e5d73000 	ldrb	r3, [r7]
102cbe7c:	e3530000 	cmp	r3, #0
102cbe80:	0a000014 	beq	102cbed8 <Ql_HexStrToInt+0x8c>
102cbe84:	e1a02004 	mov	r2, r4
102cbe88:	e1a0c004 	mov	ip, r4
    {
        if (IS_NUMBER(str[i]))
102cbe8c:	e2434030 	sub	r4, r3, #48	; 0x30
        {
            temp = (temp << 4) + (str[i] - CHAR_0);
102cbe90:	e0836202 	add	r6, r3, r2, lsl #4
    }
    Ql_StrToUpper((char*)str);

    while (str[i] != '\0')
    {
        if (IS_NUMBER(str[i]))
102cbe94:	e3540009 	cmp	r4, #9
        {
            temp = (temp << 4) + (str[i] - CHAR_0);
        }
        else if ((str[i] >= CHAR_A) && (str[i] <= CHAR_F))
        {
            temp = (temp << 4) + ((str[i] - CHAR_A) + 10);
102cbe98:	e1a02006 	mov	r2, r6
    {
        if (IS_NUMBER(str[i]))
        {
            temp = (temp << 4) + (str[i] - CHAR_0);
        }
        else if ((str[i] >= CHAR_A) && (str[i] <= CHAR_F))
102cbe9c:	e2435041 	sub	r5, r3, #65	; 0x41

    while (str[i] != '\0')
    {
        if (IS_NUMBER(str[i]))
        {
            temp = (temp << 4) + (str[i] - CHAR_0);
102cbea0:	92462030 	subls	r2, r6, #48	; 0x30
    }
    Ql_StrToUpper((char*)str);

    while (str[i] != '\0')
    {
        if (IS_NUMBER(str[i]))
102cbea4:	9a000002 	bls	102cbeb4 <Ql_HexStrToInt+0x68>
        {
            temp = (temp << 4) + (str[i] - CHAR_0);
        }
        else if ((str[i] >= CHAR_A) && (str[i] <= CHAR_F))
102cbea8:	e3550005 	cmp	r5, #5
        {
            temp = (temp << 4) + ((str[i] - CHAR_A) + 10);
102cbeac:	e2422037 	sub	r2, r2, #55	; 0x37
    {
        if (IS_NUMBER(str[i]))
        {
            temp = (temp << 4) + (str[i] - CHAR_0);
        }
        else if ((str[i] >= CHAR_A) && (str[i] <= CHAR_F))
102cbeb0:	8affffed 	bhi	102cbe6c <Ql_HexStrToInt+0x20>
        {
            temp = (temp << 4) + ((str[i] - CHAR_A) + 10);
        }else{
            return FALSE;
        }
        i++;
102cbeb4:	e28cc001 	add	ip, ip, #1
102cbeb8:	e1a0c80c 	lsl	ip, ip, #16
    {
        return FALSE;
    }
    Ql_StrToUpper((char*)str);

    while (str[i] != '\0')
102cbebc:	e7d7382c 	ldrb	r3, [r7, ip, lsr #16]
        {
            temp = (temp << 4) + ((str[i] - CHAR_A) + 10);
        }else{
            return FALSE;
        }
        i++;
102cbec0:	e1a0c82c 	lsr	ip, ip, #16
    {
        return FALSE;
    }
    Ql_StrToUpper((char*)str);

    while (str[i] != '\0')
102cbec4:	e3530000 	cmp	r3, #0
102cbec8:	1affffef 	bne	102cbe8c <Ql_HexStrToInt+0x40>
            return FALSE;
        }
        i++;
    }
    *val = temp;
    return TRUE;
102cbecc:	e3a00001 	mov	r0, #1
        }else{
            return FALSE;
        }
        i++;
    }
    *val = temp;
102cbed0:	e5882000 	str	r2, [r8]
    return TRUE;
}
102cbed4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
}

bool Ql_HexStrToInt(u8* str, u32* val)
{
    u16 i = 0;
    u32 temp = 0;
102cbed8:	e1a02003 	mov	r2, r3
102cbedc:	eafffffa 	b	102cbecc <Ql_HexStrToInt+0x80>

102cbee0 <Ql_RIL_FindString>:
{
    s32 i;
    s32 strlen;
    char *p;

    if ((NULL == line) || (NULL == str))
102cbee0:	e3500000 	cmp	r0, #0
102cbee4:	13520000 	cmpne	r2, #0
* Return:  
                The function returns a pointer to the located string,
                or a  null  pointer  if  the specified string is not found.
******************************************************************************/
char* Ql_RIL_FindString(char *line, u32 len,char *str)
{
102cbee8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    s32 i;
    s32 strlen;
    char *p;

    if ((NULL == line) || (NULL == str))
102cbeec:	e1a05002 	mov	r5, r2
102cbef0:	e1a04000 	mov	r4, r0
* Return:  
                The function returns a pointer to the located string,
                or a  null  pointer  if  the specified string is not found.
******************************************************************************/
char* Ql_RIL_FindString(char *line, u32 len,char *str)
{
102cbef4:	e1a08001 	mov	r8, r1
    s32 i;
    s32 strlen;
    char *p;

    if ((NULL == line) || (NULL == str))
102cbef8:	0a000016 	beq	102cbf58 <Ql_RIL_FindString+0x78>
        return NULL;
    
    strlen = Ql_strlen(str);
102cbefc:	e1a00002 	mov	r0, r2
102cbf00:	e59f305c 	ldr	r3, [pc, #92]	; 102cbf64 <Ql_RIL_FindString+0x84>
102cbf04:	e12fff33 	blx	r3
    if(strlen > len)
102cbf08:	e1500008 	cmp	r0, r8
    char *p;

    if ((NULL == line) || (NULL == str))
        return NULL;
    
    strlen = Ql_strlen(str);
102cbf0c:	e1a06000 	mov	r6, r0
    if(strlen > len)
102cbf10:	8a000010 	bhi	102cbf58 <Ql_RIL_FindString+0x78>
    {
        return NULL;
    }

    p = line;
    for (i = 0;i < len - strlen + 1; i++)
102cbf14:	e0608008 	rsb	r8, r0, r8
102cbf18:	e2988001 	adds	r8, r8, #1
102cbf1c:	0a00000d 	beq	102cbf58 <Ql_RIL_FindString+0x78>
102cbf20:	e59f7040 	ldr	r7, [pc, #64]	; 102cbf68 <Ql_RIL_FindString+0x88>
*
* Return:  
                The function returns a pointer to the located string,
                or a  null  pointer  if  the specified string is not found.
******************************************************************************/
char* Ql_RIL_FindString(char *line, u32 len,char *str)
102cbf24:	e0848008 	add	r8, r4, r8
102cbf28:	ea000002 	b	102cbf38 <Ql_RIL_FindString+0x58>
    {
        if (0 == Ql_strncmp (p, str, strlen))
        {
            return p;
        }else{
            p++;
102cbf2c:	e2844001 	add	r4, r4, #1
    {
        return NULL;
    }

    p = line;
    for (i = 0;i < len - strlen + 1; i++)
102cbf30:	e1540008 	cmp	r4, r8
102cbf34:	0a000007 	beq	102cbf58 <Ql_RIL_FindString+0x78>
    {
        if (0 == Ql_strncmp (p, str, strlen))
102cbf38:	e1a00004 	mov	r0, r4
102cbf3c:	e1a01005 	mov	r1, r5
102cbf40:	e1a02006 	mov	r2, r6
102cbf44:	e12fff37 	blx	r7
102cbf48:	e3500000 	cmp	r0, #0
102cbf4c:	1afffff6 	bne	102cbf2c <Ql_RIL_FindString+0x4c>
        }else{
            p++;
        }
    }
    return NULL;
}
102cbf50:	e1a00004 	mov	r0, r4
102cbf54:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    s32 i;
    s32 strlen;
    char *p;

    if ((NULL == line) || (NULL == str))
        return NULL;
102cbf58:	e3a04000 	mov	r4, #0
        }else{
            p++;
        }
    }
    return NULL;
}
102cbf5c:	e1a00004 	mov	r0, r4
102cbf60:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
102cbf64:	102cd560 	.word	0x102cd560
102cbf68:	102cd640 	.word	0x102cd640

102cbf6c <Ql_RIL_FindLine>:
* Return:  
                The function returns a pointer to the located string,
                or a  null  pointer  if  the specified string is not found.
******************************************************************************/
char* Ql_RIL_FindLine(char *line, u32 len,char *str)
{
102cbf6c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *p = NULL;
    char *pStr = NULL;
    char *pStr2 = NULL;
    char *pStr3 = NULL;

    if ((NULL == line) || (NULL == str))
102cbf70:	e3500000 	cmp	r0, #0
102cbf74:	13520000 	cmpne	r2, #0
* Return:  
                The function returns a pointer to the located string,
                or a  null  pointer  if  the specified string is not found.
******************************************************************************/
char* Ql_RIL_FindLine(char *line, u32 len,char *str)
{
102cbf78:	e24dd014 	sub	sp, sp, #20
    char *p = NULL;
    char *pStr = NULL;
    char *pStr2 = NULL;
    char *pStr3 = NULL;

    if ((NULL == line) || (NULL == str))
102cbf7c:	e1a0a002 	mov	sl, r2
102cbf80:	e58d0004 	str	r0, [sp, #4]
102cbf84:	13a06000 	movne	r6, #0
102cbf88:	03a06001 	moveq	r6, #1
* Return:  
                The function returns a pointer to the located string,
                or a  null  pointer  if  the specified string is not found.
******************************************************************************/
char* Ql_RIL_FindLine(char *line, u32 len,char *str)
{
102cbf8c:	e58d100c 	str	r1, [sp, #12]
    char *p = NULL;
    char *pStr = NULL;
    char *pStr2 = NULL;
    char *pStr3 = NULL;

    if ((NULL == line) || (NULL == str))
102cbf90:	0a000067 	beq	102cc134 <Ql_RIL_FindLine+0x1c8>
        return NULL;
    
    strlen = Ql_strlen (str);
102cbf94:	e1a00002 	mov	r0, r2
102cbf98:	e59f3224 	ldr	r3, [pc, #548]	; 102cc1c4 <Ql_RIL_FindLine+0x258>
102cbf9c:	e12fff33 	blx	r3
    
    pStr = Ql_MEM_Alloc(strlen + 4 + 1);
102cbfa0:	e59f8220 	ldr	r8, [pc, #544]	; 102cc1c8 <Ql_RIL_FindLine+0x25c>
102cbfa4:	e280b005 	add	fp, r0, #5
    char *pStr3 = NULL;

    if ((NULL == line) || (NULL == str))
        return NULL;
    
    strlen = Ql_strlen (str);
102cbfa8:	e58d0008 	str	r0, [sp, #8]
    
    pStr = Ql_MEM_Alloc(strlen + 4 + 1);
102cbfac:	e1a0000b 	mov	r0, fp
102cbfb0:	e12fff38 	blx	r8
    if (NULL == pStr)
102cbfb4:	e2505000 	subs	r5, r0, #0
102cbfb8:	0a00005d 	beq	102cc134 <Ql_RIL_FindLine+0x1c8>
         return NULL;
    
    if (len >= strlen + 4)//two \r\n
102cbfbc:	e59d3008 	ldr	r3, [sp, #8]
102cbfc0:	e2834004 	add	r4, r3, #4
102cbfc4:	e59d300c 	ldr	r3, [sp, #12]
102cbfc8:	e1540003 	cmp	r4, r3
102cbfcc:	9a00005a 	bls	102cc13c <Ql_RIL_FindLine+0x1d0>
                p++;
            }
        }
    }

    if (len >= strlen + 2)//two \r or two\n
102cbfd0:	e59d3008 	ldr	r3, [sp, #8]
102cbfd4:	e2834002 	add	r4, r3, #2
102cbfd8:	e59d300c 	ldr	r3, [sp, #12]
102cbfdc:	e1530004 	cmp	r3, r4
102cbfe0:	359f41e4 	ldrcc	r4, [pc, #484]	; 102cc1cc <Ql_RIL_FindLine+0x260>
102cbfe4:	3a000050 	bcc	102cc12c <Ql_RIL_FindLine+0x1c0>
    {
        p = line;

        // <CR>xx<CR>
        Ql_memset(pStr, 0, strlen + 5);
        Ql_sprintf(pStr,"\r%s\r",str);
102cbfe8:	e59f61e0 	ldr	r6, [pc, #480]	; 102cc1d0 <Ql_RIL_FindLine+0x264>
    if (len >= strlen + 2)//two \r or two\n
    {
        p = line;

        // <CR>xx<CR>
        Ql_memset(pStr, 0, strlen + 5);
102cbfec:	e59f91e0 	ldr	r9, [pc, #480]	; 102cc1d4 <Ql_RIL_FindLine+0x268>
102cbff0:	e1a0200b 	mov	r2, fp
102cbff4:	e3a01000 	mov	r1, #0
102cbff8:	e1a00005 	mov	r0, r5
102cbffc:	e12fff39 	blx	r9
        Ql_sprintf(pStr,"\r%s\r",str);
102cc000:	e5963000 	ldr	r3, [r6]
102cc004:	e59f11cc 	ldr	r1, [pc, #460]	; 102cc1d8 <Ql_RIL_FindLine+0x26c>
102cc008:	e1a0200a 	mov	r2, sl
102cc00c:	e1a00005 	mov	r0, r5
102cc010:	e12fff33 	blx	r3

        // <LF>xx<LF>
        pStr2 = (char*)Ql_MEM_Alloc(strlen + 5);
102cc014:	e1a0000b 	mov	r0, fp
102cc018:	e12fff38 	blx	r8
        Ql_memset(pStr2, 0, strlen + 5);
102cc01c:	e1a0200b 	mov	r2, fp
102cc020:	e3a01000 	mov	r1, #0
        // <CR>xx<CR>
        Ql_memset(pStr, 0, strlen + 5);
        Ql_sprintf(pStr,"\r%s\r",str);

        // <LF>xx<LF>
        pStr2 = (char*)Ql_MEM_Alloc(strlen + 5);
102cc024:	e1a07000 	mov	r7, r0
        Ql_memset(pStr2, 0, strlen + 5);
102cc028:	e12fff39 	blx	r9
        Ql_sprintf(pStr2,"\n%s\n",str);
102cc02c:	e5963000 	ldr	r3, [r6]
102cc030:	e59f11a4 	ldr	r1, [pc, #420]	; 102cc1dc <Ql_RIL_FindLine+0x270>
102cc034:	e1a0200a 	mov	r2, sl
102cc038:	e1a00007 	mov	r0, r7
102cc03c:	e12fff33 	blx	r3

        // xx<CR><LF>
        pStr3 = (char*)Ql_MEM_Alloc(strlen + 5);
102cc040:	e1a0000b 	mov	r0, fp
102cc044:	e12fff38 	blx	r8
        Ql_memset(pStr3, 0, strlen + 5);
102cc048:	e1a0200b 	mov	r2, fp
102cc04c:	e3a01000 	mov	r1, #0
        pStr2 = (char*)Ql_MEM_Alloc(strlen + 5);
        Ql_memset(pStr2, 0, strlen + 5);
        Ql_sprintf(pStr2,"\n%s\n",str);

        // xx<CR><LF>
        pStr3 = (char*)Ql_MEM_Alloc(strlen + 5);
102cc050:	e1a08000 	mov	r8, r0
        Ql_memset(pStr3, 0, strlen + 5);
102cc054:	e12fff39 	blx	r9
        Ql_sprintf(pStr3,"%s\r\n",str);
102cc058:	e5963000 	ldr	r3, [r6]
102cc05c:	e1a0200a 	mov	r2, sl
102cc060:	e1a00008 	mov	r0, r8
102cc064:	e59f1174 	ldr	r1, [pc, #372]	; 102cc1e0 <Ql_RIL_FindLine+0x274>
102cc068:	e12fff33 	blx	r3

        for (i = 0;i < len - (strlen + 2) + 1; i++)
102cc06c:	e59d300c 	ldr	r3, [sp, #12]
102cc070:	e59d2008 	ldr	r2, [sp, #8]
102cc074:	e062b003 	rsb	fp, r2, r3
102cc078:	e35b0001 	cmp	fp, #1
102cc07c:	0a000025 	beq	102cc118 <Ql_RIL_FindLine+0x1ac>
*
* Return:  
                The function returns a pointer to the located string,
                or a  null  pointer  if  the specified string is not found.
******************************************************************************/
char* Ql_RIL_FindLine(char *line, u32 len,char *str)
102cc080:	e59d3004 	ldr	r3, [sp, #4]
102cc084:	e59f6158 	ldr	r6, [pc, #344]	; 102cc1e4 <Ql_RIL_FindLine+0x278>
102cc088:	e24bb001 	sub	fp, fp, #1
102cc08c:	e083b00b 	add	fp, r3, fp
102cc090:	e1a09003 	mov	r9, r3
        Ql_memset(pStr3, 0, strlen + 5);
        Ql_sprintf(pStr3,"%s\r\n",str);

        for (i = 0;i < len - (strlen + 2) + 1; i++)
        {
            if ((0 == Ql_strncmp (p, pStr, strlen + 2)) ||
102cc094:	e1a0a006 	mov	sl, r6
102cc098:	ea00000b 	b	102cc0cc <Ql_RIL_FindLine+0x160>
                (0 == Ql_strncmp (p, pStr2, strlen + 2)) ||
102cc09c:	e12fff3a 	blx	sl
                (0 == Ql_strncmp (p, pStr3, strlen + 2)))
102cc0a0:	e1a01008 	mov	r1, r8
102cc0a4:	e1a02004 	mov	r2, r4
        Ql_memset(pStr3, 0, strlen + 5);
        Ql_sprintf(pStr3,"%s\r\n",str);

        for (i = 0;i < len - (strlen + 2) + 1; i++)
        {
            if ((0 == Ql_strncmp (p, pStr, strlen + 2)) ||
102cc0a8:	e3500000 	cmp	r0, #0
                (0 == Ql_strncmp (p, pStr2, strlen + 2)) ||
                (0 == Ql_strncmp (p, pStr3, strlen + 2)))
102cc0ac:	e1a00009 	mov	r0, r9
        Ql_memset(pStr3, 0, strlen + 5);
        Ql_sprintf(pStr3,"%s\r\n",str);

        for (i = 0;i < len - (strlen + 2) + 1; i++)
        {
            if ((0 == Ql_strncmp (p, pStr, strlen + 2)) ||
102cc0b0:	0a00000e 	beq	102cc0f0 <Ql_RIL_FindLine+0x184>
                (0 == Ql_strncmp (p, pStr2, strlen + 2)) ||
                (0 == Ql_strncmp (p, pStr3, strlen + 2)))
102cc0b4:	e12fff3a 	blx	sl
        Ql_sprintf(pStr3,"%s\r\n",str);

        for (i = 0;i < len - (strlen + 2) + 1; i++)
        {
            if ((0 == Ql_strncmp (p, pStr, strlen + 2)) ||
                (0 == Ql_strncmp (p, pStr2, strlen + 2)) ||
102cc0b8:	e3500000 	cmp	r0, #0
102cc0bc:	0a00000b 	beq	102cc0f0 <Ql_RIL_FindLine+0x184>
                pStr = NULL;
                pStr2 = NULL;
                pStr3 = NULL;
                return p;
            }else{
                p++;
102cc0c0:	e2899001 	add	r9, r9, #1
        // xx<CR><LF>
        pStr3 = (char*)Ql_MEM_Alloc(strlen + 5);
        Ql_memset(pStr3, 0, strlen + 5);
        Ql_sprintf(pStr3,"%s\r\n",str);

        for (i = 0;i < len - (strlen + 2) + 1; i++)
102cc0c4:	e159000b 	cmp	r9, fp
102cc0c8:	0a000012 	beq	102cc118 <Ql_RIL_FindLine+0x1ac>
        {
            if ((0 == Ql_strncmp (p, pStr, strlen + 2)) ||
102cc0cc:	e1a01005 	mov	r1, r5
102cc0d0:	e1a02004 	mov	r2, r4
102cc0d4:	e1a00009 	mov	r0, r9
102cc0d8:	e12fff36 	blx	r6
                (0 == Ql_strncmp (p, pStr2, strlen + 2)) ||
102cc0dc:	e1a01007 	mov	r1, r7
102cc0e0:	e1a02004 	mov	r2, r4
        Ql_memset(pStr3, 0, strlen + 5);
        Ql_sprintf(pStr3,"%s\r\n",str);

        for (i = 0;i < len - (strlen + 2) + 1; i++)
        {
            if ((0 == Ql_strncmp (p, pStr, strlen + 2)) ||
102cc0e4:	e3500000 	cmp	r0, #0
                (0 == Ql_strncmp (p, pStr2, strlen + 2)) ||
102cc0e8:	e1a00009 	mov	r0, r9
        Ql_memset(pStr3, 0, strlen + 5);
        Ql_sprintf(pStr3,"%s\r\n",str);

        for (i = 0;i < len - (strlen + 2) + 1; i++)
        {
            if ((0 == Ql_strncmp (p, pStr, strlen + 2)) ||
102cc0ec:	1affffea 	bne	102cc09c <Ql_RIL_FindLine+0x130>
                (0 == Ql_strncmp (p, pStr2, strlen + 2)) ||
                (0 == Ql_strncmp (p, pStr3, strlen + 2)))
            {
                Ql_MEM_Free(pStr);
102cc0f0:	e59f40d4 	ldr	r4, [pc, #212]	; 102cc1cc <Ql_RIL_FindLine+0x260>
102cc0f4:	e1a00005 	mov	r0, r5
102cc0f8:	e12fff34 	blx	r4
                Ql_MEM_Free(pStr2);
102cc0fc:	e1a00007 	mov	r0, r7
102cc100:	e12fff34 	blx	r4
                Ql_MEM_Free(pStr3);
102cc104:	e1a00008 	mov	r0, r8
102cc108:	e12fff34 	blx	r4
    }
    Ql_MEM_Free(pStr);
    pStr = NULL;
    
    return NULL;
}
102cc10c:	e1a00009 	mov	r0, r9
102cc110:	e28dd014 	add	sp, sp, #20
102cc114:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
                return p;
            }else{
                p++;
            }
        }
        Ql_MEM_Free(pStr2);
102cc118:	e1a00007 	mov	r0, r7
102cc11c:	e59f40a8 	ldr	r4, [pc, #168]	; 102cc1cc <Ql_RIL_FindLine+0x260>
102cc120:	e12fff34 	blx	r4
        Ql_MEM_Free(pStr3);
102cc124:	e1a00008 	mov	r0, r8
102cc128:	e12fff34 	blx	r4
        pStr2 = NULL;
        pStr3 = NULL;
    }
    Ql_MEM_Free(pStr);
102cc12c:	e1a00005 	mov	r0, r5
102cc130:	e12fff34 	blx	r4
    pStr = NULL;
    
    return NULL;
102cc134:	e3a09000 	mov	r9, #0
102cc138:	eafffff3 	b	102cc10c <Ql_RIL_FindLine+0x1a0>
         return NULL;
    
    if (len >= strlen + 4)//two \r\n
    {
        p = line;
        Ql_memset(pStr, 0, strlen + 5);
102cc13c:	e1a01006 	mov	r1, r6
102cc140:	e1a0200b 	mov	r2, fp
102cc144:	e59f3088 	ldr	r3, [pc, #136]	; 102cc1d4 <Ql_RIL_FindLine+0x268>
102cc148:	e12fff33 	blx	r3
        Ql_sprintf(pStr,"\r\n%s\r\n",str);
102cc14c:	e59f307c 	ldr	r3, [pc, #124]	; 102cc1d0 <Ql_RIL_FindLine+0x264>
102cc150:	e1a0200a 	mov	r2, sl
102cc154:	e5933000 	ldr	r3, [r3]
102cc158:	e1a00005 	mov	r0, r5
102cc15c:	e59f1084 	ldr	r1, [pc, #132]	; 102cc1e8 <Ql_RIL_FindLine+0x27c>
102cc160:	e12fff33 	blx	r3
        for (i = 0;i < len - (strlen + 4) + 1; i++)
102cc164:	e59d300c 	ldr	r3, [sp, #12]
102cc168:	e59d2008 	ldr	r2, [sp, #8]
102cc16c:	e0627003 	rsb	r7, r2, r3
102cc170:	e3570003 	cmp	r7, #3
102cc174:	0affff95 	beq	102cbfd0 <Ql_RIL_FindLine+0x64>
*
* Return:  
                The function returns a pointer to the located string,
                or a  null  pointer  if  the specified string is not found.
******************************************************************************/
char* Ql_RIL_FindLine(char *line, u32 len,char *str)
102cc178:	e59d3004 	ldr	r3, [sp, #4]
102cc17c:	e2477003 	sub	r7, r7, #3
102cc180:	e59f605c 	ldr	r6, [pc, #92]	; 102cc1e4 <Ql_RIL_FindLine+0x278>
102cc184:	e0837007 	add	r7, r3, r7
102cc188:	e1a09003 	mov	r9, r3
102cc18c:	ea000002 	b	102cc19c <Ql_RIL_FindLine+0x230>
            if (0 == Ql_strncmp(p, pStr, strlen + 4))
            {
                Ql_MEM_Free(pStr);
                return p;
            }else{
                p++;
102cc190:	e2899001 	add	r9, r9, #1
    if (len >= strlen + 4)//two \r\n
    {
        p = line;
        Ql_memset(pStr, 0, strlen + 5);
        Ql_sprintf(pStr,"\r\n%s\r\n",str);
        for (i = 0;i < len - (strlen + 4) + 1; i++)
102cc194:	e1590007 	cmp	r9, r7
102cc198:	0affff8c 	beq	102cbfd0 <Ql_RIL_FindLine+0x64>
        {
            if (0 == Ql_strncmp(p, pStr, strlen + 4))
102cc19c:	e1a00009 	mov	r0, r9
102cc1a0:	e1a01005 	mov	r1, r5
102cc1a4:	e1a02004 	mov	r2, r4
102cc1a8:	e12fff36 	blx	r6
102cc1ac:	e3500000 	cmp	r0, #0
102cc1b0:	1afffff6 	bne	102cc190 <Ql_RIL_FindLine+0x224>
            {
                Ql_MEM_Free(pStr);
102cc1b4:	e1a00005 	mov	r0, r5
102cc1b8:	e59f200c 	ldr	r2, [pc, #12]	; 102cc1cc <Ql_RIL_FindLine+0x260>
102cc1bc:	e12fff32 	blx	r2
                return p;
102cc1c0:	eaffffd1 	b	102cc10c <Ql_RIL_FindLine+0x1a0>
102cc1c4:	102cd560 	.word	0x102cd560
102cc1c8:	102cc7f4 	.word	0x102cc7f4
102cc1cc:	102cc86c 	.word	0x102cc86c
102cc1d0:	f03d31e8 	.word	0xf03d31e8
102cc1d4:	102cd6b0 	.word	0x102cd6b0
102cc1d8:	102cf4b8 	.word	0x102cf4b8
102cc1dc:	102cf4c0 	.word	0x102cf4c0
102cc1e0:	102cf4c8 	.word	0x102cf4c8
102cc1e4:	102cd640 	.word	0x102cd640
102cc1e8:	102cf4b0 	.word	0x102cf4b0

102cc1ec <Ql_GenHash>:

u32 Ql_GenHash(char* strSrc, u32 len)
{
    u32 h, v;
    u32 i;
    for (h = 0, i = 0; i < len; i++)
102cc1ec:	e3510000 	cmp	r1, #0
    
    return NULL;
}

u32 Ql_GenHash(char* strSrc, u32 len)
{
102cc1f0:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    u32 h, v;
    u32 i;
    for (h = 0, i = 0; i < len; i++)
102cc1f4:	0a00000e 	beq	102cc234 <Ql_GenHash+0x48>
    {
        h = (u32)(5527 * h + 7 * strSrc[i]);
102cc1f8:	e59f403c 	ldr	r4, [pc, #60]	; 102cc23c <Ql_GenHash+0x50>
102cc1fc:	e1a03000 	mov	r3, r0
    pStr = NULL;
    
    return NULL;
}

u32 Ql_GenHash(char* strSrc, u32 len)
102cc200:	e080c001 	add	ip, r0, r1
{
    u32 h, v;
    u32 i;
    for (h = 0, i = 0; i < len; i++)
102cc204:	e3a00000 	mov	r0, #0
    {
        h = (u32)(5527 * h + 7 * strSrc[i]);
102cc208:	e4d31001 	ldrb	r1, [r3], #1
102cc20c:	e0611181 	rsb	r1, r1, r1, lsl #3
102cc210:	e0201094 	mla	r0, r4, r0, r1

u32 Ql_GenHash(char* strSrc, u32 len)
{
    u32 h, v;
    u32 i;
    for (h = 0, i = 0; i < len; i++)
102cc214:	e153000c 	cmp	r3, ip
    {
        h = (u32)(5527 * h + 7 * strSrc[i]);
        v = h & 0x0000ffff;
102cc218:	e1a02800 	lsl	r2, r0, #16
102cc21c:	e1a02822 	lsr	r2, r2, #16
        h ^= v * v;
102cc220:	e0010292 	mul	r1, r2, r2
102cc224:	e0210000 	eor	r0, r1, r0

u32 Ql_GenHash(char* strSrc, u32 len)
{
    u32 h, v;
    u32 i;
    for (h = 0, i = 0; i < len; i++)
102cc228:	1afffff6 	bne	102cc208 <Ql_GenHash+0x1c>
        h = (u32)(5527 * h + 7 * strSrc[i]);
        v = h & 0x0000ffff;
        h ^= v * v;
    }
    return h;
}
102cc22c:	e8bd0010 	ldmfd	sp!, {r4}
102cc230:	e12fff1e 	bx	lr

u32 Ql_GenHash(char* strSrc, u32 len)
{
    u32 h, v;
    u32 i;
    for (h = 0, i = 0; i < len; i++)
102cc234:	e1a00001 	mov	r0, r1
102cc238:	eafffffb 	b	102cc22c <Ql_GenHash+0x40>
102cc23c:	00001597 	.word	0x00001597

102cc240 <CallBack_UART_Hdlr>:
#define APP_DEBUG(FORMAT,...) 
#endif


static void CallBack_UART_Hdlr(Enum_SerialPort port, Enum_UARTEventType msg, bool level, void* customizedPara)
{
102cc240:	e12fff1e 	bx	lr

102cc244 <proc_main_task>:

/************************************************************************/
/* The entrance for this example application                            */
/************************************************************************/
void proc_main_task(s32 taskId)
{
102cc244:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, sl, lr}
    s32 ret;
    ST_MSG msg;

    // Register & open UART port
    ret = Ql_UART_Register(UART_PORT1, CallBack_UART_Hdlr, NULL);
102cc248:	e3a02000 	mov	r2, #0
102cc24c:	e3a0000a 	mov	r0, #10
102cc250:	e59f1184 	ldr	r1, [pc, #388]	; 102cc3dc <proc_main_task+0x198>
102cc254:	e59f3184 	ldr	r3, [pc, #388]	; 102cc3e0 <proc_main_task+0x19c>
102cc258:	e12fff33 	blx	r3
    if (ret < QL_RET_OK)
    {
        Ql_Debug_Trace("Fail to register serial port[%d], ret=%d\r\n", UART_PORT1, ret);
102cc25c:	e59f4180 	ldr	r4, [pc, #384]	; 102cc3e4 <proc_main_task+0x1a0>
    s32 ret;
    ST_MSG msg;

    // Register & open UART port
    ret = Ql_UART_Register(UART_PORT1, CallBack_UART_Hdlr, NULL);
    if (ret < QL_RET_OK)
102cc260:	e2502000 	subs	r2, r0, #0
102cc264:	ba000052 	blt	102cc3b4 <proc_main_task+0x170>
    {
        Ql_Debug_Trace("Fail to register serial port[%d], ret=%d\r\n", UART_PORT1, ret);
    }
    ret = Ql_UART_Open(UART_PORT1, 115200, FC_NONE);
102cc268:	e3a02001 	mov	r2, #1
102cc26c:	e3a0000a 	mov	r0, #10
102cc270:	e59f1170 	ldr	r1, [pc, #368]	; 102cc3e8 <proc_main_task+0x1a4>
102cc274:	e59f3170 	ldr	r3, [pc, #368]	; 102cc3ec <proc_main_task+0x1a8>
102cc278:	e12fff33 	blx	r3
    if (ret < QL_RET_OK)
102cc27c:	e2502000 	subs	r2, r0, #0
102cc280:	ba000050 	blt	102cc3c8 <proc_main_task+0x184>
    {
        Ql_Debug_Trace("Fail to open serial port[%d], ret=%d\r\n", UART_PORT1, ret);
    }

    APP_DEBUG("\r\n<-- OpenCPU: GPIO Example -->\r\n");
102cc284:	e59f8164 	ldr	r8, [pc, #356]	; 102cc3f0 <proc_main_task+0x1ac>
102cc288:	e3a02c02 	mov	r2, #512	; 0x200
102cc28c:	e3a01000 	mov	r1, #0
102cc290:	e59fa15c 	ldr	sl, [pc, #348]	; 102cc3f4 <proc_main_task+0x1b0>
102cc294:	e59f015c 	ldr	r0, [pc, #348]	; 102cc3f8 <proc_main_task+0x1b4>
102cc298:	e12fff3a 	blx	sl
102cc29c:	e5983000 	ldr	r3, [r8]
102cc2a0:	e59f1154 	ldr	r1, [pc, #340]	; 102cc3fc <proc_main_task+0x1b8>
102cc2a4:	e59f014c 	ldr	r0, [pc, #332]	; 102cc3f8 <proc_main_task+0x1b4>
102cc2a8:	e12fff33 	blx	r3
102cc2ac:	e59f714c 	ldr	r7, [pc, #332]	; 102cc400 <proc_main_task+0x1bc>
102cc2b0:	e59f0140 	ldr	r0, [pc, #320]	; 102cc3f8 <proc_main_task+0x1b4>
102cc2b4:	e12fff37 	blx	r7
102cc2b8:	e59f6144 	ldr	r6, [pc, #324]	; 102cc404 <proc_main_task+0x1c0>
102cc2bc:	e59f1134 	ldr	r1, [pc, #308]	; 102cc3f8 <proc_main_task+0x1b4>
    // Define the initial level for GPIO pin

    // Initialize the GPIO pin (output high level, pull up)
    Ql_GPIO_Init(RGB1_BLUE_PIN, PINDIRECTION_OUT, PINLEVEL_HIGH, PINPULLSEL_PULLUP);
102cc2c0:	e59f4140 	ldr	r4, [pc, #320]	; 102cc408 <proc_main_task+0x1c4>
102cc2c4:	e59f5140 	ldr	r5, [pc, #320]	; 102cc40c <proc_main_task+0x1c8>
    if (ret < QL_RET_OK)
    {
        Ql_Debug_Trace("Fail to open serial port[%d], ret=%d\r\n", UART_PORT1, ret);
    }

    APP_DEBUG("\r\n<-- OpenCPU: GPIO Example -->\r\n");
102cc2c8:	e1a02000 	mov	r2, r0
102cc2cc:	e3a0000a 	mov	r0, #10
102cc2d0:	e12fff36 	blx	r6
    // Define the initial level for GPIO pin

    // Initialize the GPIO pin (output high level, pull up)
    Ql_GPIO_Init(RGB1_BLUE_PIN, PINDIRECTION_OUT, PINLEVEL_HIGH, PINPULLSEL_PULLUP);
102cc2d4:	e3a01001 	mov	r1, #1
102cc2d8:	e1a02001 	mov	r2, r1
102cc2dc:	e3a03002 	mov	r3, #2
102cc2e0:	e3a00005 	mov	r0, #5
102cc2e4:	e12fff34 	blx	r4
    Ql_GPIO_Init(RGB2_BLUE_PIN, PINDIRECTION_OUT, PINLEVEL_HIGH, PINPULLSEL_PULLUP);
102cc2e8:	e3a01001 	mov	r1, #1
102cc2ec:	e3a03002 	mov	r3, #2
102cc2f0:	e1a02001 	mov	r2, r1
102cc2f4:	e3a00008 	mov	r0, #8
102cc2f8:	e12fff34 	blx	r4

    APP_DEBUG("<-- Initialize GPIO pin (PINNAME_STATUS): output, high level, pull up -->\r\n");
102cc2fc:	e3a02c02 	mov	r2, #512	; 0x200
102cc300:	e3a01000 	mov	r1, #0
102cc304:	e59f00ec 	ldr	r0, [pc, #236]	; 102cc3f8 <proc_main_task+0x1b4>
102cc308:	e12fff3a 	blx	sl
102cc30c:	e59f10fc 	ldr	r1, [pc, #252]	; 102cc410 <proc_main_task+0x1cc>
102cc310:	e5983000 	ldr	r3, [r8]
102cc314:	e59f00dc 	ldr	r0, [pc, #220]	; 102cc3f8 <proc_main_task+0x1b4>
102cc318:	e12fff33 	blx	r3
102cc31c:	e59f00d4 	ldr	r0, [pc, #212]	; 102cc3f8 <proc_main_task+0x1b4>
102cc320:	e12fff37 	blx	r7
102cc324:	e59f10cc 	ldr	r1, [pc, #204]	; 102cc3f8 <proc_main_task+0x1b4>
102cc328:	e59f40e4 	ldr	r4, [pc, #228]	; 102cc414 <proc_main_task+0x1d0>
102cc32c:	e1a02000 	mov	r2, r0
102cc330:	e3a0000a 	mov	r0, #10
102cc334:	e12fff36 	blx	r6
}

static void GPIO_Program(void)
{
    // Set the GPIO level to low after 500ms.
    APP_DEBUG("<-- Set the GPIO level to low after 500ms -->\r\n");
102cc338:	e3a02c02 	mov	r2, #512	; 0x200
102cc33c:	e3a01000 	mov	r1, #0
102cc340:	e59f00b0 	ldr	r0, [pc, #176]	; 102cc3f8 <proc_main_task+0x1b4>
102cc344:	e12fff3a 	blx	sl
102cc348:	e5983000 	ldr	r3, [r8]
102cc34c:	e59f10c4 	ldr	r1, [pc, #196]	; 102cc418 <proc_main_task+0x1d4>
102cc350:	e59f00a0 	ldr	r0, [pc, #160]	; 102cc3f8 <proc_main_task+0x1b4>
102cc354:	e12fff33 	blx	r3
102cc358:	e59f0098 	ldr	r0, [pc, #152]	; 102cc3f8 <proc_main_task+0x1b4>
102cc35c:	e12fff37 	blx	r7
102cc360:	e59f1090 	ldr	r1, [pc, #144]	; 102cc3f8 <proc_main_task+0x1b4>
102cc364:	e1a02000 	mov	r2, r0
102cc368:	e3a0000a 	mov	r0, #10
102cc36c:	e12fff36 	blx	r6
    Ql_GPIO_SetLevel(RGB1_BLUE_PIN, PINLEVEL_LOW);
102cc370:	e3a01000 	mov	r1, #0
102cc374:	e3a00005 	mov	r0, #5
102cc378:	e12fff34 	blx	r4
    Ql_GPIO_SetLevel(RGB2_BLUE_PIN, PINLEVEL_LOW);
102cc37c:	e3a01000 	mov	r1, #0
102cc380:	e3a00008 	mov	r0, #8
102cc384:	e12fff34 	blx	r4
    Ql_Sleep(500);
102cc388:	e3a00f7d 	mov	r0, #500	; 0x1f4
102cc38c:	e12fff35 	blx	r5
    Ql_GPIO_SetLevel(RGB1_BLUE_PIN,  PINLEVEL_HIGH);
102cc390:	e3a01001 	mov	r1, #1
102cc394:	e3a00005 	mov	r0, #5
102cc398:	e12fff34 	blx	r4
    Ql_GPIO_SetLevel(RGB2_BLUE_PIN, PINLEVEL_HIGH);
102cc39c:	e3a01001 	mov	r1, #1
102cc3a0:	e3a00008 	mov	r0, #8
102cc3a4:	e12fff34 	blx	r4
     Ql_Sleep(500);
102cc3a8:	e3a00f7d 	mov	r0, #500	; 0x1f4
102cc3ac:	e12fff35 	blx	r5
102cc3b0:	eaffffe0 	b	102cc338 <proc_main_task+0xf4>

    // Register & open UART port
    ret = Ql_UART_Register(UART_PORT1, CallBack_UART_Hdlr, NULL);
    if (ret < QL_RET_OK)
    {
        Ql_Debug_Trace("Fail to register serial port[%d], ret=%d\r\n", UART_PORT1, ret);
102cc3b4:	e5943000 	ldr	r3, [r4]
102cc3b8:	e3a0100a 	mov	r1, #10
102cc3bc:	e59f0058 	ldr	r0, [pc, #88]	; 102cc41c <proc_main_task+0x1d8>
102cc3c0:	e12fff33 	blx	r3
102cc3c4:	eaffffa7 	b	102cc268 <proc_main_task+0x24>
    }
    ret = Ql_UART_Open(UART_PORT1, 115200, FC_NONE);
    if (ret < QL_RET_OK)
    {
        Ql_Debug_Trace("Fail to open serial port[%d], ret=%d\r\n", UART_PORT1, ret);
102cc3c8:	e5943000 	ldr	r3, [r4]
102cc3cc:	e3a0100a 	mov	r1, #10
102cc3d0:	e59f0048 	ldr	r0, [pc, #72]	; 102cc420 <proc_main_task+0x1dc>
102cc3d4:	e12fff33 	blx	r3
102cc3d8:	eaffffa9 	b	102cc284 <proc_main_task+0x40>
102cc3dc:	102cc240 	.word	0x102cc240
102cc3e0:	102cdddc 	.word	0x102cdddc
102cc3e4:	f03d31ec 	.word	0xf03d31ec
102cc3e8:	0001c200 	.word	0x0001c200
102cc3ec:	102cde4c 	.word	0x102cde4c
102cc3f0:	f03d31e8 	.word	0xf03d31e8
102cc3f4:	102cd6b0 	.word	0x102cd6b0
102cc3f8:	f03d212c 	.word	0xf03d212c
102cc3fc:	102cf524 	.word	0x102cf524
102cc400:	102cd560 	.word	0x102cd560
102cc404:	102cdebc 	.word	0x102cdebc
102cc408:	102cc714 	.word	0x102cc714
102cc40c:	102cd8cc 	.word	0x102cd8cc
102cc410:	102cf548 	.word	0x102cf548
102cc414:	102cc78c 	.word	0x102cc78c
102cc418:	102cf594 	.word	0x102cf594
102cc41c:	102cf4d0 	.word	0x102cf4d0
102cc420:	102cf4fc 	.word	0x102cf4fc

102cc424 <_OCPU_InitUserMem>:
102cc424:	e59f0030 	ldr	r0, [pc, #48]	; 102cc45c <_OCPU_InitUserMem+0x38>
102cc428:	e59f1030 	ldr	r1, [pc, #48]	; 102cc460 <_OCPU_InitUserMem+0x3c>
102cc42c:	e59f2030 	ldr	r2, [pc, #48]	; 102cc464 <_OCPU_InitUserMem+0x40>
102cc430:	e1510002 	cmp	r1, r2
102cc434:	b8b00008 	ldmlt	r0!, {r3}
102cc438:	b8a10008 	stmialt	r1!, {r3}
102cc43c:	bafffffb 	blt	102cc430 <_OCPU_InitUserMem+0xc>
102cc440:	e59f1020 	ldr	r1, [pc, #32]	; 102cc468 <_OCPU_InitUserMem+0x44>
102cc444:	e59f2020 	ldr	r2, [pc, #32]	; 102cc46c <_OCPU_InitUserMem+0x48>
102cc448:	e3a03000 	mov	r3, #0
102cc44c:	e1510002 	cmp	r1, r2
102cc450:	b8a10008 	stmialt	r1!, {r3}
102cc454:	bafffffc 	blt	102cc44c <_OCPU_InitUserMem+0x28>
102cc458:	e12fff1e 	bx	lr
102cc45c:	102cfab8 	.word	0x102cfab8
102cc460:	f03d2000 	.word	0xf03d2000
102cc464:	f03d2050 	.word	0xf03d2050
102cc468:	f03d2050 	.word	0xf03d2050
102cc46c:	f03d30c0 	.word	0xf03d30c0

102cc470 <memcpy>:
102cc470:	b5f0      	push	{r4, r5, r6, r7, lr}
102cc472:	4657      	mov	r7, sl
102cc474:	464e      	mov	r6, r9
102cc476:	4645      	mov	r5, r8
102cc478:	b4e0      	push	{r5, r6, r7}
102cc47a:	2a03      	cmp	r2, #3
102cc47c:	d80e      	bhi.n	102cc49c <memcpy+0x2c>
102cc47e:	2300      	movs	r3, #0
102cc480:	2a00      	cmp	r2, #0
102cc482:	d004      	beq.n	102cc48e <memcpy+0x1e>
102cc484:	5ccc      	ldrb	r4, [r1, r3]
102cc486:	54c4      	strb	r4, [r0, r3]
102cc488:	3301      	adds	r3, #1
102cc48a:	4293      	cmp	r3, r2
102cc48c:	d1fa      	bne.n	102cc484 <memcpy+0x14>
102cc48e:	bc1c      	pop	{r2, r3, r4}
102cc490:	4690      	mov	r8, r2
102cc492:	4699      	mov	r9, r3
102cc494:	46a2      	mov	sl, r4
102cc496:	bcf0      	pop	{r4, r5, r6, r7}
102cc498:	bc02      	pop	{r1}
102cc49a:	4708      	bx	r1
102cc49c:	1882      	adds	r2, r0, r2
102cc49e:	0783      	lsls	r3, r0, #30
102cc4a0:	d008      	beq.n	102cc4b4 <memcpy+0x44>
102cc4a2:	1c03      	adds	r3, r0, #0
102cc4a4:	2403      	movs	r4, #3
102cc4a6:	780d      	ldrb	r5, [r1, #0]
102cc4a8:	701d      	strb	r5, [r3, #0]
102cc4aa:	3301      	adds	r3, #1
102cc4ac:	3101      	adds	r1, #1
102cc4ae:	4223      	tst	r3, r4
102cc4b0:	d1f9      	bne.n	102cc4a6 <memcpy+0x36>
102cc4b2:	e000      	b.n	102cc4b6 <memcpy+0x46>
102cc4b4:	1c03      	adds	r3, r0, #0
102cc4b6:	2403      	movs	r4, #3
102cc4b8:	400c      	ands	r4, r1
102cc4ba:	d046      	beq.n	102cc54a <memcpy+0xda>
102cc4bc:	4267      	negs	r7, r4
102cc4be:	46ba      	mov	sl, r7
102cc4c0:	59ce      	ldr	r6, [r1, r7]
102cc4c2:	1ad7      	subs	r7, r2, r3
102cc4c4:	2f03      	cmp	r7, #3
102cc4c6:	dd15      	ble.n	102cc4f4 <memcpy+0x84>
102cc4c8:	2704      	movs	r7, #4
102cc4ca:	00e5      	lsls	r5, r4, #3
102cc4cc:	1b3c      	subs	r4, r7, r4
102cc4ce:	00e4      	lsls	r4, r4, #3
102cc4d0:	46ac      	mov	ip, r5
102cc4d2:	46a1      	mov	r9, r4
102cc4d4:	4654      	mov	r4, sl
102cc4d6:	3104      	adds	r1, #4
102cc4d8:	590f      	ldr	r7, [r1, r4]
102cc4da:	464c      	mov	r4, r9
102cc4dc:	1c3d      	adds	r5, r7, #0
102cc4de:	40a5      	lsls	r5, r4
102cc4e0:	46a8      	mov	r8, r5
102cc4e2:	4665      	mov	r5, ip
102cc4e4:	40ee      	lsrs	r6, r5
102cc4e6:	4644      	mov	r4, r8
102cc4e8:	4326      	orrs	r6, r4
102cc4ea:	c340      	stmia	r3!, {r6}
102cc4ec:	1c3e      	adds	r6, r7, #0
102cc4ee:	1ad7      	subs	r7, r2, r3
102cc4f0:	2f03      	cmp	r7, #3
102cc4f2:	dcef      	bgt.n	102cc4d4 <memcpy+0x64>
102cc4f4:	429a      	cmp	r2, r3
102cc4f6:	d9ca      	bls.n	102cc48e <memcpy+0x1e>
102cc4f8:	780c      	ldrb	r4, [r1, #0]
102cc4fa:	701c      	strb	r4, [r3, #0]
102cc4fc:	3301      	adds	r3, #1
102cc4fe:	3101      	adds	r1, #1
102cc500:	4293      	cmp	r3, r2
102cc502:	d1f9      	bne.n	102cc4f8 <memcpy+0x88>
102cc504:	e7c3      	b.n	102cc48e <memcpy+0x1e>
102cc506:	680c      	ldr	r4, [r1, #0]
102cc508:	601c      	str	r4, [r3, #0]
102cc50a:	684d      	ldr	r5, [r1, #4]
102cc50c:	605d      	str	r5, [r3, #4]
102cc50e:	688f      	ldr	r7, [r1, #8]
102cc510:	609f      	str	r7, [r3, #8]
102cc512:	68cc      	ldr	r4, [r1, #12]
102cc514:	60dc      	str	r4, [r3, #12]
102cc516:	690d      	ldr	r5, [r1, #16]
102cc518:	611d      	str	r5, [r3, #16]
102cc51a:	694f      	ldr	r7, [r1, #20]
102cc51c:	615f      	str	r7, [r3, #20]
102cc51e:	698c      	ldr	r4, [r1, #24]
102cc520:	619c      	str	r4, [r3, #24]
102cc522:	69cd      	ldr	r5, [r1, #28]
102cc524:	61dd      	str	r5, [r3, #28]
102cc526:	6a0f      	ldr	r7, [r1, #32]
102cc528:	621f      	str	r7, [r3, #32]
102cc52a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
102cc52c:	625c      	str	r4, [r3, #36]	; 0x24
102cc52e:	6a8d      	ldr	r5, [r1, #40]	; 0x28
102cc530:	629d      	str	r5, [r3, #40]	; 0x28
102cc532:	6acf      	ldr	r7, [r1, #44]	; 0x2c
102cc534:	62df      	str	r7, [r3, #44]	; 0x2c
102cc536:	6b0c      	ldr	r4, [r1, #48]	; 0x30
102cc538:	631c      	str	r4, [r3, #48]	; 0x30
102cc53a:	6b4d      	ldr	r5, [r1, #52]	; 0x34
102cc53c:	635d      	str	r5, [r3, #52]	; 0x34
102cc53e:	6b8f      	ldr	r7, [r1, #56]	; 0x38
102cc540:	639f      	str	r7, [r3, #56]	; 0x38
102cc542:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
102cc544:	3140      	adds	r1, #64	; 0x40
102cc546:	63dc      	str	r4, [r3, #60]	; 0x3c
102cc548:	3340      	adds	r3, #64	; 0x40
102cc54a:	1ad4      	subs	r4, r2, r3
102cc54c:	2c3f      	cmp	r4, #63	; 0x3f
102cc54e:	dcda      	bgt.n	102cc506 <memcpy+0x96>
102cc550:	e00a      	b.n	102cc568 <memcpy+0xf8>
102cc552:	680d      	ldr	r5, [r1, #0]
102cc554:	601d      	str	r5, [r3, #0]
102cc556:	684f      	ldr	r7, [r1, #4]
102cc558:	605f      	str	r7, [r3, #4]
102cc55a:	688c      	ldr	r4, [r1, #8]
102cc55c:	609c      	str	r4, [r3, #8]
102cc55e:	68cd      	ldr	r5, [r1, #12]
102cc560:	60dd      	str	r5, [r3, #12]
102cc562:	3310      	adds	r3, #16
102cc564:	3110      	adds	r1, #16
102cc566:	1ad4      	subs	r4, r2, r3
102cc568:	2c0f      	cmp	r4, #15
102cc56a:	dcf2      	bgt.n	102cc552 <memcpy+0xe2>
102cc56c:	e002      	b.n	102cc574 <memcpy+0x104>
102cc56e:	c910      	ldmia	r1!, {r4}
102cc570:	c310      	stmia	r3!, {r4}
102cc572:	1ad4      	subs	r4, r2, r3
102cc574:	2c03      	cmp	r4, #3
102cc576:	dcfa      	bgt.n	102cc56e <memcpy+0xfe>
102cc578:	e7bc      	b.n	102cc4f4 <memcpy+0x84>
102cc57a:	46c0      	nop			; (mov r8, r8)

102cc57c <memset>:
102cc57c:	b530      	push	{r4, r5, lr}
102cc57e:	060c      	lsls	r4, r1, #24
102cc580:	0e24      	lsrs	r4, r4, #24
102cc582:	2a03      	cmp	r2, #3
102cc584:	d80a      	bhi.n	102cc59c <memset+0x20>
102cc586:	1c03      	adds	r3, r0, #0
102cc588:	1811      	adds	r1, r2, r0
102cc58a:	2a00      	cmp	r2, #0
102cc58c:	d003      	beq.n	102cc596 <memset+0x1a>
102cc58e:	701c      	strb	r4, [r3, #0]
102cc590:	3301      	adds	r3, #1
102cc592:	428b      	cmp	r3, r1
102cc594:	d1fb      	bne.n	102cc58e <memset+0x12>
102cc596:	bc30      	pop	{r4, r5}
102cc598:	bc02      	pop	{r1}
102cc59a:	4708      	bx	r1
102cc59c:	1882      	adds	r2, r0, r2
102cc59e:	0783      	lsls	r3, r0, #30
102cc5a0:	d006      	beq.n	102cc5b0 <memset+0x34>
102cc5a2:	1c03      	adds	r3, r0, #0
102cc5a4:	2503      	movs	r5, #3
102cc5a6:	701c      	strb	r4, [r3, #0]
102cc5a8:	3301      	adds	r3, #1
102cc5aa:	422b      	tst	r3, r5
102cc5ac:	d1fb      	bne.n	102cc5a6 <memset+0x2a>
102cc5ae:	e000      	b.n	102cc5b2 <memset+0x36>
102cc5b0:	1c03      	adds	r3, r0, #0
102cc5b2:	25ff      	movs	r5, #255	; 0xff
102cc5b4:	4029      	ands	r1, r5
102cc5b6:	020d      	lsls	r5, r1, #8
102cc5b8:	1869      	adds	r1, r5, r1
102cc5ba:	040d      	lsls	r5, r1, #16
102cc5bc:	1949      	adds	r1, r1, r5
102cc5be:	1ad5      	subs	r5, r2, r3
102cc5c0:	2d3f      	cmp	r5, #63	; 0x3f
102cc5c2:	dd1a      	ble.n	102cc5fa <memset+0x7e>
102cc5c4:	6019      	str	r1, [r3, #0]
102cc5c6:	6059      	str	r1, [r3, #4]
102cc5c8:	6099      	str	r1, [r3, #8]
102cc5ca:	60d9      	str	r1, [r3, #12]
102cc5cc:	6119      	str	r1, [r3, #16]
102cc5ce:	6159      	str	r1, [r3, #20]
102cc5d0:	6199      	str	r1, [r3, #24]
102cc5d2:	61d9      	str	r1, [r3, #28]
102cc5d4:	6219      	str	r1, [r3, #32]
102cc5d6:	6259      	str	r1, [r3, #36]	; 0x24
102cc5d8:	6299      	str	r1, [r3, #40]	; 0x28
102cc5da:	62d9      	str	r1, [r3, #44]	; 0x2c
102cc5dc:	6319      	str	r1, [r3, #48]	; 0x30
102cc5de:	6359      	str	r1, [r3, #52]	; 0x34
102cc5e0:	6399      	str	r1, [r3, #56]	; 0x38
102cc5e2:	63d9      	str	r1, [r3, #60]	; 0x3c
102cc5e4:	3340      	adds	r3, #64	; 0x40
102cc5e6:	1ad5      	subs	r5, r2, r3
102cc5e8:	2d3f      	cmp	r5, #63	; 0x3f
102cc5ea:	dceb      	bgt.n	102cc5c4 <memset+0x48>
102cc5ec:	e005      	b.n	102cc5fa <memset+0x7e>
102cc5ee:	6019      	str	r1, [r3, #0]
102cc5f0:	6059      	str	r1, [r3, #4]
102cc5f2:	6099      	str	r1, [r3, #8]
102cc5f4:	60d9      	str	r1, [r3, #12]
102cc5f6:	3310      	adds	r3, #16
102cc5f8:	1ad5      	subs	r5, r2, r3
102cc5fa:	2d0f      	cmp	r5, #15
102cc5fc:	dcf7      	bgt.n	102cc5ee <memset+0x72>
102cc5fe:	e001      	b.n	102cc604 <memset+0x88>
102cc600:	c302      	stmia	r3!, {r1}
102cc602:	1ad5      	subs	r5, r2, r3
102cc604:	2d03      	cmp	r5, #3
102cc606:	dcfb      	bgt.n	102cc600 <memset+0x84>
102cc608:	429a      	cmp	r2, r3
102cc60a:	d9c4      	bls.n	102cc596 <memset+0x1a>
102cc60c:	701c      	strb	r4, [r3, #0]
102cc60e:	3301      	adds	r3, #1
102cc610:	4293      	cmp	r3, r2
102cc612:	d1fb      	bne.n	102cc60c <memset+0x90>
102cc614:	e7bf      	b.n	102cc596 <memset+0x1a>
102cc616:	46c0      	nop			; (mov r8, r8)

102cc618 <__aeabi_d2iz>:
102cc618:	e1a02081 	lsl	r2, r1, #1
102cc61c:	e2922602 	adds	r2, r2, #2097152	; 0x200000
102cc620:	2a00000c 	bcs	102cc658 <__aeabi_d2iz+0x40>
102cc624:	5a000009 	bpl	102cc650 <__aeabi_d2iz+0x38>
102cc628:	e3e03e3e 	mvn	r3, #992	; 0x3e0
102cc62c:	e0532ac2 	subs	r2, r3, r2, asr #21
102cc630:	9a00000a 	bls	102cc660 <__aeabi_d2iz+0x48>
102cc634:	e1a03581 	lsl	r3, r1, #11
102cc638:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
102cc63c:	e1833aa0 	orr	r3, r3, r0, lsr #21
102cc640:	e3110102 	tst	r1, #-2147483648	; 0x80000000
102cc644:	e1a00233 	lsr	r0, r3, r2
102cc648:	12600000 	rsbne	r0, r0, #0
102cc64c:	e12fff1e 	bx	lr
102cc650:	e3a00000 	mov	r0, #0
102cc654:	e12fff1e 	bx	lr
102cc658:	e1900601 	orrs	r0, r0, r1, lsl #12
102cc65c:	1a000002 	bne	102cc66c <__aeabi_d2iz+0x54>
102cc660:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
102cc664:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
102cc668:	e12fff1e 	bx	lr
102cc66c:	e3a00000 	mov	r0, #0
102cc670:	e12fff1e 	bx	lr

102cc674 <__aeabi_d2f>:
102cc674:	e1a02081 	lsl	r2, r1, #1
102cc678:	e2523207 	subs	r3, r2, #1879048192	; 0x70000000
102cc67c:	2253c602 	subscs	ip, r3, #2097152	; 0x200000
102cc680:	227cc57f 	rsbscs	ip, ip, #532676608	; 0x1fc00000
102cc684:	9a000006 	bls	102cc6a4 <__aeabi_d2f+0x30>
102cc688:	e201c102 	and	ip, r1, #-2147483648	; 0x80000000
102cc68c:	e1a02180 	lsl	r2, r0, #3
102cc690:	e18c0ea0 	orr	r0, ip, r0, lsr #29
102cc694:	e3520102 	cmp	r2, #-2147483648	; 0x80000000
102cc698:	e0a00103 	adc	r0, r0, r3, lsl #2
102cc69c:	03c00001 	biceq	r0, r0, #1
102cc6a0:	e12fff1e 	bx	lr
102cc6a4:	e3110101 	tst	r1, #1073741824	; 0x40000000
102cc6a8:	1a00000f 	bne	102cc6ec <__aeabi_d2f+0x78>
102cc6ac:	e293262e 	adds	r2, r3, #48234496	; 0x2e00000
102cc6b0:	b2010102 	andlt	r0, r1, #-2147483648	; 0x80000000
102cc6b4:	b12fff1e 	bxlt	lr
102cc6b8:	e3811601 	orr	r1, r1, #1048576	; 0x100000
102cc6bc:	e1a02aa2 	lsr	r2, r2, #21
102cc6c0:	e2622018 	rsb	r2, r2, #24
102cc6c4:	e262c020 	rsb	ip, r2, #32
102cc6c8:	e1b03c10 	lsls	r3, r0, ip
102cc6cc:	e1a00230 	lsr	r0, r0, r2
102cc6d0:	13800001 	orrne	r0, r0, #1
102cc6d4:	e1a03581 	lsl	r3, r1, #11
102cc6d8:	e1a035a3 	lsr	r3, r3, #11
102cc6dc:	e1800c13 	orr	r0, r0, r3, lsl ip
102cc6e0:	e1a03233 	lsr	r3, r3, r2
102cc6e4:	e1a03083 	lsl	r3, r3, #1
102cc6e8:	eaffffe6 	b	102cc688 <__aeabi_d2f+0x14>
102cc6ec:	e1f03ac2 	mvns	r3, r2, asr #21
102cc6f0:	1a000003 	bne	102cc704 <__aeabi_d2f+0x90>
102cc6f4:	e1903601 	orrs	r3, r0, r1, lsl #12
102cc6f8:	13a0047f 	movne	r0, #2130706432	; 0x7f000000
102cc6fc:	13800503 	orrne	r0, r0, #12582912	; 0xc00000
102cc700:	112fff1e 	bxne	lr
102cc704:	e2010102 	and	r0, r1, #-2147483648	; 0x80000000
102cc708:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
102cc70c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
102cc710:	e12fff1e 	bx	lr

Disassembly of section .text.Ql_GPIO_Init:

102cc714 <Ql_GPIO_Init>:
102cc714:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
102cc718:	e59f405c 	ldr	r4, [pc, #92]	; 102cc77c <Ql_GPIO_Init+0x68>
102cc71c:	e1a06003 	mov	r6, r3
102cc720:	e5943000 	ldr	r3, [r4]
102cc724:	e1a05000 	mov	r5, r0
102cc728:	e3530000 	cmp	r3, #0
102cc72c:	e1a08001 	mov	r8, r1
102cc730:	e1a07002 	mov	r7, r2
102cc734:	1a000006 	bne	102cc754 <Ql_GPIO_Init+0x40>
102cc738:	e59f3040 	ldr	r3, [pc, #64]	; 102cc780 <Ql_GPIO_Init+0x6c>
102cc73c:	e59f0040 	ldr	r0, [pc, #64]	; 102cc784 <Ql_GPIO_Init+0x70>
102cc740:	e5933000 	ldr	r3, [r3]
102cc744:	e12fff33 	blx	r3
102cc748:	e3500000 	cmp	r0, #0
102cc74c:	0a000008 	beq	102cc774 <Ql_GPIO_Init+0x60>
102cc750:	e5840000 	str	r0, [r4]
102cc754:	e59f3020 	ldr	r3, [pc, #32]	; 102cc77c <Ql_GPIO_Init+0x68>
102cc758:	e1a00005 	mov	r0, r5
102cc75c:	e593c000 	ldr	ip, [r3]
102cc760:	e1a01008 	mov	r1, r8
102cc764:	e1a02007 	mov	r2, r7
102cc768:	e1a03006 	mov	r3, r6
102cc76c:	e12fff3c 	blx	ip
102cc770:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
102cc774:	e59f000c 	ldr	r0, [pc, #12]	; 102cc788 <Ql_GPIO_Init+0x74>
102cc778:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
102cc77c:	f03d232c 	.word	0xf03d232c
102cc780:	f03d2358 	.word	0xf03d2358
102cc784:	102cf5c4 	.word	0x102cf5c4
102cc788:	ffffd8f0 	.word	0xffffd8f0

Disassembly of section .text.Ql_GPIO_SetLevel:

102cc78c <Ql_GPIO_SetLevel>:
102cc78c:	e92d4070 	push	{r4, r5, r6, lr}
102cc790:	e59f404c 	ldr	r4, [pc, #76]	; 102cc7e4 <Ql_GPIO_SetLevel+0x58>
102cc794:	e1a05000 	mov	r5, r0
102cc798:	e5943004 	ldr	r3, [r4, #4]
102cc79c:	e1a06001 	mov	r6, r1
102cc7a0:	e3530000 	cmp	r3, #0
102cc7a4:	1a000006 	bne	102cc7c4 <Ql_GPIO_SetLevel+0x38>
102cc7a8:	e59f3038 	ldr	r3, [pc, #56]	; 102cc7e8 <Ql_GPIO_SetLevel+0x5c>
102cc7ac:	e59f0038 	ldr	r0, [pc, #56]	; 102cc7ec <Ql_GPIO_SetLevel+0x60>
102cc7b0:	e5933000 	ldr	r3, [r3]
102cc7b4:	e12fff33 	blx	r3
102cc7b8:	e3500000 	cmp	r0, #0
102cc7bc:	0a000006 	beq	102cc7dc <Ql_GPIO_SetLevel+0x50>
102cc7c0:	e5840004 	str	r0, [r4, #4]
102cc7c4:	e59f3018 	ldr	r3, [pc, #24]	; 102cc7e4 <Ql_GPIO_SetLevel+0x58>
102cc7c8:	e1a00005 	mov	r0, r5
102cc7cc:	e5933004 	ldr	r3, [r3, #4]
102cc7d0:	e1a01006 	mov	r1, r6
102cc7d4:	e12fff33 	blx	r3
102cc7d8:	e8bd8070 	pop	{r4, r5, r6, pc}
102cc7dc:	e59f000c 	ldr	r0, [pc, #12]	; 102cc7f0 <Ql_GPIO_SetLevel+0x64>
102cc7e0:	e8bd8070 	pop	{r4, r5, r6, pc}
102cc7e4:	f03d232c 	.word	0xf03d232c
102cc7e8:	f03d2358 	.word	0xf03d2358
102cc7ec:	102cf5d1 	.word	0x102cf5d1
102cc7f0:	ffffd8f0 	.word	0xffffd8f0

Disassembly of section .text.Ql_MEM_Alloc:

102cc7f4 <Ql_MEM_Alloc>:
102cc7f4:	e92d4070 	push	{r4, r5, r6, lr}
102cc7f8:	e59f5058 	ldr	r5, [pc, #88]	; 102cc858 <Ql_MEM_Alloc+0x64>
102cc7fc:	e1a06000 	mov	r6, r0
102cc800:	e5953000 	ldr	r3, [r5]
102cc804:	e3530000 	cmp	r3, #0
102cc808:	1a00000d 	bne	102cc844 <Ql_MEM_Alloc+0x50>
102cc80c:	e59f3048 	ldr	r3, [pc, #72]	; 102cc85c <Ql_MEM_Alloc+0x68>
102cc810:	e59f0048 	ldr	r0, [pc, #72]	; 102cc860 <Ql_MEM_Alloc+0x6c>
102cc814:	e5933000 	ldr	r3, [r3]
102cc818:	e12fff33 	blx	r3
102cc81c:	e2504000 	subs	r4, r0, #0
102cc820:	15854000 	strne	r4, [r5]
102cc824:	1a000006 	bne	102cc844 <Ql_MEM_Alloc+0x50>
102cc828:	e59f3034 	ldr	r3, [pc, #52]	; 102cc864 <Ql_MEM_Alloc+0x70>
102cc82c:	e59f102c 	ldr	r1, [pc, #44]	; 102cc860 <Ql_MEM_Alloc+0x6c>
102cc830:	e5933000 	ldr	r3, [r3]
102cc834:	e59f002c 	ldr	r0, [pc, #44]	; 102cc868 <Ql_MEM_Alloc+0x74>
102cc838:	e12fff33 	blx	r3
102cc83c:	e1a00004 	mov	r0, r4
102cc840:	e8bd8070 	pop	{r4, r5, r6, pc}
102cc844:	e59f300c 	ldr	r3, [pc, #12]	; 102cc858 <Ql_MEM_Alloc+0x64>
102cc848:	e1a00006 	mov	r0, r6
102cc84c:	e5933000 	ldr	r3, [r3]
102cc850:	e12fff33 	blx	r3
102cc854:	e8bd8070 	pop	{r4, r5, r6, pc}
102cc858:	f03d234c 	.word	0xf03d234c
102cc85c:	f03d2358 	.word	0xf03d2358
102cc860:	102cf65e 	.word	0x102cf65e
102cc864:	f03d31ec 	.word	0xf03d31ec
102cc868:	f03d2024 	.word	0xf03d2024

Disassembly of section .text.Ql_MEM_Free:

102cc86c <Ql_MEM_Free>:
102cc86c:	e92d4038 	push	{r3, r4, r5, lr}
102cc870:	e59f4054 	ldr	r4, [pc, #84]	; 102cc8cc <Ql_MEM_Free+0x60>
102cc874:	e1a05000 	mov	r5, r0
102cc878:	e5943004 	ldr	r3, [r4, #4]
102cc87c:	e3530000 	cmp	r3, #0
102cc880:	1a00000c 	bne	102cc8b8 <Ql_MEM_Free+0x4c>
102cc884:	e59f3044 	ldr	r3, [pc, #68]	; 102cc8d0 <Ql_MEM_Free+0x64>
102cc888:	e59f0044 	ldr	r0, [pc, #68]	; 102cc8d4 <Ql_MEM_Free+0x68>
102cc88c:	e5933000 	ldr	r3, [r3]
102cc890:	e12fff33 	blx	r3
102cc894:	e3500000 	cmp	r0, #0
102cc898:	15840004 	strne	r0, [r4, #4]
102cc89c:	1a000005 	bne	102cc8b8 <Ql_MEM_Free+0x4c>
102cc8a0:	e59f3030 	ldr	r3, [pc, #48]	; 102cc8d8 <Ql_MEM_Free+0x6c>
102cc8a4:	e59f1028 	ldr	r1, [pc, #40]	; 102cc8d4 <Ql_MEM_Free+0x68>
102cc8a8:	e5933000 	ldr	r3, [r3]
102cc8ac:	e59f0028 	ldr	r0, [pc, #40]	; 102cc8dc <Ql_MEM_Free+0x70>
102cc8b0:	e12fff33 	blx	r3
102cc8b4:	e8bd8038 	pop	{r3, r4, r5, pc}
102cc8b8:	e59f300c 	ldr	r3, [pc, #12]	; 102cc8cc <Ql_MEM_Free+0x60>
102cc8bc:	e1a00005 	mov	r0, r5
102cc8c0:	e5933004 	ldr	r3, [r3, #4]
102cc8c4:	e12fff33 	blx	r3
102cc8c8:	e8bd8038 	pop	{r3, r4, r5, pc}
102cc8cc:	f03d234c 	.word	0xf03d234c
102cc8d0:	f03d2358 	.word	0xf03d2358
102cc8d4:	102cf66b 	.word	0x102cf66b
102cc8d8:	f03d31ec 	.word	0xf03d31ec
102cc8dc:	f03d2024 	.word	0xf03d2024

Disassembly of section .text.ql_InitVFunc:

102cc8e0 <ql_InitVFunc>:
102cc8e0:	e5903000 	ldr	r3, [r0]
102cc8e4:	e59f20b0 	ldr	r2, [pc, #176]	; 102cc99c <ql_InitVFunc+0xbc>
102cc8e8:	e5933000 	ldr	r3, [r3]
102cc8ec:	e5901014 	ldr	r1, [r0, #20]
102cc8f0:	e3530007 	cmp	r3, #7
102cc8f4:	23a03007 	movcs	r3, #7
102cc8f8:	e5823000 	str	r3, [r2]
102cc8fc:	e59f209c 	ldr	r2, [pc, #156]	; 102cc9a0 <ql_InitVFunc+0xc0>
102cc900:	e3530001 	cmp	r3, #1
102cc904:	e5821000 	str	r1, [r2]
102cc908:	e59f2094 	ldr	r2, [pc, #148]	; 102cc9a4 <ql_InitVFunc+0xc4>
102cc90c:	e5901018 	ldr	r1, [r0, #24]
102cc910:	e5821000 	str	r1, [r2]
102cc914:	e59f108c 	ldr	r1, [pc, #140]	; 102cc9a8 <ql_InitVFunc+0xc8>
102cc918:	e59f208c 	ldr	r2, [pc, #140]	; 102cc9ac <ql_InitVFunc+0xcc>
102cc91c:	9a000004 	bls	102cc934 <ql_InitVFunc+0x54>
102cc920:	e590c004 	ldr	ip, [r0, #4]
102cc924:	e3530002 	cmp	r3, #2
102cc928:	e581c000 	str	ip, [r1]
102cc92c:	1a000003 	bne	102cc940 <ql_InitVFunc+0x60>
102cc930:	ea000007 	b	102cc954 <ql_InitVFunc+0x74>
102cc934:	e3a03000 	mov	r3, #0
102cc938:	e5813000 	str	r3, [r1]
102cc93c:	ea000004 	b	102cc954 <ql_InitVFunc+0x74>
102cc940:	e5901008 	ldr	r1, [r0, #8]
102cc944:	e3530003 	cmp	r3, #3
102cc948:	e5821000 	str	r1, [r2]
102cc94c:	1a000003 	bne	102cc960 <ql_InitVFunc+0x80>
102cc950:	ea000009 	b	102cc97c <ql_InitVFunc+0x9c>
102cc954:	e3a03000 	mov	r3, #0
102cc958:	e5823000 	str	r3, [r2]
102cc95c:	ea000006 	b	102cc97c <ql_InitVFunc+0x9c>
102cc960:	e59f2048 	ldr	r2, [pc, #72]	; 102cc9b0 <ql_InitVFunc+0xd0>
102cc964:	e590100c 	ldr	r1, [r0, #12]
102cc968:	e3530004 	cmp	r3, #4
102cc96c:	e5821000 	str	r1, [r2]
102cc970:	15902010 	ldrne	r2, [r0, #16]
102cc974:	1a000005 	bne	102cc990 <ql_InitVFunc+0xb0>
102cc978:	ea000003 	b	102cc98c <ql_InitVFunc+0xac>
102cc97c:	e59f302c 	ldr	r3, [pc, #44]	; 102cc9b0 <ql_InitVFunc+0xd0>
102cc980:	e3a02000 	mov	r2, #0
102cc984:	e5832000 	str	r2, [r3]
102cc988:	eaffffff 	b	102cc98c <ql_InitVFunc+0xac>
102cc98c:	e3a02000 	mov	r2, #0
102cc990:	e59f301c 	ldr	r3, [pc, #28]	; 102cc9b4 <ql_InitVFunc+0xd4>
102cc994:	e5832000 	str	r2, [r3]
102cc998:	e12fff1e 	bx	lr
102cc99c:	f03d2378 	.word	0xf03d2378
102cc9a0:	f03d2374 	.word	0xf03d2374
102cc9a4:	f03d2358 	.word	0xf03d2358
102cc9a8:	f03d31ec 	.word	0xf03d31ec
102cc9ac:	f03d31e8 	.word	0xf03d31e8
102cc9b0:	f03d31e4 	.word	0xf03d31e4
102cc9b4:	f03d31f0 	.word	0xf03d31f0

Disassembly of section .text.ocpu_main:

102cc9b8 <ocpu_main>:
102cc9b8:	e92d4010 	push	{r4, lr}
102cc9bc:	e24dd020 	sub	sp, sp, #32
102cc9c0:	e1a04000 	mov	r4, r0
102cc9c4:	e3a01000 	mov	r1, #0
102cc9c8:	e3a0201e 	mov	r2, #30
102cc9cc:	e59f30ac 	ldr	r3, [pc, #172]	; 102cca80 <ocpu_main+0xc8>
102cc9d0:	e1a0000d 	mov	r0, sp
102cc9d4:	e12fff33 	blx	r3
102cc9d8:	e5d42000 	ldrb	r2, [r4]
102cc9dc:	e59f10a0 	ldr	r1, [pc, #160]	; 102cca84 <ocpu_main+0xcc>
102cc9e0:	e5943004 	ldr	r3, [r4, #4]
102cc9e4:	e3520000 	cmp	r2, #0
102cc9e8:	e5c12004 	strb	r2, [r1, #4]
102cc9ec:	e5813008 	str	r3, [r1, #8]
102cc9f0:	1a000004 	bne	102cca08 <ocpu_main+0x50>
102cc9f4:	e59f208c 	ldr	r2, [pc, #140]	; 102cca88 <ocpu_main+0xd0>
102cc9f8:	e59f008c 	ldr	r0, [pc, #140]	; 102cca8c <ocpu_main+0xd4>
102cc9fc:	e1a01003 	mov	r1, r3
102cca00:	e5922000 	ldr	r2, [r2]
102cca04:	e12fff33 	blx	r3
102cca08:	e5940008 	ldr	r0, [r4, #8]
102cca0c:	e3500000 	cmp	r0, #0
102cca10:	0a000002 	beq	102cca20 <ocpu_main+0x68>
102cca14:	e59f3074 	ldr	r3, [pc, #116]	; 102cca90 <ocpu_main+0xd8>
102cca18:	e12fff33 	blx	r3
102cca1c:	ea000003 	b	102cca30 <ocpu_main+0x78>
102cca20:	e59f305c 	ldr	r3, [pc, #92]	; 102cca84 <ocpu_main+0xcc>
102cca24:	e59f0068 	ldr	r0, [pc, #104]	; 102cca94 <ocpu_main+0xdc>
102cca28:	e5933008 	ldr	r3, [r3, #8]
102cca2c:	e12fff33 	blx	r3
102cca30:	e3a0201e 	mov	r2, #30
102cca34:	e1a0000d 	mov	r0, sp
102cca38:	e3a01000 	mov	r1, #0
102cca3c:	e59f3054 	ldr	r3, [pc, #84]	; 102cca98 <ocpu_main+0xe0>
102cca40:	e12fff33 	blx	r3
102cca44:	e1a0000d 	mov	r0, sp
102cca48:	e3a0101e 	mov	r1, #30
102cca4c:	e59f3048 	ldr	r3, [pc, #72]	; 102cca9c <ocpu_main+0xe4>
102cca50:	e12fff33 	blx	r3
102cca54:	e59f3028 	ldr	r3, [pc, #40]	; 102cca84 <ocpu_main+0xcc>
102cca58:	e1a0100d 	mov	r1, sp
102cca5c:	e5933008 	ldr	r3, [r3, #8]
102cca60:	e59f0038 	ldr	r0, [pc, #56]	; 102ccaa0 <ocpu_main+0xe8>
102cca64:	e12fff33 	blx	r3
102cca68:	e59f3034 	ldr	r3, [pc, #52]	; 102ccaa4 <ocpu_main+0xec>
102cca6c:	e5932000 	ldr	r2, [r3]
102cca70:	e5930004 	ldr	r0, [r3, #4]
102cca74:	e12fff32 	blx	r2
102cca78:	e28dd020 	add	sp, sp, #32
102cca7c:	e8bd8010 	pop	{r4, pc}
102cca80:	102cc57d 	.word	0x102cc57d
102cca84:	f03d2378 	.word	0xf03d2378
102cca88:	f03d31ec 	.word	0xf03d31ec
102cca8c:	102cf677 	.word	0x102cf677
102cca90:	102cc8e0 	.word	0x102cc8e0
102cca94:	102cf6ae 	.word	0x102cf6ae
102cca98:	102cd6b0 	.word	0x102cd6b0
102cca9c:	102cd940 	.word	0x102cd940
102ccaa0:	102cf6c8 	.word	0x102cf6c8
102ccaa4:	102ceae8 	.word	0x102ceae8

Disassembly of section .text.proc_reserved2:

102ccaa8 <proc_reserved2>:
102ccaa8:	e59f3054 	ldr	r3, [pc, #84]	; 102ccb04 <proc_reserved2+0x5c>
102ccaac:	e92d4030 	push	{r4, r5, lr}
102ccab0:	e5830000 	str	r0, [r3]
102ccab4:	e59f404c 	ldr	r4, [pc, #76]	; 102ccb08 <proc_reserved2+0x60>
102ccab8:	e59f304c 	ldr	r3, [pc, #76]	; 102ccb0c <proc_reserved2+0x64>
102ccabc:	e59f504c 	ldr	r5, [pc, #76]	; 102ccb10 <proc_reserved2+0x68>
102ccac0:	e3a02001 	mov	r2, #1
102ccac4:	e24dd014 	sub	sp, sp, #20
102ccac8:	e5c32000 	strb	r2, [r3]
102ccacc:	e1a0000d 	mov	r0, sp
102ccad0:	e12fff34 	blx	r4
102ccad4:	e59d3000 	ldr	r3, [sp]
102ccad8:	e3530002 	cmp	r3, #2
102ccadc:	1afffffa 	bne	102ccacc <proc_reserved2+0x24>
102ccae0:	e59d0008 	ldr	r0, [sp, #8]
102ccae4:	e3a01000 	mov	r1, #0
102ccae8:	e12fff35 	blx	r5
102ccaec:	e59d0008 	ldr	r0, [sp, #8]
102ccaf0:	e3500000 	cmp	r0, #0
102ccaf4:	0afffff4 	beq	102ccacc <proc_reserved2+0x24>
102ccaf8:	e59f3014 	ldr	r3, [pc, #20]	; 102ccb14 <proc_reserved2+0x6c>
102ccafc:	e12fff33 	blx	r3
102ccb00:	eafffff1 	b	102ccacc <proc_reserved2+0x24>
102ccb04:	f03d203c 	.word	0xf03d203c
102ccb08:	102cd9a4 	.word	0x102cd9a4
102ccb0c:	f03d2388 	.word	0xf03d2388
102ccb10:	102cbc50 	.word	0x102cbc50
102ccb14:	102cc86c 	.word	0x102cc86c

Disassembly of section .text.ril_StopATTimer:

102ccb18 <ril_StopATTimer>:
102ccb18:	e92d4008 	push	{r3, lr}
102ccb1c:	e59f3020 	ldr	r3, [pc, #32]	; 102ccb44 <ril_StopATTimer+0x2c>
102ccb20:	e5d30009 	ldrb	r0, [r3, #9]
102ccb24:	e3500000 	cmp	r0, #0
102ccb28:	08bd8008 	popeq	{r3, pc}
102ccb2c:	e3a02000 	mov	r2, #0
102ccb30:	e5c32009 	strb	r2, [r3, #9]
102ccb34:	e5930000 	ldr	r0, [r3]
102ccb38:	e59f3008 	ldr	r3, [pc, #8]	; 102ccb48 <ril_StopATTimer+0x30>
102ccb3c:	e12fff33 	blx	r3
102ccb40:	e8bd8008 	pop	{r3, pc}
102ccb44:	f03d2040 	.word	0xf03d2040
102ccb48:	102cdd7c 	.word	0x102cdd7c

Disassembly of section .text.Callback_OnATTimer:

102ccb4c <Callback_OnATTimer>:
102ccb4c:	e92d4008 	push	{r3, lr}
102ccb50:	e59f3030 	ldr	r3, [pc, #48]	; 102ccb88 <Callback_OnATTimer+0x3c>
102ccb54:	e5d33009 	ldrb	r3, [r3, #9]
102ccb58:	e3530000 	cmp	r3, #0
102ccb5c:	08bd8008 	popeq	{r3, pc}
102ccb60:	e59f3024 	ldr	r3, [pc, #36]	; 102ccb8c <Callback_OnATTimer+0x40>
102ccb64:	e12fff33 	blx	r3
102ccb68:	e59f3020 	ldr	r3, [pc, #32]	; 102ccb90 <Callback_OnATTimer+0x44>
102ccb6c:	e3e02001 	mvn	r2, #1
102ccb70:	e5832000 	str	r2, [r3]
102ccb74:	e5930004 	ldr	r0, [r3, #4]
102ccb78:	e3a01001 	mov	r1, #1
102ccb7c:	e59f3010 	ldr	r3, [pc, #16]	; 102ccb94 <Callback_OnATTimer+0x48>
102ccb80:	e12fff33 	blx	r3
102ccb84:	e8bd8008 	pop	{r3, pc}
102ccb88:	f03d2040 	.word	0xf03d2040
102ccb8c:	102ccb18 	.word	0x102ccb18
102ccb90:	f03d238c 	.word	0xf03d238c
102ccb94:	102cdc34 	.word	0x102cdc34

Disassembly of section .text.CallBack_SerialPort_Hdlr:

102ccb98 <CallBack_SerialPort_Hdlr>:
102ccb98:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
102ccb9c:	e2515000 	subs	r5, r1, #0
102ccba0:	18bd8ff8 	popne	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
102ccba4:	e3500002 	cmp	r0, #2
102ccba8:	18bd8ff8 	popne	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
102ccbac:	e59f030c 	ldr	r0, [pc, #780]	; 102ccec0 <CallBack_SerialPort_Hdlr+0x328>
102ccbb0:	e3a02b02 	mov	r2, #2048	; 0x800
102ccbb4:	e59f3308 	ldr	r3, [pc, #776]	; 102ccec4 <CallBack_SerialPort_Hdlr+0x32c>
102ccbb8:	e12fff33 	blx	r3
102ccbbc:	e59f72fc 	ldr	r7, [pc, #764]	; 102ccec0 <CallBack_SerialPort_Hdlr+0x328>
102ccbc0:	e59f8300 	ldr	r8, [pc, #768]	; 102ccec8 <CallBack_SerialPort_Hdlr+0x330>
102ccbc4:	e3a00002 	mov	r0, #2
102ccbc8:	e0871005 	add	r1, r7, r5
102ccbcc:	e2652b02 	rsb	r2, r5, #2048	; 0x800
102ccbd0:	e12fff38 	blx	r8
102ccbd4:	e59f42f0 	ldr	r4, [pc, #752]	; 102ccecc <CallBack_SerialPort_Hdlr+0x334>
102ccbd8:	e2846008 	add	r6, r4, #8
102ccbdc:	e3500000 	cmp	r0, #0
102ccbe0:	c0855000 	addgt	r5, r5, r0
102ccbe4:	cafffff6 	bgt	102ccbc4 <CallBack_SerialPort_Hdlr+0x2c>
102ccbe8:	18bd8ff8 	popne	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
102ccbec:	e3550000 	cmp	r5, #0
102ccbf0:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
102ccbf4:	e5845808 	str	r5, [r4, #2056]	; 0x808
102ccbf8:	e0845005 	add	r5, r4, r5
102ccbfc:	e5c50008 	strb	r0, [r5, #8]
102ccc00:	e3a01001 	mov	r1, #1
102ccc04:	e3a00002 	mov	r0, #2
102ccc08:	e59f32c0 	ldr	r3, [pc, #704]	; 102cced0 <CallBack_SerialPort_Hdlr+0x338>
102ccc0c:	e584680c 	str	r6, [r4, #2060]	; 0x80c
102ccc10:	e12fff33 	blx	r3
102ccc14:	e2502000 	subs	r2, r0, #0
102ccc18:	159f82a4 	ldrne	r8, [pc, #676]	; 102ccec4 <CallBack_SerialPort_Hdlr+0x32c>
102ccc1c:	1a000004 	bne	102ccc34 <CallBack_SerialPort_Hdlr+0x9c>
102ccc20:	e594080c 	ldr	r0, [r4, #2060]	; 0x80c
102ccc24:	e5941808 	ldr	r1, [r4, #2056]	; 0x808
102ccc28:	e59f32a4 	ldr	r3, [pc, #676]	; 102cced4 <CallBack_SerialPort_Hdlr+0x33c>
102ccc2c:	e12fff33 	blx	r3
102ccc30:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
102ccc34:	e594680c 	ldr	r6, [r4, #2060]	; 0x80c
102ccc38:	e59f2298 	ldr	r2, [pc, #664]	; 102cced8 <CallBack_SerialPort_Hdlr+0x340>
102ccc3c:	e3a01000 	mov	r1, #0
102ccc40:	e5940810 	ldr	r0, [r4, #2064]	; 0x810
102ccc44:	e5949808 	ldr	r9, [r4, #2056]	; 0x808
102ccc48:	e12fff38 	blx	r8
102ccc4c:	e59f3288 	ldr	r3, [pc, #648]	; 102ccedc <CallBack_SerialPort_Hdlr+0x344>
102ccc50:	e59f1288 	ldr	r1, [pc, #648]	; 102ccee0 <CallBack_SerialPort_Hdlr+0x348>
102ccc54:	e1a00006 	mov	r0, r6
102ccc58:	e12fff33 	blx	r3
102ccc5c:	e59fa280 	ldr	sl, [pc, #640]	; 102ccee4 <CallBack_SerialPort_Hdlr+0x34c>
102ccc60:	e59f1278 	ldr	r1, [pc, #632]	; 102ccee0 <CallBack_SerialPort_Hdlr+0x348>
102ccc64:	e3500000 	cmp	r0, #0
102ccc68:	1286b002 	addne	fp, r6, #2
102ccc6c:	01a0b006 	moveq	fp, r6
102ccc70:	e1a0000b 	mov	r0, fp
102ccc74:	e12fff3a 	blx	sl
102ccc78:	e59f1268 	ldr	r1, [pc, #616]	; 102ccee8 <CallBack_SerialPort_Hdlr+0x350>
102ccc7c:	e1a07000 	mov	r7, r0
102ccc80:	e1a0000b 	mov	r0, fp
102ccc84:	e12fff3a 	blx	sl
102ccc88:	e59f125c 	ldr	r1, [pc, #604]	; 102cceec <CallBack_SerialPort_Hdlr+0x354>
102ccc8c:	e1a05000 	mov	r5, r0
102ccc90:	e1a0000b 	mov	r0, fp
102ccc94:	e12fff3a 	blx	sl
102ccc98:	e2971000 	adds	r1, r7, #0
102ccc9c:	13a01001 	movne	r1, #1
102ccca0:	e2952000 	adds	r2, r5, #0
102ccca4:	13a02001 	movne	r2, #1
102ccca8:	e1923001 	orrs	r3, r2, r1
102cccac:	1a000002 	bne	102cccbc <CallBack_SerialPort_Hdlr+0x124>
102cccb0:	e3500000 	cmp	r0, #0
102cccb4:	1a000018 	bne	102ccd1c <CallBack_SerialPort_Hdlr+0x184>
102cccb8:	ea000027 	b	102ccd5c <CallBack_SerialPort_Hdlr+0x1c4>
102cccbc:	e3510000 	cmp	r1, #0
102cccc0:	0a00000c 	beq	102cccf8 <CallBack_SerialPort_Hdlr+0x160>
102cccc4:	e1550007 	cmp	r5, r7
102cccc8:	83a02000 	movhi	r2, #0
102ccccc:	92022001 	andls	r2, r2, #1
102cccd0:	e3520000 	cmp	r2, #0
102cccd4:	01a05007 	moveq	r5, r7
102cccd8:	e1500005 	cmp	r0, r5
102cccdc:	83a02000 	movhi	r2, #0
102ccce0:	93a02001 	movls	r2, #1
102ccce4:	e3500000 	cmp	r0, #0
102ccce8:	03a02000 	moveq	r2, #0
102cccec:	e3520000 	cmp	r2, #0
102cccf0:	01a00005 	moveq	r0, r5
102cccf4:	ea000008 	b	102ccd1c <CallBack_SerialPort_Hdlr+0x184>
102cccf8:	e3520000 	cmp	r2, #0
102cccfc:	0a000006 	beq	102ccd1c <CallBack_SerialPort_Hdlr+0x184>
102ccd00:	e1500005 	cmp	r0, r5
102ccd04:	83a02000 	movhi	r2, #0
102ccd08:	93a02001 	movls	r2, #1
102ccd0c:	e3500000 	cmp	r0, #0
102ccd10:	03a02000 	moveq	r2, #0
102ccd14:	e3520000 	cmp	r2, #0
102ccd18:	0a000004 	beq	102ccd30 <CallBack_SerialPort_Hdlr+0x198>
102ccd1c:	e1500007 	cmp	r0, r7
102ccd20:	00663000 	rsbeq	r3, r6, r0
102ccd24:	02835002 	addeq	r5, r3, #2
102ccd28:	0a000002 	beq	102ccd38 <CallBack_SerialPort_Hdlr+0x1a0>
102ccd2c:	e1a05000 	mov	r5, r0
102ccd30:	e0665005 	rsb	r5, r6, r5
102ccd34:	e2855001 	add	r5, r5, #1
102ccd38:	e59f31b0 	ldr	r3, [pc, #432]	; 102ccef0 <CallBack_SerialPort_Hdlr+0x358>
102ccd3c:	e5940810 	ldr	r0, [r4, #2064]	; 0x810
102ccd40:	e1a01006 	mov	r1, r6
102ccd44:	e1a02005 	mov	r2, r5
102ccd48:	e12fff33 	blx	r3
102ccd4c:	e5943810 	ldr	r3, [r4, #2064]	; 0x810
102ccd50:	e5843814 	str	r3, [r4, #2068]	; 0x814
102ccd54:	e5845818 	str	r5, [r4, #2072]	; 0x818
102ccd58:	ea000007 	b	102ccd7c <CallBack_SerialPort_Hdlr+0x1e4>
102ccd5c:	e59f318c 	ldr	r3, [pc, #396]	; 102ccef0 <CallBack_SerialPort_Hdlr+0x358>
102ccd60:	e5940810 	ldr	r0, [r4, #2064]	; 0x810
102ccd64:	e1a01006 	mov	r1, r6
102ccd68:	e1a02009 	mov	r2, r9
102ccd6c:	e12fff33 	blx	r3
102ccd70:	e5943810 	ldr	r3, [r4, #2064]	; 0x810
102ccd74:	e5843814 	str	r3, [r4, #2068]	; 0x814
102ccd78:	e5849818 	str	r9, [r4, #2072]	; 0x818
102ccd7c:	e5d4381c 	ldrb	r3, [r4, #2076]	; 0x81c
102ccd80:	e3530001 	cmp	r3, #1
102ccd84:	1a000029 	bne	102cce30 <CallBack_SerialPort_Hdlr+0x298>
102ccd88:	e59f0164 	ldr	r0, [pc, #356]	; 102ccef4 <CallBack_SerialPort_Hdlr+0x35c>
102ccd8c:	e5941814 	ldr	r1, [r4, #2068]	; 0x814
102ccd90:	e5942818 	ldr	r2, [r4, #2072]	; 0x818
102ccd94:	e59f315c 	ldr	r3, [pc, #348]	; 102ccef8 <CallBack_SerialPort_Hdlr+0x360>
102ccd98:	e12fff33 	blx	r3
102ccd9c:	e3500000 	cmp	r0, #0
102ccda0:	0a00003c 	beq	102cce98 <CallBack_SerialPort_Hdlr+0x300>
102ccda4:	e5943c20 	ldr	r3, [r4, #3104]	; 0xc20
102ccda8:	e5940814 	ldr	r0, [r4, #2068]	; 0x814
102ccdac:	e3530000 	cmp	r3, #0
102ccdb0:	059f3144 	ldreq	r3, [pc, #324]	; 102ccefc <CallBack_SerialPort_Hdlr+0x364>
102ccdb4:	e5941818 	ldr	r1, [r4, #2072]	; 0x818
102ccdb8:	e5942c24 	ldr	r2, [r4, #3108]	; 0xc24
102ccdbc:	e12fff33 	blx	r3
102ccdc0:	e5840c28 	str	r0, [r4, #3112]	; 0xc28
102ccdc4:	e5943c28 	ldr	r3, [r4, #3112]	; 0xc28
102ccdc8:	e3530001 	cmp	r3, #1
102ccdcc:	0a000012 	beq	102cce1c <CallBack_SerialPort_Hdlr+0x284>
102ccdd0:	e5942c20 	ldr	r2, [r4, #3104]	; 0xc20
102ccdd4:	e3520000 	cmp	r2, #0
102ccdd8:	13a02000 	movne	r2, #0
102ccddc:	15842c20 	strne	r2, [r4, #3104]	; 0xc20
102ccde0:	e3530000 	cmp	r3, #0
102ccde4:	0a000001 	beq	102ccdf0 <CallBack_SerialPort_Hdlr+0x258>
102ccde8:	e3730001 	cmn	r3, #1
102ccdec:	1a000001 	bne	102ccdf8 <CallBack_SerialPort_Hdlr+0x260>
102ccdf0:	e59f20d4 	ldr	r2, [pc, #212]	; 102ccecc <CallBack_SerialPort_Hdlr+0x334>
102ccdf4:	e5823000 	str	r3, [r2]
102ccdf8:	e59f3100 	ldr	r3, [pc, #256]	; 102ccf00 <CallBack_SerialPort_Hdlr+0x368>
102ccdfc:	e12fff33 	blx	r3
102cce00:	e3a03000 	mov	r3, #0
102cce04:	e5c4381c 	strb	r3, [r4, #2076]	; 0x81c
102cce08:	e5940004 	ldr	r0, [r4, #4]
102cce0c:	e3a01001 	mov	r1, #1
102cce10:	e59f30ec 	ldr	r3, [pc, #236]	; 102ccf04 <CallBack_SerialPort_Hdlr+0x36c>
102cce14:	e12fff33 	blx	r3
102cce18:	ea00001e 	b	102cce98 <CallBack_SerialPort_Hdlr+0x300>
102cce1c:	e5940814 	ldr	r0, [r4, #2068]	; 0x814
102cce20:	e59f30e0 	ldr	r3, [pc, #224]	; 102ccf08 <CallBack_SerialPort_Hdlr+0x370>
102cce24:	e12fff33 	blx	r3
102cce28:	e3500000 	cmp	r0, #0
102cce2c:	0a000019 	beq	102cce98 <CallBack_SerialPort_Hdlr+0x300>
102cce30:	e59f30d4 	ldr	r3, [pc, #212]	; 102ccf0c <CallBack_SerialPort_Hdlr+0x374>
102cce34:	e5d33000 	ldrb	r3, [r3]
102cce38:	e3530000 	cmp	r3, #0
102cce3c:	0a000015 	beq	102cce98 <CallBack_SerialPort_Hdlr+0x300>
102cce40:	e5945818 	ldr	r5, [r4, #2072]	; 0x818
102cce44:	e59f30c4 	ldr	r3, [pc, #196]	; 102ccf10 <CallBack_SerialPort_Hdlr+0x378>
102cce48:	e2857001 	add	r7, r5, #1
102cce4c:	e1a00007 	mov	r0, r7
102cce50:	e12fff33 	blx	r3
102cce54:	e2506000 	subs	r6, r0, #0
102cce58:	0a00000e 	beq	102cce98 <CallBack_SerialPort_Hdlr+0x300>
102cce5c:	e3a01000 	mov	r1, #0
102cce60:	e1a02007 	mov	r2, r7
102cce64:	e12fff38 	blx	r8
102cce68:	e5941814 	ldr	r1, [r4, #2068]	; 0x814
102cce6c:	e1a02005 	mov	r2, r5
102cce70:	e59f3078 	ldr	r3, [pc, #120]	; 102ccef0 <CallBack_SerialPort_Hdlr+0x358>
102cce74:	e1a00006 	mov	r0, r6
102cce78:	e12fff33 	blx	r3
102cce7c:	e59f3090 	ldr	r3, [pc, #144]	; 102ccf14 <CallBack_SerialPort_Hdlr+0x37c>
102cce80:	e3a01002 	mov	r1, #2
102cce84:	e5930000 	ldr	r0, [r3]
102cce88:	e1a02005 	mov	r2, r5
102cce8c:	e1a03006 	mov	r3, r6
102cce90:	e59fc080 	ldr	ip, [pc, #128]	; 102ccf18 <CallBack_SerialPort_Hdlr+0x380>
102cce94:	e12fff3c 	blx	ip
102cce98:	e5943818 	ldr	r3, [r4, #2072]	; 0x818
102cce9c:	e594280c 	ldr	r2, [r4, #2060]	; 0x80c
102ccea0:	e0822003 	add	r2, r2, r3
102ccea4:	e584280c 	str	r2, [r4, #2060]	; 0x80c
102ccea8:	e5942808 	ldr	r2, [r4, #2056]	; 0x808
102cceac:	e0633002 	rsb	r3, r3, r2
102cceb0:	e3530000 	cmp	r3, #0
102cceb4:	e5843808 	str	r3, [r4, #2056]	; 0x808
102cceb8:	1affff5d 	bne	102ccc34 <CallBack_SerialPort_Hdlr+0x9c>
102ccebc:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
102ccec0:	f03d2394 	.word	0xf03d2394
102ccec4:	102cd6b0 	.word	0x102cd6b0
102ccec8:	102cdf2c 	.word	0x102cdf2c
102ccecc:	f03d238c 	.word	0xf03d238c
102cced0:	102cdf9c 	.word	0x102cdf9c
102cced4:	102c9ff4 	.word	0x102c9ff4
102cced8:	00000801 	.word	0x00000801
102ccedc:	102cbda0 	.word	0x102cbda0
102ccee0:	102cf6c5 	.word	0x102cf6c5
102ccee4:	102cd7c0 	.word	0x102cd7c0
102ccee8:	102cf6e7 	.word	0x102cf6e7
102cceec:	102cf6c6 	.word	0x102cf6c6
102ccef0:	102cd738 	.word	0x102cd738
102ccef4:	f03d2ba9 	.word	0xf03d2ba9
102ccef8:	102cd640 	.word	0x102cd640
102ccefc:	102c7090 	.word	0x102c7090
102ccf00:	102ccb18 	.word	0x102ccb18
102ccf04:	102cdc34 	.word	0x102cdc34
102ccf08:	102cbd20 	.word	0x102cbd20
102ccf0c:	f03d2388 	.word	0xf03d2388
102ccf10:	102cc7f4 	.word	0x102cc7f4
102ccf14:	f03d203c 	.word	0xf03d203c
102ccf18:	102cda04 	.word	0x102cda04

Disassembly of section .text.proc_reserved1:

102ccf1c <proc_reserved1>:
102ccf1c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
102ccf20:	e59f118c 	ldr	r1, [pc, #396]	; 102cd0b4 <proc_reserved1+0x198>
102ccf24:	e24dd014 	sub	sp, sp, #20
102ccf28:	e1a04000 	mov	r4, r0
102ccf2c:	e3a02000 	mov	r2, #0
102ccf30:	e59f3180 	ldr	r3, [pc, #384]	; 102cd0b8 <proc_reserved1+0x19c>
102ccf34:	e3a00002 	mov	r0, #2
102ccf38:	e12fff33 	blx	r3
102ccf3c:	e59f5178 	ldr	r5, [pc, #376]	; 102cd0bc <proc_reserved1+0x1a0>
102ccf40:	e3a01000 	mov	r1, #0
102ccf44:	e3a02001 	mov	r2, #1
102ccf48:	e59f3170 	ldr	r3, [pc, #368]	; 102cd0c0 <proc_reserved1+0x1a4>
102ccf4c:	e3a00002 	mov	r0, #2
102ccf50:	e12fff33 	blx	r3
102ccf54:	e59f3168 	ldr	r3, [pc, #360]	; 102cd0c4 <proc_reserved1+0x1a8>
102ccf58:	e59f0168 	ldr	r0, [pc, #360]	; 102cd0c8 <proc_reserved1+0x1ac>
102ccf5c:	e585400c 	str	r4, [r5, #12]
102ccf60:	e12fff33 	blx	r3
102ccf64:	e59f4160 	ldr	r4, [pc, #352]	; 102cd0cc <proc_reserved1+0x1b0>
102ccf68:	e59f3160 	ldr	r3, [pc, #352]	; 102cd0d0 <proc_reserved1+0x1b4>
102ccf6c:	e1a06004 	mov	r6, r4
102ccf70:	e5840c30 	str	r0, [r4, #3120]	; 0xc30
102ccf74:	e59f0158 	ldr	r0, [pc, #344]	; 102cd0d4 <proc_reserved1+0x1b8>
102ccf78:	e12fff33 	blx	r3
102ccf7c:	e59f1154 	ldr	r1, [pc, #340]	; 102cd0d8 <proc_reserved1+0x1bc>
102ccf80:	e3a02000 	mov	r2, #0
102ccf84:	e59f3150 	ldr	r3, [pc, #336]	; 102cd0dc <proc_reserved1+0x1c0>
102ccf88:	e5840004 	str	r0, [r4, #4]
102ccf8c:	e5950000 	ldr	r0, [r5]
102ccf90:	e12fff33 	blx	r3
102ccf94:	e3a00000 	mov	r0, #0
102ccf98:	e59f1140 	ldr	r1, [pc, #320]	; 102cd0e0 <proc_reserved1+0x1c4>
102ccf9c:	e1a02000 	mov	r2, r0
102ccfa0:	e1a03000 	mov	r3, r0
102ccfa4:	e59fc138 	ldr	ip, [pc, #312]	; 102cd0e4 <proc_reserved1+0x1c8>
102ccfa8:	e12fff3c 	blx	ip
102ccfac:	e59f0134 	ldr	r0, [pc, #308]	; 102cd0e8 <proc_reserved1+0x1cc>
102ccfb0:	e59f3134 	ldr	r3, [pc, #308]	; 102cd0ec <proc_reserved1+0x1d0>
102ccfb4:	e12fff33 	blx	r3
102ccfb8:	e5840810 	str	r0, [r4, #2064]	; 0x810
102ccfbc:	e1a0000d 	mov	r0, sp
102ccfc0:	e59f3128 	ldr	r3, [pc, #296]	; 102cd0f0 <proc_reserved1+0x1d4>
102ccfc4:	e12fff33 	blx	r3
102ccfc8:	e59d5000 	ldr	r5, [sp]
102ccfcc:	e3550001 	cmp	r5, #1
102ccfd0:	1afffff9 	bne	102ccfbc <proc_reserved1+0xa0>
102ccfd4:	e59f0118 	ldr	r0, [pc, #280]	; 102cd0f4 <proc_reserved1+0x1d8>
102ccfd8:	e59f1118 	ldr	r1, [pc, #280]	; 102cd0f8 <proc_reserved1+0x1dc>
102ccfdc:	e3a02004 	mov	r2, #4
102ccfe0:	e59f3114 	ldr	r3, [pc, #276]	; 102cd0fc <proc_reserved1+0x1e0>
102ccfe4:	e12fff33 	blx	r3
102ccfe8:	e2507000 	subs	r7, r0, #0
102ccfec:	1a00000e 	bne	102cd02c <proc_reserved1+0x110>
102ccff0:	e3a00002 	mov	r0, #2
102ccff4:	e59f3104 	ldr	r3, [pc, #260]	; 102cd100 <proc_reserved1+0x1e4>
102ccff8:	e12fff33 	blx	r3
102ccffc:	e5847000 	str	r7, [r4]
102cd000:	e3500000 	cmp	r0, #0
102cd004:	aa000003 	bge	102cd018 <proc_reserved1+0xfc>
102cd008:	e59f30f4 	ldr	r3, [pc, #244]	; 102cd104 <proc_reserved1+0x1e8>
102cd00c:	e12fff33 	blx	r3
102cd010:	e3e03000 	mvn	r3, #0
102cd014:	e5843000 	str	r3, [r4]
102cd018:	e5960004 	ldr	r0, [r6, #4]
102cd01c:	e3a01001 	mov	r1, #1
102cd020:	e59f30e0 	ldr	r3, [pc, #224]	; 102cd108 <proc_reserved1+0x1ec>
102cd024:	e12fff33 	blx	r3
102cd028:	eaffffe3 	b	102ccfbc <proc_reserved1+0xa0>
102cd02c:	e59f30d8 	ldr	r3, [pc, #216]	; 102cd10c <proc_reserved1+0x1f0>
102cd030:	e59f00bc 	ldr	r0, [pc, #188]	; 102cd0f4 <proc_reserved1+0x1d8>
102cd034:	e12fff33 	blx	r3
102cd038:	e59f10b4 	ldr	r1, [pc, #180]	; 102cd0f4 <proc_reserved1+0x1d8>
102cd03c:	e59f30cc 	ldr	r3, [pc, #204]	; 102cd110 <proc_reserved1+0x1f4>
102cd040:	e1a02000 	mov	r2, r0
102cd044:	e3a00002 	mov	r0, #2
102cd048:	e12fff33 	blx	r3
102cd04c:	e3500000 	cmp	r0, #0
102cd050:	aa000007 	bge	102cd074 <proc_reserved1+0x158>
102cd054:	e59f30a8 	ldr	r3, [pc, #168]	; 102cd104 <proc_reserved1+0x1e8>
102cd058:	e12fff33 	blx	r3
102cd05c:	e3e03000 	mvn	r3, #0
102cd060:	e5843000 	str	r3, [r4]
102cd064:	e5940004 	ldr	r0, [r4, #4]
102cd068:	e1a01005 	mov	r1, r5
102cd06c:	e59f3094 	ldr	r3, [pc, #148]	; 102cd108 <proc_reserved1+0x1ec>
102cd070:	e12fff33 	blx	r3
102cd074:	e59f2040 	ldr	r2, [pc, #64]	; 102cd0bc <proc_reserved1+0x1a0>
102cd078:	e5923004 	ldr	r3, [r2, #4]
102cd07c:	e3530000 	cmp	r3, #0
102cd080:	059f308c 	ldreq	r3, [pc, #140]	; 102cd114 <proc_reserved1+0x1f8>
102cd084:	05823004 	streq	r3, [r2, #4]
102cd088:	e5d22009 	ldrb	r2, [r2, #9]
102cd08c:	e59f3028 	ldr	r3, [pc, #40]	; 102cd0bc <proc_reserved1+0x1a0>
102cd090:	e3520001 	cmp	r2, #1
102cd094:	0affffc8 	beq	102ccfbc <proc_reserved1+0xa0>
102cd098:	e3a02001 	mov	r2, #1
102cd09c:	e5c32009 	strb	r2, [r3, #9]
102cd0a0:	e8930003 	ldm	r3, {r0, r1}
102cd0a4:	e5d32008 	ldrb	r2, [r3, #8]
102cd0a8:	e59f3068 	ldr	r3, [pc, #104]	; 102cd118 <proc_reserved1+0x1fc>
102cd0ac:	e12fff33 	blx	r3
102cd0b0:	eaffffc1 	b	102ccfbc <proc_reserved1+0xa0>
102cd0b4:	102ccb98 	.word	0x102ccb98
102cd0b8:	102cdddc 	.word	0x102cdddc
102cd0bc:	f03d2040 	.word	0xf03d2040
102cd0c0:	102cde4c 	.word	0x102cde4c
102cd0c4:	102cda7c 	.word	0x102cda7c
102cd0c8:	102cf6cd 	.word	0x102cf6cd
102cd0cc:	f03d238c 	.word	0xf03d238c
102cd0d0:	102cdb78 	.word	0x102cdb78
102cd0d4:	102cf6d7 	.word	0x102cf6d7
102cd0d8:	102ccb4c 	.word	0x102ccb4c
102cd0dc:	102cdc9c 	.word	0x102cdc9c
102cd0e0:	00001001 	.word	0x00001001
102cd0e4:	102cda04 	.word	0x102cda04
102cd0e8:	00000801 	.word	0x00000801
102cd0ec:	102cc7f4 	.word	0x102cc7f4
102cd0f0:	102cd9a4 	.word	0x102cd9a4
102cd0f4:	f03d2ba9 	.word	0xf03d2ba9
102cd0f8:	102cf6e4 	.word	0x102cf6e4
102cd0fc:	102cd640 	.word	0x102cd640
102cd100:	102ce004 	.word	0x102ce004
102cd104:	102ccb18 	.word	0x102ccb18
102cd108:	102cdc34 	.word	0x102cdc34
102cd10c:	102cd560 	.word	0x102cd560
102cd110:	102cdebc 	.word	0x102cdebc
102cd114:	0002bf20 	.word	0x0002bf20
102cd118:	102cdd0c 	.word	0x102cdd0c

Disassembly of section .text.Ql_RIL_SendATCmd:

102cd11c <Ql_RIL_SendATCmd>:
102cd11c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
102cd120:	e1a04000 	mov	r4, r0
102cd124:	e1a08003 	mov	r8, r3
102cd128:	e3e00000 	mvn	r0, #0
102cd12c:	e59f31f4 	ldr	r3, [pc, #500]	; 102cd328 <Ql_RIL_SendATCmd+0x20c>
102cd130:	e1a07002 	mov	r7, r2
102cd134:	e12fff33 	blx	r3
102cd138:	e59f31ec 	ldr	r3, [pc, #492]	; 102cd32c <Ql_RIL_SendATCmd+0x210>
102cd13c:	e5d33c2c 	ldrb	r3, [r3, #3116]	; 0xc2c
102cd140:	e3530000 	cmp	r3, #0
102cd144:	0a000059 	beq	102cd2b0 <Ql_RIL_SendATCmd+0x194>
102cd148:	e3540000 	cmp	r4, #0
102cd14c:	13a03000 	movne	r3, #0
102cd150:	159f21d8 	ldrne	r2, [pc, #472]	; 102cd330 <Ql_RIL_SendATCmd+0x214>
102cd154:	1a000001 	bne	102cd160 <Ql_RIL_SendATCmd+0x44>
102cd158:	e3e06003 	mvn	r6, #3
102cd15c:	ea00006f 	b	102cd320 <Ql_RIL_SendATCmd+0x204>
102cd160:	e5d40000 	ldrb	r0, [r4]
102cd164:	e7d31002 	ldrb	r1, [r3, r2]
102cd168:	e1500001 	cmp	r0, r1
102cd16c:	0afffff9 	beq	102cd158 <Ql_RIL_SendATCmd+0x3c>
102cd170:	e2833001 	add	r3, r3, #1
102cd174:	e3530004 	cmp	r3, #4
102cd178:	1afffff8 	bne	102cd160 <Ql_RIL_SendATCmd+0x44>
102cd17c:	ea00004f 	b	102cd2c0 <Ql_RIL_SendATCmd+0x1a4>
102cd180:	e1a00004 	mov	r0, r4
102cd184:	e59f11a8 	ldr	r1, [pc, #424]	; 102cd334 <Ql_RIL_SendATCmd+0x218>
102cd188:	e12fff35 	blx	r5
102cd18c:	e59f61a4 	ldr	r6, [pc, #420]	; 102cd338 <Ql_RIL_SendATCmd+0x21c>
102cd190:	e3a05000 	mov	r5, #0
102cd194:	e59fa1a0 	ldr	sl, [pc, #416]	; 102cd33c <Ql_RIL_SendATCmd+0x220>
102cd198:	e59f91a0 	ldr	r9, [pc, #416]	; 102cd340 <Ql_RIL_SendATCmd+0x224>
102cd19c:	e3500000 	cmp	r0, #0
102cd1a0:	13a03000 	movne	r3, #0
102cd1a4:	15c03000 	strbne	r3, [r0]
102cd1a8:	ea000005 	b	102cd1c4 <Ql_RIL_SendATCmd+0xa8>
102cd1ac:	e1a00004 	mov	r0, r4
102cd1b0:	e79a1105 	ldr	r1, [sl, r5, lsl #2]
102cd1b4:	e12fff39 	blx	r9
102cd1b8:	e3500000 	cmp	r0, #0
102cd1bc:	1a00003d 	bne	102cd2b8 <Ql_RIL_SendATCmd+0x19c>
102cd1c0:	e2855001 	add	r5, r5, #1
102cd1c4:	e12fff36 	blx	r6
102cd1c8:	e1550000 	cmp	r5, r0
102cd1cc:	3afffff6 	bcc	102cd1ac <Ql_RIL_SendATCmd+0x90>
102cd1d0:	ea000042 	b	102cd2e0 <Ql_RIL_SendATCmd+0x1c4>
102cd1d4:	e1a00004 	mov	r0, r4
102cd1d8:	e59f1164 	ldr	r1, [pc, #356]	; 102cd344 <Ql_RIL_SendATCmd+0x228>
102cd1dc:	e59f3164 	ldr	r3, [pc, #356]	; 102cd348 <Ql_RIL_SendATCmd+0x22c>
102cd1e0:	e12fff33 	blx	r3
102cd1e4:	e59f9160 	ldr	r9, [pc, #352]	; 102cd34c <Ql_RIL_SendATCmd+0x230>
102cd1e8:	e59fb160 	ldr	fp, [pc, #352]	; 102cd350 <Ql_RIL_SendATCmd+0x234>
102cd1ec:	e3500000 	cmp	r0, #0
102cd1f0:	0a00000b 	beq	102cd224 <Ql_RIL_SendATCmd+0x108>
102cd1f4:	e0646000 	rsb	r6, r4, r0
102cd1f8:	e1a01004 	mov	r1, r4
102cd1fc:	e1a02006 	mov	r2, r6
102cd200:	e1a00005 	mov	r0, r5
102cd204:	e12fff39 	blx	r9
102cd208:	e1a00005 	mov	r0, r5
102cd20c:	e12fff3b 	blx	fp
102cd210:	e0850006 	add	r0, r5, r6
102cd214:	e0841006 	add	r1, r4, r6
102cd218:	e066200a 	rsb	r2, r6, sl
102cd21c:	e12fff39 	blx	r9
102cd220:	ea000005 	b	102cd23c <Ql_RIL_SendATCmd+0x120>
102cd224:	e1a00005 	mov	r0, r5
102cd228:	e1a01004 	mov	r1, r4
102cd22c:	e1a0200a 	mov	r2, sl
102cd230:	e12fff39 	blx	r9
102cd234:	e1a00005 	mov	r0, r5
102cd238:	e12fff3b 	blx	fp
102cd23c:	e59f40e8 	ldr	r4, [pc, #232]	; 102cd32c <Ql_RIL_SendATCmd+0x210>
102cd240:	e3a0300d 	mov	r3, #13
102cd244:	e084a00a 	add	sl, r4, sl
102cd248:	e5ca381d 	strb	r3, [sl, #2077]	; 0x81d
102cd24c:	e59f3100 	ldr	r3, [pc, #256]	; 102cd354 <Ql_RIL_SendATCmd+0x238>
102cd250:	e3a05000 	mov	r5, #0
102cd254:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
102cd258:	e3a06001 	mov	r6, #1
102cd25c:	e5832004 	str	r2, [r3, #4]
102cd260:	e1a01006 	mov	r1, r6
102cd264:	e1a02005 	mov	r2, r5
102cd268:	e59fc0e8 	ldr	ip, [pc, #232]	; 102cd358 <Ql_RIL_SendATCmd+0x23c>
102cd26c:	e593000c 	ldr	r0, [r3, #12]
102cd270:	e1a03005 	mov	r3, r5
102cd274:	e5c4681c 	strb	r6, [r4, #2076]	; 0x81c
102cd278:	e5ca581e 	strb	r5, [sl, #2078]	; 0x81e
102cd27c:	e5848c24 	str	r8, [r4, #3108]	; 0xc24
102cd280:	e5847c20 	str	r7, [r4, #3104]	; 0xc20
102cd284:	e12fff3c 	blx	ip
102cd288:	e1a01006 	mov	r1, r6
102cd28c:	e5940004 	ldr	r0, [r4, #4]
102cd290:	e59f30c4 	ldr	r3, [pc, #196]	; 102cd35c <Ql_RIL_SendATCmd+0x240>
102cd294:	e12fff33 	blx	r3
102cd298:	e5940c30 	ldr	r0, [r4, #3120]	; 0xc30
102cd29c:	e59f30bc 	ldr	r3, [pc, #188]	; 102cd360 <Ql_RIL_SendATCmd+0x244>
102cd2a0:	e5946000 	ldr	r6, [r4]
102cd2a4:	e5c4581c 	strb	r5, [r4, #2076]	; 0x81c
102cd2a8:	e12fff33 	blx	r3
102cd2ac:	ea00001b 	b	102cd320 <Ql_RIL_SendATCmd+0x204>
102cd2b0:	e3e06004 	mvn	r6, #4
102cd2b4:	ea000019 	b	102cd320 <Ql_RIL_SendATCmd+0x204>
102cd2b8:	e59f60a4 	ldr	r6, [pc, #164]	; 102cd364 <Ql_RIL_SendATCmd+0x248>
102cd2bc:	ea000017 	b	102cd320 <Ql_RIL_SendATCmd+0x204>
102cd2c0:	e1a00004 	mov	r0, r4
102cd2c4:	e59f109c 	ldr	r1, [pc, #156]	; 102cd368 <Ql_RIL_SendATCmd+0x24c>
102cd2c8:	e59f5078 	ldr	r5, [pc, #120]	; 102cd348 <Ql_RIL_SendATCmd+0x22c>
102cd2cc:	e12fff35 	blx	r5
102cd2d0:	e3500000 	cmp	r0, #0
102cd2d4:	13a03000 	movne	r3, #0
102cd2d8:	15c03000 	strbne	r3, [r0]
102cd2dc:	eaffffa7 	b	102cd180 <Ql_RIL_SendATCmd+0x64>
102cd2e0:	e59f3044 	ldr	r3, [pc, #68]	; 102cd32c <Ql_RIL_SendATCmd+0x210>
102cd2e4:	e59f5080 	ldr	r5, [pc, #128]	; 102cd36c <Ql_RIL_SendATCmd+0x250>
102cd2e8:	e5930c30 	ldr	r0, [r3, #3120]	; 0xc30
102cd2ec:	e59f307c 	ldr	r3, [pc, #124]	; 102cd370 <Ql_RIL_SendATCmd+0x254>
102cd2f0:	e12fff33 	blx	r3
102cd2f4:	e3a01000 	mov	r1, #0
102cd2f8:	e3a02b01 	mov	r2, #1024	; 0x400
102cd2fc:	e59f3070 	ldr	r3, [pc, #112]	; 102cd374 <Ql_RIL_SendATCmd+0x258>
102cd300:	e1a00005 	mov	r0, r5
102cd304:	e12fff33 	blx	r3
102cd308:	e1a00004 	mov	r0, r4
102cd30c:	e59f3064 	ldr	r3, [pc, #100]	; 102cd378 <Ql_RIL_SendATCmd+0x25c>
102cd310:	e12fff33 	blx	r3
102cd314:	e250a000 	subs	sl, r0, #0
102cd318:	1affffad 	bne	102cd1d4 <Ql_RIL_SendATCmd+0xb8>
102cd31c:	eaffff8d 	b	102cd158 <Ql_RIL_SendATCmd+0x3c>
102cd320:	e1a00006 	mov	r0, r6
102cd324:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
102cd328:	102c707c 	.word	0x102c707c
102cd32c:	f03d238c 	.word	0xf03d238c
102cd330:	102ceb4e 	.word	0x102ceb4e
102cd334:	102cf6c6 	.word	0x102cf6c6
102cd338:	102ca5d4 	.word	0x102ca5d4
102cd33c:	f03d2004 	.word	0xf03d2004
102cd340:	102cbda0 	.word	0x102cbda0
102cd344:	102cf6e9 	.word	0x102cf6e9
102cd348:	102cd7c0 	.word	0x102cd7c0
102cd34c:	102cd738 	.word	0x102cd738
102cd350:	102cbdf0 	.word	0x102cbdf0
102cd354:	f03d2040 	.word	0xf03d2040
102cd358:	102cda04 	.word	0x102cda04
102cd35c:	102cdbcc 	.word	0x102cdbcc
102cd360:	102cdb24 	.word	0x102cdb24
102cd364:	ffffd8f0 	.word	0xffffd8f0
102cd368:	102cf6e7 	.word	0x102cf6e7
102cd36c:	f03d2ba9 	.word	0xf03d2ba9
102cd370:	102cdad0 	.word	0x102cdad0
102cd374:	102cd6b0 	.word	0x102cd6b0
102cd378:	102cd560 	.word	0x102cd560

Disassembly of section .text.Ql_RIL_WriteDataToCore:

102cd37c <Ql_RIL_WriteDataToCore>:
102cd37c:	e92d4008 	push	{r3, lr}
102cd380:	e1a03000 	mov	r3, r0
102cd384:	e1a02001 	mov	r2, r1
102cd388:	e3a00002 	mov	r0, #2
102cd38c:	e1a01003 	mov	r1, r3
102cd390:	e59f3004 	ldr	r3, [pc, #4]	; 102cd39c <Ql_RIL_WriteDataToCore+0x20>
102cd394:	e12fff33 	blx	r3
102cd398:	e8bd8008 	pop	{r3, pc}
102cd39c:	102cdebc 	.word	0x102cdebc

Disassembly of section .text.Ql_atof:

102cd3a0 <Ql_atof>:
102cd3a0:	e92d4037 	push	{r0, r1, r2, r4, r5, lr}
102cd3a4:	e59f4074 	ldr	r4, [pc, #116]	; 102cd420 <Ql_atof+0x80>
102cd3a8:	e1a05000 	mov	r5, r0
102cd3ac:	e5943008 	ldr	r3, [r4, #8]
102cd3b0:	e3530000 	cmp	r3, #0
102cd3b4:	1a000013 	bne	102cd408 <Ql_atof+0x68>
102cd3b8:	e59f1064 	ldr	r1, [pc, #100]	; 102cd424 <Ql_atof+0x84>
102cd3bc:	e3a02008 	mov	r2, #8
102cd3c0:	e59f3060 	ldr	r3, [pc, #96]	; 102cd428 <Ql_atof+0x88>
102cd3c4:	e1a0000d 	mov	r0, sp
102cd3c8:	e12fff33 	blx	r3
102cd3cc:	e59f3058 	ldr	r3, [pc, #88]	; 102cd42c <Ql_atof+0x8c>
102cd3d0:	e1a0000d 	mov	r0, sp
102cd3d4:	e5933000 	ldr	r3, [r3]
102cd3d8:	e12fff33 	blx	r3
102cd3dc:	e3500000 	cmp	r0, #0
102cd3e0:	15840008 	strne	r0, [r4, #8]
102cd3e4:	1a000007 	bne	102cd408 <Ql_atof+0x68>
102cd3e8:	e59f3040 	ldr	r3, [pc, #64]	; 102cd430 <Ql_atof+0x90>
102cd3ec:	e1a0100d 	mov	r1, sp
102cd3f0:	e5933000 	ldr	r3, [r3]
102cd3f4:	e59f0038 	ldr	r0, [pc, #56]	; 102cd434 <Ql_atof+0x94>
102cd3f8:	e12fff33 	blx	r3
102cd3fc:	e3a00000 	mov	r0, #0
102cd400:	e3a01000 	mov	r1, #0
102cd404:	ea000003 	b	102cd418 <Ql_atof+0x78>
102cd408:	e59f3010 	ldr	r3, [pc, #16]	; 102cd420 <Ql_atof+0x80>
102cd40c:	e1a00005 	mov	r0, r5
102cd410:	e5933008 	ldr	r3, [r3, #8]
102cd414:	e12fff33 	blx	r3
102cd418:	e28dd00c 	add	sp, sp, #12
102cd41c:	e8bd8030 	pop	{r4, r5, pc}
102cd420:	f03d2fc0 	.word	0xf03d2fc0
102cd424:	102cf6fe 	.word	0x102cf6fe
102cd428:	102cc471 	.word	0x102cc471
102cd42c:	f03d2358 	.word	0xf03d2358
102cd430:	f03d31ec 	.word	0xf03d31ec
102cd434:	f03d2024 	.word	0xf03d2024

Disassembly of section .text.Ql_strcpy:

102cd438 <Ql_strcpy>:
102cd438:	e92d40f0 	push	{r4, r5, r6, r7, lr}
102cd43c:	e59f407c 	ldr	r4, [pc, #124]	; 102cd4c0 <Ql_strcpy+0x88>
102cd440:	e24dd014 	sub	sp, sp, #20
102cd444:	e594300c 	ldr	r3, [r4, #12]
102cd448:	e1a07000 	mov	r7, r0
102cd44c:	e3530000 	cmp	r3, #0
102cd450:	e1a06001 	mov	r6, r1
102cd454:	1a000012 	bne	102cd4a4 <Ql_strcpy+0x6c>
102cd458:	e59f1064 	ldr	r1, [pc, #100]	; 102cd4c4 <Ql_strcpy+0x8c>
102cd45c:	e3a0200a 	mov	r2, #10
102cd460:	e59f3060 	ldr	r3, [pc, #96]	; 102cd4c8 <Ql_strcpy+0x90>
102cd464:	e28d0004 	add	r0, sp, #4
102cd468:	e12fff33 	blx	r3
102cd46c:	e59f3058 	ldr	r3, [pc, #88]	; 102cd4cc <Ql_strcpy+0x94>
102cd470:	e28d0004 	add	r0, sp, #4
102cd474:	e5933000 	ldr	r3, [r3]
102cd478:	e12fff33 	blx	r3
102cd47c:	e2505000 	subs	r5, r0, #0
102cd480:	1584500c 	strne	r5, [r4, #12]
102cd484:	1a000006 	bne	102cd4a4 <Ql_strcpy+0x6c>
102cd488:	e59f3040 	ldr	r3, [pc, #64]	; 102cd4d0 <Ql_strcpy+0x98>
102cd48c:	e59f0040 	ldr	r0, [pc, #64]	; 102cd4d4 <Ql_strcpy+0x9c>
102cd490:	e5933000 	ldr	r3, [r3]
102cd494:	e28d1004 	add	r1, sp, #4
102cd498:	e12fff33 	blx	r3
102cd49c:	e1a00005 	mov	r0, r5
102cd4a0:	ea000004 	b	102cd4b8 <Ql_strcpy+0x80>
102cd4a4:	e59f3014 	ldr	r3, [pc, #20]	; 102cd4c0 <Ql_strcpy+0x88>
102cd4a8:	e1a00007 	mov	r0, r7
102cd4ac:	e593300c 	ldr	r3, [r3, #12]
102cd4b0:	e1a01006 	mov	r1, r6
102cd4b4:	e12fff33 	blx	r3
102cd4b8:	e28dd014 	add	sp, sp, #20
102cd4bc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
102cd4c0:	f03d2fc0 	.word	0xf03d2fc0
102cd4c4:	102cf706 	.word	0x102cf706
102cd4c8:	102cc471 	.word	0x102cc471
102cd4cc:	f03d2358 	.word	0xf03d2358
102cd4d0:	f03d31ec 	.word	0xf03d31ec
102cd4d4:	f03d2024 	.word	0xf03d2024

Disassembly of section .text.Ql_strncpy:

102cd4d8 <Ql_strncpy>:
102cd4d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
102cd4dc:	e59f5068 	ldr	r5, [pc, #104]	; 102cd54c <Ql_strncpy+0x74>
102cd4e0:	e1a06000 	mov	r6, r0
102cd4e4:	e5953010 	ldr	r3, [r5, #16]
102cd4e8:	e1a08001 	mov	r8, r1
102cd4ec:	e3530000 	cmp	r3, #0
102cd4f0:	e1a07002 	mov	r7, r2
102cd4f4:	1a00000d 	bne	102cd530 <Ql_strncpy+0x58>
102cd4f8:	e59f3050 	ldr	r3, [pc, #80]	; 102cd550 <Ql_strncpy+0x78>
102cd4fc:	e59f0050 	ldr	r0, [pc, #80]	; 102cd554 <Ql_strncpy+0x7c>
102cd500:	e5933000 	ldr	r3, [r3]
102cd504:	e12fff33 	blx	r3
102cd508:	e2504000 	subs	r4, r0, #0
102cd50c:	15854010 	strne	r4, [r5, #16]
102cd510:	1a000006 	bne	102cd530 <Ql_strncpy+0x58>
102cd514:	e59f303c 	ldr	r3, [pc, #60]	; 102cd558 <Ql_strncpy+0x80>
102cd518:	e59f1034 	ldr	r1, [pc, #52]	; 102cd554 <Ql_strncpy+0x7c>
102cd51c:	e5933000 	ldr	r3, [r3]
102cd520:	e59f0034 	ldr	r0, [pc, #52]	; 102cd55c <Ql_strncpy+0x84>
102cd524:	e12fff33 	blx	r3
102cd528:	e1a00004 	mov	r0, r4
102cd52c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
102cd530:	e59f3014 	ldr	r3, [pc, #20]	; 102cd54c <Ql_strncpy+0x74>
102cd534:	e1a00006 	mov	r0, r6
102cd538:	e5933010 	ldr	r3, [r3, #16]
102cd53c:	e1a01008 	mov	r1, r8
102cd540:	e1a02007 	mov	r2, r7
102cd544:	e12fff33 	blx	r3
102cd548:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
102cd54c:	f03d2fc0 	.word	0xf03d2fc0
102cd550:	f03d2358 	.word	0xf03d2358
102cd554:	102cf710 	.word	0x102cf710
102cd558:	f03d31ec 	.word	0xf03d31ec
102cd55c:	f03d2024 	.word	0xf03d2024

Disassembly of section .text.Ql_strlen:

102cd560 <Ql_strlen>:
102cd560:	e92d4070 	push	{r4, r5, r6, lr}
102cd564:	e59f5058 	ldr	r5, [pc, #88]	; 102cd5c4 <Ql_strlen+0x64>
102cd568:	e1a06000 	mov	r6, r0
102cd56c:	e595301c 	ldr	r3, [r5, #28]
102cd570:	e3530000 	cmp	r3, #0
102cd574:	1a00000d 	bne	102cd5b0 <Ql_strlen+0x50>
102cd578:	e59f3048 	ldr	r3, [pc, #72]	; 102cd5c8 <Ql_strlen+0x68>
102cd57c:	e59f0048 	ldr	r0, [pc, #72]	; 102cd5cc <Ql_strlen+0x6c>
102cd580:	e5933000 	ldr	r3, [r3]
102cd584:	e12fff33 	blx	r3
102cd588:	e2504000 	subs	r4, r0, #0
102cd58c:	1585401c 	strne	r4, [r5, #28]
102cd590:	1a000006 	bne	102cd5b0 <Ql_strlen+0x50>
102cd594:	e59f3034 	ldr	r3, [pc, #52]	; 102cd5d0 <Ql_strlen+0x70>
102cd598:	e59f102c 	ldr	r1, [pc, #44]	; 102cd5cc <Ql_strlen+0x6c>
102cd59c:	e5933000 	ldr	r3, [r3]
102cd5a0:	e59f002c 	ldr	r0, [pc, #44]	; 102cd5d4 <Ql_strlen+0x74>
102cd5a4:	e12fff33 	blx	r3
102cd5a8:	e1a00004 	mov	r0, r4
102cd5ac:	e8bd8070 	pop	{r4, r5, r6, pc}
102cd5b0:	e59f300c 	ldr	r3, [pc, #12]	; 102cd5c4 <Ql_strlen+0x64>
102cd5b4:	e1a00006 	mov	r0, r6
102cd5b8:	e593301c 	ldr	r3, [r3, #28]
102cd5bc:	e12fff33 	blx	r3
102cd5c0:	e8bd8070 	pop	{r4, r5, r6, pc}
102cd5c4:	f03d2fc0 	.word	0xf03d2fc0
102cd5c8:	f03d2358 	.word	0xf03d2358
102cd5cc:	102cf730 	.word	0x102cf730
102cd5d0:	f03d31ec 	.word	0xf03d31ec
102cd5d4:	f03d2024 	.word	0xf03d2024

Disassembly of section .text.Ql_strcmp:

102cd5d8 <Ql_strcmp>:
102cd5d8:	e92d4070 	push	{r4, r5, r6, lr}
102cd5dc:	e59f404c 	ldr	r4, [pc, #76]	; 102cd630 <Ql_strcmp+0x58>
102cd5e0:	e1a05000 	mov	r5, r0
102cd5e4:	e5943020 	ldr	r3, [r4, #32]
102cd5e8:	e1a06001 	mov	r6, r1
102cd5ec:	e3530000 	cmp	r3, #0
102cd5f0:	1a000006 	bne	102cd610 <Ql_strcmp+0x38>
102cd5f4:	e59f3038 	ldr	r3, [pc, #56]	; 102cd634 <Ql_strcmp+0x5c>
102cd5f8:	e59f0038 	ldr	r0, [pc, #56]	; 102cd638 <Ql_strcmp+0x60>
102cd5fc:	e5933000 	ldr	r3, [r3]
102cd600:	e12fff33 	blx	r3
102cd604:	e3500000 	cmp	r0, #0
102cd608:	0a000006 	beq	102cd628 <Ql_strcmp+0x50>
102cd60c:	e5840020 	str	r0, [r4, #32]
102cd610:	e59f3018 	ldr	r3, [pc, #24]	; 102cd630 <Ql_strcmp+0x58>
102cd614:	e1a00005 	mov	r0, r5
102cd618:	e5933020 	ldr	r3, [r3, #32]
102cd61c:	e1a01006 	mov	r1, r6
102cd620:	e12fff33 	blx	r3
102cd624:	e8bd8070 	pop	{r4, r5, r6, pc}
102cd628:	e59f000c 	ldr	r0, [pc, #12]	; 102cd63c <Ql_strcmp+0x64>
102cd62c:	e8bd8070 	pop	{r4, r5, r6, pc}
102cd630:	f03d2fc0 	.word	0xf03d2fc0
102cd634:	f03d2358 	.word	0xf03d2358
102cd638:	102cf73a 	.word	0x102cf73a
102cd63c:	ffffd8f0 	.word	0xffffd8f0

Disassembly of section .text.Ql_strncmp:

102cd640 <Ql_strncmp>:
102cd640:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
102cd644:	e59f4054 	ldr	r4, [pc, #84]	; 102cd6a0 <Ql_strncmp+0x60>
102cd648:	e1a05000 	mov	r5, r0
102cd64c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
102cd650:	e1a07001 	mov	r7, r1
102cd654:	e3530000 	cmp	r3, #0
102cd658:	e1a06002 	mov	r6, r2
102cd65c:	1a000006 	bne	102cd67c <Ql_strncmp+0x3c>
102cd660:	e59f303c 	ldr	r3, [pc, #60]	; 102cd6a4 <Ql_strncmp+0x64>
102cd664:	e59f003c 	ldr	r0, [pc, #60]	; 102cd6a8 <Ql_strncmp+0x68>
102cd668:	e5933000 	ldr	r3, [r3]
102cd66c:	e12fff33 	blx	r3
102cd670:	e3500000 	cmp	r0, #0
102cd674:	0a000007 	beq	102cd698 <Ql_strncmp+0x58>
102cd678:	e5840024 	str	r0, [r4, #36]	; 0x24
102cd67c:	e59f301c 	ldr	r3, [pc, #28]	; 102cd6a0 <Ql_strncmp+0x60>
102cd680:	e1a00005 	mov	r0, r5
102cd684:	e5933024 	ldr	r3, [r3, #36]	; 0x24
102cd688:	e1a01007 	mov	r1, r7
102cd68c:	e1a02006 	mov	r2, r6
102cd690:	e12fff33 	blx	r3
102cd694:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
102cd698:	e59f000c 	ldr	r0, [pc, #12]	; 102cd6ac <Ql_strncmp+0x6c>
102cd69c:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
102cd6a0:	f03d2fc0 	.word	0xf03d2fc0
102cd6a4:	f03d2358 	.word	0xf03d2358
102cd6a8:	102cf744 	.word	0x102cf744
102cd6ac:	ffffd8f0 	.word	0xffffd8f0

Disassembly of section .text.Ql_memset:

102cd6b0 <Ql_memset>:
102cd6b0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
102cd6b4:	e59f5068 	ldr	r5, [pc, #104]	; 102cd724 <Ql_memset+0x74>
102cd6b8:	e1a06000 	mov	r6, r0
102cd6bc:	e5953028 	ldr	r3, [r5, #40]	; 0x28
102cd6c0:	e1a08001 	mov	r8, r1
102cd6c4:	e3530000 	cmp	r3, #0
102cd6c8:	e1a07002 	mov	r7, r2
102cd6cc:	1a00000d 	bne	102cd708 <Ql_memset+0x58>
102cd6d0:	e59f3050 	ldr	r3, [pc, #80]	; 102cd728 <Ql_memset+0x78>
102cd6d4:	e59f0050 	ldr	r0, [pc, #80]	; 102cd72c <Ql_memset+0x7c>
102cd6d8:	e5933000 	ldr	r3, [r3]
102cd6dc:	e12fff33 	blx	r3
102cd6e0:	e2504000 	subs	r4, r0, #0
102cd6e4:	15854028 	strne	r4, [r5, #40]	; 0x28
102cd6e8:	1a000006 	bne	102cd708 <Ql_memset+0x58>
102cd6ec:	e59f303c 	ldr	r3, [pc, #60]	; 102cd730 <Ql_memset+0x80>
102cd6f0:	e59f1034 	ldr	r1, [pc, #52]	; 102cd72c <Ql_memset+0x7c>
102cd6f4:	e5933000 	ldr	r3, [r3]
102cd6f8:	e59f0034 	ldr	r0, [pc, #52]	; 102cd734 <Ql_memset+0x84>
102cd6fc:	e12fff33 	blx	r3
102cd700:	e1a00004 	mov	r0, r4
102cd704:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
102cd708:	e59f3014 	ldr	r3, [pc, #20]	; 102cd724 <Ql_memset+0x74>
102cd70c:	e1a00006 	mov	r0, r6
102cd710:	e5933028 	ldr	r3, [r3, #40]	; 0x28
102cd714:	e1a01008 	mov	r1, r8
102cd718:	e1a02007 	mov	r2, r7
102cd71c:	e12fff33 	blx	r3
102cd720:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
102cd724:	f03d2fc0 	.word	0xf03d2fc0
102cd728:	f03d2358 	.word	0xf03d2358
102cd72c:	102cf74f 	.word	0x102cf74f
102cd730:	f03d31ec 	.word	0xf03d31ec
102cd734:	f03d2024 	.word	0xf03d2024

Disassembly of section .text.Ql_memcpy:

102cd738 <Ql_memcpy>:
102cd738:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
102cd73c:	e59f5068 	ldr	r5, [pc, #104]	; 102cd7ac <Ql_memcpy+0x74>
102cd740:	e1a06000 	mov	r6, r0
102cd744:	e595302c 	ldr	r3, [r5, #44]	; 0x2c
102cd748:	e1a08001 	mov	r8, r1
102cd74c:	e3530000 	cmp	r3, #0
102cd750:	e1a07002 	mov	r7, r2
102cd754:	1a00000d 	bne	102cd790 <Ql_memcpy+0x58>
102cd758:	e59f3050 	ldr	r3, [pc, #80]	; 102cd7b0 <Ql_memcpy+0x78>
102cd75c:	e59f0050 	ldr	r0, [pc, #80]	; 102cd7b4 <Ql_memcpy+0x7c>
102cd760:	e5933000 	ldr	r3, [r3]
102cd764:	e12fff33 	blx	r3
102cd768:	e2504000 	subs	r4, r0, #0
102cd76c:	1585402c 	strne	r4, [r5, #44]	; 0x2c
102cd770:	1a000006 	bne	102cd790 <Ql_memcpy+0x58>
102cd774:	e59f303c 	ldr	r3, [pc, #60]	; 102cd7b8 <Ql_memcpy+0x80>
102cd778:	e59f1034 	ldr	r1, [pc, #52]	; 102cd7b4 <Ql_memcpy+0x7c>
102cd77c:	e5933000 	ldr	r3, [r3]
102cd780:	e59f0034 	ldr	r0, [pc, #52]	; 102cd7bc <Ql_memcpy+0x84>
102cd784:	e12fff33 	blx	r3
102cd788:	e1a00004 	mov	r0, r4
102cd78c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
102cd790:	e59f3014 	ldr	r3, [pc, #20]	; 102cd7ac <Ql_memcpy+0x74>
102cd794:	e1a00006 	mov	r0, r6
102cd798:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
102cd79c:	e1a01008 	mov	r1, r8
102cd7a0:	e1a02007 	mov	r2, r7
102cd7a4:	e12fff33 	blx	r3
102cd7a8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
102cd7ac:	f03d2fc0 	.word	0xf03d2fc0
102cd7b0:	f03d2358 	.word	0xf03d2358
102cd7b4:	102cf759 	.word	0x102cf759
102cd7b8:	f03d31ec 	.word	0xf03d31ec
102cd7bc:	f03d2024 	.word	0xf03d2024

Disassembly of section .text.Ql_strstr:

102cd7c0 <Ql_strstr>:
102cd7c0:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
102cd7c4:	e59f5060 	ldr	r5, [pc, #96]	; 102cd82c <Ql_strstr+0x6c>
102cd7c8:	e1a06000 	mov	r6, r0
102cd7cc:	e5953038 	ldr	r3, [r5, #56]	; 0x38
102cd7d0:	e1a07001 	mov	r7, r1
102cd7d4:	e3530000 	cmp	r3, #0
102cd7d8:	1a00000d 	bne	102cd814 <Ql_strstr+0x54>
102cd7dc:	e59f304c 	ldr	r3, [pc, #76]	; 102cd830 <Ql_strstr+0x70>
102cd7e0:	e59f004c 	ldr	r0, [pc, #76]	; 102cd834 <Ql_strstr+0x74>
102cd7e4:	e5933000 	ldr	r3, [r3]
102cd7e8:	e12fff33 	blx	r3
102cd7ec:	e2504000 	subs	r4, r0, #0
102cd7f0:	15854038 	strne	r4, [r5, #56]	; 0x38
102cd7f4:	1a000006 	bne	102cd814 <Ql_strstr+0x54>
102cd7f8:	e59f3038 	ldr	r3, [pc, #56]	; 102cd838 <Ql_strstr+0x78>
102cd7fc:	e59f1030 	ldr	r1, [pc, #48]	; 102cd834 <Ql_strstr+0x74>
102cd800:	e5933000 	ldr	r3, [r3]
102cd804:	e59f0030 	ldr	r0, [pc, #48]	; 102cd83c <Ql_strstr+0x7c>
102cd808:	e12fff33 	blx	r3
102cd80c:	e1a00004 	mov	r0, r4
102cd810:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
102cd814:	e59f3010 	ldr	r3, [pc, #16]	; 102cd82c <Ql_strstr+0x6c>
102cd818:	e1a00006 	mov	r0, r6
102cd81c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
102cd820:	e1a01007 	mov	r1, r7
102cd824:	e12fff33 	blx	r3
102cd828:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
102cd82c:	f03d2fc0 	.word	0xf03d2fc0
102cd830:	f03d2358 	.word	0xf03d2358
102cd834:	102cf778 	.word	0x102cf778
102cd838:	f03d31ec 	.word	0xf03d31ec
102cd83c:	f03d2024 	.word	0xf03d2024

Disassembly of section .text.Ql_toupper:

102cd840 <Ql_toupper>:
102cd840:	e2400020 	sub	r0, r0, #32
102cd844:	e12fff1e 	bx	lr

Disassembly of section .text.Ql_atoi:

102cd848 <Ql_atoi>:
102cd848:	e92d4010 	push	{r4, lr}
102cd84c:	e1a02000 	mov	r2, r0
102cd850:	e5d23000 	ldrb	r3, [r2]
102cd854:	e2800001 	add	r0, r0, #1
102cd858:	e3530020 	cmp	r3, #32
102cd85c:	13530009 	cmpne	r3, #9
102cd860:	0afffff9 	beq	102cd84c <Ql_atoi+0x4>
102cd864:	e353000a 	cmp	r3, #10
102cd868:	1353000c 	cmpne	r3, #12
102cd86c:	0afffff6 	beq	102cd84c <Ql_atoi+0x4>
102cd870:	e3530008 	cmp	r3, #8
102cd874:	1353000d 	cmpne	r3, #13
102cd878:	0afffff3 	beq	102cd84c <Ql_atoi+0x4>
102cd87c:	e253102d 	subs	r1, r3, #45	; 0x2d
102cd880:	e271c000 	rsbs	ip, r1, #0
102cd884:	e0bcc001 	adcs	ip, ip, r1
102cd888:	e353002d 	cmp	r3, #45	; 0x2d
102cd88c:	1353002b 	cmpne	r3, #43	; 0x2b
102cd890:	11a02000 	movne	r2, r0
102cd894:	05d23001 	ldrbeq	r3, [r2, #1]
102cd898:	e3a00000 	mov	r0, #0
102cd89c:	02822002 	addeq	r2, r2, #2
102cd8a0:	e3a0100a 	mov	r1, #10
102cd8a4:	e2433030 	sub	r3, r3, #48	; 0x30
102cd8a8:	e20340ff 	and	r4, r3, #255	; 0xff
102cd8ac:	e3540009 	cmp	r4, #9
102cd8b0:	9a000002 	bls	102cd8c0 <Ql_atoi+0x78>
102cd8b4:	e35c0000 	cmp	ip, #0
102cd8b8:	12600000 	rsbne	r0, r0, #0
102cd8bc:	e8bd8010 	pop	{r4, pc}
102cd8c0:	e0203091 	mla	r0, r1, r0, r3
102cd8c4:	e4d23001 	ldrb	r3, [r2], #1
102cd8c8:	eafffff5 	b	102cd8a4 <Ql_atoi+0x5c>

Disassembly of section .text.Ql_Sleep:

102cd8cc <Ql_Sleep>:
102cd8cc:	e92d4038 	push	{r3, r4, r5, lr}
102cd8d0:	e59f4054 	ldr	r4, [pc, #84]	; 102cd92c <Ql_Sleep+0x60>
102cd8d4:	e1a05000 	mov	r5, r0
102cd8d8:	e5943000 	ldr	r3, [r4]
102cd8dc:	e3530000 	cmp	r3, #0
102cd8e0:	1a00000c 	bne	102cd918 <Ql_Sleep+0x4c>
102cd8e4:	e59f3044 	ldr	r3, [pc, #68]	; 102cd930 <Ql_Sleep+0x64>
102cd8e8:	e59f0044 	ldr	r0, [pc, #68]	; 102cd934 <Ql_Sleep+0x68>
102cd8ec:	e5933000 	ldr	r3, [r3]
102cd8f0:	e12fff33 	blx	r3
102cd8f4:	e3500000 	cmp	r0, #0
102cd8f8:	15840000 	strne	r0, [r4]
102cd8fc:	1a000005 	bne	102cd918 <Ql_Sleep+0x4c>
102cd900:	e59f3030 	ldr	r3, [pc, #48]	; 102cd938 <Ql_Sleep+0x6c>
102cd904:	e59f1028 	ldr	r1, [pc, #40]	; 102cd934 <Ql_Sleep+0x68>
102cd908:	e5933000 	ldr	r3, [r3]
102cd90c:	e59f0028 	ldr	r0, [pc, #40]	; 102cd93c <Ql_Sleep+0x70>
102cd910:	e12fff33 	blx	r3
102cd914:	e8bd8038 	pop	{r3, r4, r5, pc}
102cd918:	e59f300c 	ldr	r3, [pc, #12]	; 102cd92c <Ql_Sleep+0x60>
102cd91c:	e1a00005 	mov	r0, r5
102cd920:	e5933000 	ldr	r3, [r3]
102cd924:	e12fff33 	blx	r3
102cd928:	e8bd8038 	pop	{r3, r4, r5, pc}
102cd92c:	f03d301c 	.word	0xf03d301c
102cd930:	f03d2358 	.word	0xf03d2358
102cd934:	102cf7d3 	.word	0x102cf7d3
102cd938:	f03d31ec 	.word	0xf03d31ec
102cd93c:	f03d2024 	.word	0xf03d2024

Disassembly of section .text.Ql_GetSDKVer:

102cd940 <Ql_GetSDKVer>:
102cd940:	e3500000 	cmp	r0, #0
102cd944:	13510000 	cmpne	r1, #0
102cd948:	e92d4070 	push	{r4, r5, r6, lr}
102cd94c:	e1a06001 	mov	r6, r1
102cd950:	e1a05000 	mov	r5, r0
102cd954:	0a00000d 	beq	102cd990 <Ql_GetSDKVer+0x50>
102cd958:	e59f3038 	ldr	r3, [pc, #56]	; 102cd998 <Ql_GetSDKVer+0x58>
102cd95c:	e59f0038 	ldr	r0, [pc, #56]	; 102cd99c <Ql_GetSDKVer+0x5c>
102cd960:	e12fff33 	blx	r3
102cd964:	e59f1030 	ldr	r1, [pc, #48]	; 102cd99c <Ql_GetSDKVer+0x5c>
102cd968:	e59f3030 	ldr	r3, [pc, #48]	; 102cd9a0 <Ql_GetSDKVer+0x60>
102cd96c:	e1a00800 	lsl	r0, r0, #16
102cd970:	e1a04820 	lsr	r4, r0, #16
102cd974:	e1540006 	cmp	r4, r6
102cd978:	21a04006 	movcs	r4, r6
102cd97c:	e1a00005 	mov	r0, r5
102cd980:	e1a02004 	mov	r2, r4
102cd984:	e12fff33 	blx	r3
102cd988:	e1a00004 	mov	r0, r4
102cd98c:	e8bd8070 	pop	{r4, r5, r6, pc}
102cd990:	e3e00032 	mvn	r0, #50	; 0x32
102cd994:	e8bd8070 	pop	{r4, r5, r6, pc}
102cd998:	102cd560 	.word	0x102cd560
102cd99c:	102ceb52 	.word	0x102ceb52
102cd9a0:	102cd4d8 	.word	0x102cd4d8

Disassembly of section .text.Ql_OS_GetMessage:

102cd9a4 <Ql_OS_GetMessage>:
102cd9a4:	e92d4038 	push	{r3, r4, r5, lr}
102cd9a8:	e59f4044 	ldr	r4, [pc, #68]	; 102cd9f4 <Ql_OS_GetMessage+0x50>
102cd9ac:	e1a05000 	mov	r5, r0
102cd9b0:	e5943000 	ldr	r3, [r4]
102cd9b4:	e3530000 	cmp	r3, #0
102cd9b8:	1a000006 	bne	102cd9d8 <Ql_OS_GetMessage+0x34>
102cd9bc:	e59f3034 	ldr	r3, [pc, #52]	; 102cd9f8 <Ql_OS_GetMessage+0x54>
102cd9c0:	e59f0034 	ldr	r0, [pc, #52]	; 102cd9fc <Ql_OS_GetMessage+0x58>
102cd9c4:	e5933000 	ldr	r3, [r3]
102cd9c8:	e12fff33 	blx	r3
102cd9cc:	e3500000 	cmp	r0, #0
102cd9d0:	0a000005 	beq	102cd9ec <Ql_OS_GetMessage+0x48>
102cd9d4:	e5840000 	str	r0, [r4]
102cd9d8:	e59f3014 	ldr	r3, [pc, #20]	; 102cd9f4 <Ql_OS_GetMessage+0x50>
102cd9dc:	e1a00005 	mov	r0, r5
102cd9e0:	e5933000 	ldr	r3, [r3]
102cd9e4:	e12fff33 	blx	r3
102cd9e8:	e8bd8038 	pop	{r3, r4, r5, pc}
102cd9ec:	e59f000c 	ldr	r0, [pc, #12]	; 102cda00 <Ql_OS_GetMessage+0x5c>
102cd9f0:	e8bd8038 	pop	{r3, r4, r5, pc}
102cd9f4:	f03d3030 	.word	0xf03d3030
102cd9f8:	f03d2358 	.word	0xf03d2358
102cd9fc:	102cf810 	.word	0x102cf810
102cda00:	ffffd8f0 	.word	0xffffd8f0

Disassembly of section .text.Ql_OS_SendMessage:

102cda04 <Ql_OS_SendMessage>:
102cda04:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
102cda08:	e59f405c 	ldr	r4, [pc, #92]	; 102cda6c <Ql_OS_SendMessage+0x68>
102cda0c:	e1a06003 	mov	r6, r3
102cda10:	e5943004 	ldr	r3, [r4, #4]
102cda14:	e1a05000 	mov	r5, r0
102cda18:	e3530000 	cmp	r3, #0
102cda1c:	e1a08001 	mov	r8, r1
102cda20:	e1a07002 	mov	r7, r2
102cda24:	1a000006 	bne	102cda44 <Ql_OS_SendMessage+0x40>
102cda28:	e59f3040 	ldr	r3, [pc, #64]	; 102cda70 <Ql_OS_SendMessage+0x6c>
102cda2c:	e59f0040 	ldr	r0, [pc, #64]	; 102cda74 <Ql_OS_SendMessage+0x70>
102cda30:	e5933000 	ldr	r3, [r3]
102cda34:	e12fff33 	blx	r3
102cda38:	e3500000 	cmp	r0, #0
102cda3c:	0a000008 	beq	102cda64 <Ql_OS_SendMessage+0x60>
102cda40:	e5840004 	str	r0, [r4, #4]
102cda44:	e59f3020 	ldr	r3, [pc, #32]	; 102cda6c <Ql_OS_SendMessage+0x68>
102cda48:	e1a00005 	mov	r0, r5
102cda4c:	e593c004 	ldr	ip, [r3, #4]
102cda50:	e1a01008 	mov	r1, r8
102cda54:	e1a02007 	mov	r2, r7
102cda58:	e1a03006 	mov	r3, r6
102cda5c:	e12fff3c 	blx	ip
102cda60:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
102cda64:	e59f000c 	ldr	r0, [pc, #12]	; 102cda78 <Ql_OS_SendMessage+0x74>
102cda68:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
102cda6c:	f03d3030 	.word	0xf03d3030
102cda70:	f03d2358 	.word	0xf03d2358
102cda74:	102cf821 	.word	0x102cf821
102cda78:	ffffd8f0 	.word	0xffffd8f0

Disassembly of section .text.Ql_OS_CreateMutex:

102cda7c <Ql_OS_CreateMutex>:
102cda7c:	e92d4038 	push	{r3, r4, r5, lr}
102cda80:	e59f403c 	ldr	r4, [pc, #60]	; 102cdac4 <Ql_OS_CreateMutex+0x48>
102cda84:	e1a05000 	mov	r5, r0
102cda88:	e5943008 	ldr	r3, [r4, #8]
102cda8c:	e3530000 	cmp	r3, #0
102cda90:	1a000006 	bne	102cdab0 <Ql_OS_CreateMutex+0x34>
102cda94:	e59f302c 	ldr	r3, [pc, #44]	; 102cdac8 <Ql_OS_CreateMutex+0x4c>
102cda98:	e59f002c 	ldr	r0, [pc, #44]	; 102cdacc <Ql_OS_CreateMutex+0x50>
102cda9c:	e5933000 	ldr	r3, [r3]
102cdaa0:	e12fff33 	blx	r3
102cdaa4:	e3500000 	cmp	r0, #0
102cdaa8:	08bd8038 	popeq	{r3, r4, r5, pc}
102cdaac:	e5840008 	str	r0, [r4, #8]
102cdab0:	e59f300c 	ldr	r3, [pc, #12]	; 102cdac4 <Ql_OS_CreateMutex+0x48>
102cdab4:	e1a00005 	mov	r0, r5
102cdab8:	e5933008 	ldr	r3, [r3, #8]
102cdabc:	e12fff33 	blx	r3
102cdac0:	e8bd8038 	pop	{r3, r4, r5, pc}
102cdac4:	f03d3030 	.word	0xf03d3030
102cdac8:	f03d2358 	.word	0xf03d2358
102cdacc:	102cf833 	.word	0x102cf833

Disassembly of section .text.Ql_OS_TakeMutex:

102cdad0 <Ql_OS_TakeMutex>:
102cdad0:	e92d4038 	push	{r3, r4, r5, lr}
102cdad4:	e59f403c 	ldr	r4, [pc, #60]	; 102cdb18 <Ql_OS_TakeMutex+0x48>
102cdad8:	e1a05000 	mov	r5, r0
102cdadc:	e594300c 	ldr	r3, [r4, #12]
102cdae0:	e3530000 	cmp	r3, #0
102cdae4:	1a000006 	bne	102cdb04 <Ql_OS_TakeMutex+0x34>
102cdae8:	e59f302c 	ldr	r3, [pc, #44]	; 102cdb1c <Ql_OS_TakeMutex+0x4c>
102cdaec:	e59f002c 	ldr	r0, [pc, #44]	; 102cdb20 <Ql_OS_TakeMutex+0x50>
102cdaf0:	e5933000 	ldr	r3, [r3]
102cdaf4:	e12fff33 	blx	r3
102cdaf8:	e3500000 	cmp	r0, #0
102cdafc:	08bd8038 	popeq	{r3, r4, r5, pc}
102cdb00:	e584000c 	str	r0, [r4, #12]
102cdb04:	e59f300c 	ldr	r3, [pc, #12]	; 102cdb18 <Ql_OS_TakeMutex+0x48>
102cdb08:	e1a00005 	mov	r0, r5
102cdb0c:	e593300c 	ldr	r3, [r3, #12]
102cdb10:	e12fff33 	blx	r3
102cdb14:	e8bd8038 	pop	{r3, r4, r5, pc}
102cdb18:	f03d3030 	.word	0xf03d3030
102cdb1c:	f03d2358 	.word	0xf03d2358
102cdb20:	102cf845 	.word	0x102cf845

Disassembly of section .text.Ql_OS_GiveMutex:

102cdb24 <Ql_OS_GiveMutex>:
102cdb24:	e92d4038 	push	{r3, r4, r5, lr}
102cdb28:	e59f403c 	ldr	r4, [pc, #60]	; 102cdb6c <Ql_OS_GiveMutex+0x48>
102cdb2c:	e1a05000 	mov	r5, r0
102cdb30:	e5943010 	ldr	r3, [r4, #16]
102cdb34:	e3530000 	cmp	r3, #0
102cdb38:	1a000006 	bne	102cdb58 <Ql_OS_GiveMutex+0x34>
102cdb3c:	e59f302c 	ldr	r3, [pc, #44]	; 102cdb70 <Ql_OS_GiveMutex+0x4c>
102cdb40:	e59f002c 	ldr	r0, [pc, #44]	; 102cdb74 <Ql_OS_GiveMutex+0x50>
102cdb44:	e5933000 	ldr	r3, [r3]
102cdb48:	e12fff33 	blx	r3
102cdb4c:	e3500000 	cmp	r0, #0
102cdb50:	08bd8038 	popeq	{r3, r4, r5, pc}
102cdb54:	e5840010 	str	r0, [r4, #16]
102cdb58:	e59f300c 	ldr	r3, [pc, #12]	; 102cdb6c <Ql_OS_GiveMutex+0x48>
102cdb5c:	e1a00005 	mov	r0, r5
102cdb60:	e5933010 	ldr	r3, [r3, #16]
102cdb64:	e12fff33 	blx	r3
102cdb68:	e8bd8038 	pop	{r3, r4, r5, pc}
102cdb6c:	f03d3030 	.word	0xf03d3030
102cdb70:	f03d2358 	.word	0xf03d2358
102cdb74:	102cf855 	.word	0x102cf855

Disassembly of section .text.Ql_OS_CreateEvent:

102cdb78 <Ql_OS_CreateEvent>:
102cdb78:	e92d4038 	push	{r3, r4, r5, lr}
102cdb7c:	e59f403c 	ldr	r4, [pc, #60]	; 102cdbc0 <Ql_OS_CreateEvent+0x48>
102cdb80:	e1a05000 	mov	r5, r0
102cdb84:	e5943020 	ldr	r3, [r4, #32]
102cdb88:	e3530000 	cmp	r3, #0
102cdb8c:	1a000006 	bne	102cdbac <Ql_OS_CreateEvent+0x34>
102cdb90:	e59f302c 	ldr	r3, [pc, #44]	; 102cdbc4 <Ql_OS_CreateEvent+0x4c>
102cdb94:	e59f002c 	ldr	r0, [pc, #44]	; 102cdbc8 <Ql_OS_CreateEvent+0x50>
102cdb98:	e5933000 	ldr	r3, [r3]
102cdb9c:	e12fff33 	blx	r3
102cdba0:	e3500000 	cmp	r0, #0
102cdba4:	08bd8038 	popeq	{r3, r4, r5, pc}
102cdba8:	e5840020 	str	r0, [r4, #32]
102cdbac:	e59f300c 	ldr	r3, [pc, #12]	; 102cdbc0 <Ql_OS_CreateEvent+0x48>
102cdbb0:	e1a00005 	mov	r0, r5
102cdbb4:	e5933020 	ldr	r3, [r3, #32]
102cdbb8:	e12fff33 	blx	r3
102cdbbc:	e8bd8038 	pop	{r3, r4, r5, pc}
102cdbc0:	f03d3030 	.word	0xf03d3030
102cdbc4:	f03d2358 	.word	0xf03d2358
102cdbc8:	102cf8a3 	.word	0x102cf8a3

Disassembly of section .text.Ql_OS_WaitEvent:

102cdbcc <Ql_OS_WaitEvent>:
102cdbcc:	e92d4070 	push	{r4, r5, r6, lr}
102cdbd0:	e59f404c 	ldr	r4, [pc, #76]	; 102cdc24 <Ql_OS_WaitEvent+0x58>
102cdbd4:	e1a05000 	mov	r5, r0
102cdbd8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
102cdbdc:	e1a06001 	mov	r6, r1
102cdbe0:	e3530000 	cmp	r3, #0
102cdbe4:	1a000006 	bne	102cdc04 <Ql_OS_WaitEvent+0x38>
102cdbe8:	e59f3038 	ldr	r3, [pc, #56]	; 102cdc28 <Ql_OS_WaitEvent+0x5c>
102cdbec:	e59f0038 	ldr	r0, [pc, #56]	; 102cdc2c <Ql_OS_WaitEvent+0x60>
102cdbf0:	e5933000 	ldr	r3, [r3]
102cdbf4:	e12fff33 	blx	r3
102cdbf8:	e3500000 	cmp	r0, #0
102cdbfc:	0a000006 	beq	102cdc1c <Ql_OS_WaitEvent+0x50>
102cdc00:	e5840024 	str	r0, [r4, #36]	; 0x24
102cdc04:	e59f3018 	ldr	r3, [pc, #24]	; 102cdc24 <Ql_OS_WaitEvent+0x58>
102cdc08:	e1a00005 	mov	r0, r5
102cdc0c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
102cdc10:	e1a01006 	mov	r1, r6
102cdc14:	e12fff33 	blx	r3
102cdc18:	e8bd8070 	pop	{r4, r5, r6, pc}
102cdc1c:	e59f000c 	ldr	r0, [pc, #12]	; 102cdc30 <Ql_OS_WaitEvent+0x64>
102cdc20:	e8bd8070 	pop	{r4, r5, r6, pc}
102cdc24:	f03d3030 	.word	0xf03d3030
102cdc28:	f03d2358 	.word	0xf03d2358
102cdc2c:	102cf8b5 	.word	0x102cf8b5
102cdc30:	ffffd8f0 	.word	0xffffd8f0

Disassembly of section .text.Ql_OS_SetEvent:

102cdc34 <Ql_OS_SetEvent>:
102cdc34:	e92d4070 	push	{r4, r5, r6, lr}
102cdc38:	e59f404c 	ldr	r4, [pc, #76]	; 102cdc8c <Ql_OS_SetEvent+0x58>
102cdc3c:	e1a05000 	mov	r5, r0
102cdc40:	e5943028 	ldr	r3, [r4, #40]	; 0x28
102cdc44:	e1a06001 	mov	r6, r1
102cdc48:	e3530000 	cmp	r3, #0
102cdc4c:	1a000006 	bne	102cdc6c <Ql_OS_SetEvent+0x38>
102cdc50:	e59f3038 	ldr	r3, [pc, #56]	; 102cdc90 <Ql_OS_SetEvent+0x5c>
102cdc54:	e59f0038 	ldr	r0, [pc, #56]	; 102cdc94 <Ql_OS_SetEvent+0x60>
102cdc58:	e5933000 	ldr	r3, [r3]
102cdc5c:	e12fff33 	blx	r3
102cdc60:	e3500000 	cmp	r0, #0
102cdc64:	0a000006 	beq	102cdc84 <Ql_OS_SetEvent+0x50>
102cdc68:	e5840028 	str	r0, [r4, #40]	; 0x28
102cdc6c:	e59f3018 	ldr	r3, [pc, #24]	; 102cdc8c <Ql_OS_SetEvent+0x58>
102cdc70:	e1a00005 	mov	r0, r5
102cdc74:	e5933028 	ldr	r3, [r3, #40]	; 0x28
102cdc78:	e1a01006 	mov	r1, r6
102cdc7c:	e12fff33 	blx	r3
102cdc80:	e8bd8070 	pop	{r4, r5, r6, pc}
102cdc84:	e59f000c 	ldr	r0, [pc, #12]	; 102cdc98 <Ql_OS_SetEvent+0x64>
102cdc88:	e8bd8070 	pop	{r4, r5, r6, pc}
102cdc8c:	f03d3030 	.word	0xf03d3030
102cdc90:	f03d2358 	.word	0xf03d2358
102cdc94:	102cf8c5 	.word	0x102cf8c5
102cdc98:	ffffd8f0 	.word	0xffffd8f0

Disassembly of section .text.Ql_Timer_Register:

102cdc9c <Ql_Timer_Register>:
102cdc9c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
102cdca0:	e59f4054 	ldr	r4, [pc, #84]	; 102cdcfc <Ql_Timer_Register+0x60>
102cdca4:	e1a05000 	mov	r5, r0
102cdca8:	e5943000 	ldr	r3, [r4]
102cdcac:	e1a07001 	mov	r7, r1
102cdcb0:	e3530000 	cmp	r3, #0
102cdcb4:	e1a06002 	mov	r6, r2
102cdcb8:	1a000006 	bne	102cdcd8 <Ql_Timer_Register+0x3c>
102cdcbc:	e59f303c 	ldr	r3, [pc, #60]	; 102cdd00 <Ql_Timer_Register+0x64>
102cdcc0:	e59f003c 	ldr	r0, [pc, #60]	; 102cdd04 <Ql_Timer_Register+0x68>
102cdcc4:	e5933000 	ldr	r3, [r3]
102cdcc8:	e12fff33 	blx	r3
102cdccc:	e3500000 	cmp	r0, #0
102cdcd0:	0a000007 	beq	102cdcf4 <Ql_Timer_Register+0x58>
102cdcd4:	e5840000 	str	r0, [r4]
102cdcd8:	e59f301c 	ldr	r3, [pc, #28]	; 102cdcfc <Ql_Timer_Register+0x60>
102cdcdc:	e1a00005 	mov	r0, r5
102cdce0:	e5933000 	ldr	r3, [r3]
102cdce4:	e1a01007 	mov	r1, r7
102cdce8:	e1a02006 	mov	r2, r6
102cdcec:	e12fff33 	blx	r3
102cdcf0:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
102cdcf4:	e59f000c 	ldr	r0, [pc, #12]	; 102cdd08 <Ql_Timer_Register+0x6c>
102cdcf8:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
102cdcfc:	f03d3074 	.word	0xf03d3074
102cdd00:	f03d2358 	.word	0xf03d2358
102cdd04:	102cf967 	.word	0x102cf967
102cdd08:	ffffd8f0 	.word	0xffffd8f0

Disassembly of section .text.Ql_Timer_Start:

102cdd0c <Ql_Timer_Start>:
102cdd0c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
102cdd10:	e59f4054 	ldr	r4, [pc, #84]	; 102cdd6c <Ql_Timer_Start+0x60>
102cdd14:	e1a05000 	mov	r5, r0
102cdd18:	e5943008 	ldr	r3, [r4, #8]
102cdd1c:	e1a07001 	mov	r7, r1
102cdd20:	e3530000 	cmp	r3, #0
102cdd24:	e1a06002 	mov	r6, r2
102cdd28:	1a000006 	bne	102cdd48 <Ql_Timer_Start+0x3c>
102cdd2c:	e59f303c 	ldr	r3, [pc, #60]	; 102cdd70 <Ql_Timer_Start+0x64>
102cdd30:	e59f003c 	ldr	r0, [pc, #60]	; 102cdd74 <Ql_Timer_Start+0x68>
102cdd34:	e5933000 	ldr	r3, [r3]
102cdd38:	e12fff33 	blx	r3
102cdd3c:	e3500000 	cmp	r0, #0
102cdd40:	0a000007 	beq	102cdd64 <Ql_Timer_Start+0x58>
102cdd44:	e5840008 	str	r0, [r4, #8]
102cdd48:	e59f301c 	ldr	r3, [pc, #28]	; 102cdd6c <Ql_Timer_Start+0x60>
102cdd4c:	e1a00005 	mov	r0, r5
102cdd50:	e5933008 	ldr	r3, [r3, #8]
102cdd54:	e1a01007 	mov	r1, r7
102cdd58:	e1a02006 	mov	r2, r6
102cdd5c:	e12fff33 	blx	r3
102cdd60:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
102cdd64:	e59f000c 	ldr	r0, [pc, #12]	; 102cdd78 <Ql_Timer_Start+0x6c>
102cdd68:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
102cdd6c:	f03d3074 	.word	0xf03d3074
102cdd70:	f03d2358 	.word	0xf03d2358
102cdd74:	102cf98f 	.word	0x102cf98f
102cdd78:	ffffd8f0 	.word	0xffffd8f0

Disassembly of section .text.Ql_Timer_Stop:

102cdd7c <Ql_Timer_Stop>:
102cdd7c:	e92d4038 	push	{r3, r4, r5, lr}
102cdd80:	e59f4044 	ldr	r4, [pc, #68]	; 102cddcc <Ql_Timer_Stop+0x50>
102cdd84:	e1a05000 	mov	r5, r0
102cdd88:	e594300c 	ldr	r3, [r4, #12]
102cdd8c:	e3530000 	cmp	r3, #0
102cdd90:	1a000006 	bne	102cddb0 <Ql_Timer_Stop+0x34>
102cdd94:	e59f3034 	ldr	r3, [pc, #52]	; 102cddd0 <Ql_Timer_Stop+0x54>
102cdd98:	e59f0034 	ldr	r0, [pc, #52]	; 102cddd4 <Ql_Timer_Stop+0x58>
102cdd9c:	e5933000 	ldr	r3, [r3]
102cdda0:	e12fff33 	blx	r3
102cdda4:	e3500000 	cmp	r0, #0
102cdda8:	0a000005 	beq	102cddc4 <Ql_Timer_Stop+0x48>
102cddac:	e584000c 	str	r0, [r4, #12]
102cddb0:	e59f3014 	ldr	r3, [pc, #20]	; 102cddcc <Ql_Timer_Stop+0x50>
102cddb4:	e1a00005 	mov	r0, r5
102cddb8:	e593300c 	ldr	r3, [r3, #12]
102cddbc:	e12fff33 	blx	r3
102cddc0:	e8bd8038 	pop	{r3, r4, r5, pc}
102cddc4:	e59f000c 	ldr	r0, [pc, #12]	; 102cddd8 <Ql_Timer_Stop+0x5c>
102cddc8:	e8bd8038 	pop	{r3, r4, r5, pc}
102cddcc:	f03d3074 	.word	0xf03d3074
102cddd0:	f03d2358 	.word	0xf03d2358
102cddd4:	102cf99e 	.word	0x102cf99e
102cddd8:	ffffd8f0 	.word	0xffffd8f0

Disassembly of section .text.Ql_UART_Register:

102cdddc <Ql_UART_Register>:
102cdddc:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
102cdde0:	e59f4054 	ldr	r4, [pc, #84]	; 102cde3c <Ql_UART_Register+0x60>
102cdde4:	e1a05000 	mov	r5, r0
102cdde8:	e5943000 	ldr	r3, [r4]
102cddec:	e1a07001 	mov	r7, r1
102cddf0:	e3530000 	cmp	r3, #0
102cddf4:	e1a06002 	mov	r6, r2
102cddf8:	1a000006 	bne	102cde18 <Ql_UART_Register+0x3c>
102cddfc:	e59f303c 	ldr	r3, [pc, #60]	; 102cde40 <Ql_UART_Register+0x64>
102cde00:	e59f003c 	ldr	r0, [pc, #60]	; 102cde44 <Ql_UART_Register+0x68>
102cde04:	e5933000 	ldr	r3, [r3]
102cde08:	e12fff33 	blx	r3
102cde0c:	e3500000 	cmp	r0, #0
102cde10:	0a000007 	beq	102cde34 <Ql_UART_Register+0x58>
102cde14:	e5840000 	str	r0, [r4]
102cde18:	e59f301c 	ldr	r3, [pc, #28]	; 102cde3c <Ql_UART_Register+0x60>
102cde1c:	e1a00005 	mov	r0, r5
102cde20:	e5933000 	ldr	r3, [r3]
102cde24:	e1a01007 	mov	r1, r7
102cde28:	e1a02006 	mov	r2, r6
102cde2c:	e12fff33 	blx	r3
102cde30:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
102cde34:	e59f000c 	ldr	r0, [pc, #12]	; 102cde48 <Ql_UART_Register+0x6c>
102cde38:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
102cde3c:	f03d3084 	.word	0xf03d3084
102cde40:	f03d2358 	.word	0xf03d2358
102cde44:	102cf9ac 	.word	0x102cf9ac
102cde48:	ffffd8f0 	.word	0xffffd8f0

Disassembly of section .text.Ql_UART_Open:

102cde4c <Ql_UART_Open>:
102cde4c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
102cde50:	e59f4054 	ldr	r4, [pc, #84]	; 102cdeac <Ql_UART_Open+0x60>
102cde54:	e1a05000 	mov	r5, r0
102cde58:	e5943004 	ldr	r3, [r4, #4]
102cde5c:	e1a07001 	mov	r7, r1
102cde60:	e3530000 	cmp	r3, #0
102cde64:	e1a06002 	mov	r6, r2
102cde68:	1a000006 	bne	102cde88 <Ql_UART_Open+0x3c>
102cde6c:	e59f303c 	ldr	r3, [pc, #60]	; 102cdeb0 <Ql_UART_Open+0x64>
102cde70:	e59f003c 	ldr	r0, [pc, #60]	; 102cdeb4 <Ql_UART_Open+0x68>
102cde74:	e5933000 	ldr	r3, [r3]
102cde78:	e12fff33 	blx	r3
102cde7c:	e3500000 	cmp	r0, #0
102cde80:	0a000007 	beq	102cdea4 <Ql_UART_Open+0x58>
102cde84:	e5840004 	str	r0, [r4, #4]
102cde88:	e59f301c 	ldr	r3, [pc, #28]	; 102cdeac <Ql_UART_Open+0x60>
102cde8c:	e1a00005 	mov	r0, r5
102cde90:	e5933004 	ldr	r3, [r3, #4]
102cde94:	e1a01007 	mov	r1, r7
102cde98:	e1a02006 	mov	r2, r6
102cde9c:	e12fff33 	blx	r3
102cdea0:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
102cdea4:	e59f000c 	ldr	r0, [pc, #12]	; 102cdeb8 <Ql_UART_Open+0x6c>
102cdea8:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
102cdeac:	f03d3084 	.word	0xf03d3084
102cdeb0:	f03d2358 	.word	0xf03d2358
102cdeb4:	102cf9bd 	.word	0x102cf9bd
102cdeb8:	ffffd8f0 	.word	0xffffd8f0

Disassembly of section .text.Ql_UART_Write:

102cdebc <Ql_UART_Write>:
102cdebc:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
102cdec0:	e59f4054 	ldr	r4, [pc, #84]	; 102cdf1c <Ql_UART_Write+0x60>
102cdec4:	e1a05000 	mov	r5, r0
102cdec8:	e594300c 	ldr	r3, [r4, #12]
102cdecc:	e1a07001 	mov	r7, r1
102cded0:	e3530000 	cmp	r3, #0
102cded4:	e1a06002 	mov	r6, r2
102cded8:	1a000006 	bne	102cdef8 <Ql_UART_Write+0x3c>
102cdedc:	e59f303c 	ldr	r3, [pc, #60]	; 102cdf20 <Ql_UART_Write+0x64>
102cdee0:	e59f003c 	ldr	r0, [pc, #60]	; 102cdf24 <Ql_UART_Write+0x68>
102cdee4:	e5933000 	ldr	r3, [r3]
102cdee8:	e12fff33 	blx	r3
102cdeec:	e3500000 	cmp	r0, #0
102cdef0:	0a000007 	beq	102cdf14 <Ql_UART_Write+0x58>
102cdef4:	e584000c 	str	r0, [r4, #12]
102cdef8:	e59f301c 	ldr	r3, [pc, #28]	; 102cdf1c <Ql_UART_Write+0x60>
102cdefc:	e1a00005 	mov	r0, r5
102cdf00:	e593300c 	ldr	r3, [r3, #12]
102cdf04:	e1a01007 	mov	r1, r7
102cdf08:	e1a02006 	mov	r2, r6
102cdf0c:	e12fff33 	blx	r3
102cdf10:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
102cdf14:	e59f000c 	ldr	r0, [pc, #12]	; 102cdf28 <Ql_UART_Write+0x6c>
102cdf18:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
102cdf1c:	f03d3084 	.word	0xf03d3084
102cdf20:	f03d2358 	.word	0xf03d2358
102cdf24:	102cf9d9 	.word	0x102cf9d9
102cdf28:	ffffd8f0 	.word	0xffffd8f0

Disassembly of section .text.Ql_UART_Read:

102cdf2c <Ql_UART_Read>:
102cdf2c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
102cdf30:	e59f4054 	ldr	r4, [pc, #84]	; 102cdf8c <Ql_UART_Read+0x60>
102cdf34:	e1a05000 	mov	r5, r0
102cdf38:	e5943010 	ldr	r3, [r4, #16]
102cdf3c:	e1a07001 	mov	r7, r1
102cdf40:	e3530000 	cmp	r3, #0
102cdf44:	e1a06002 	mov	r6, r2
102cdf48:	1a000006 	bne	102cdf68 <Ql_UART_Read+0x3c>
102cdf4c:	e59f303c 	ldr	r3, [pc, #60]	; 102cdf90 <Ql_UART_Read+0x64>
102cdf50:	e59f003c 	ldr	r0, [pc, #60]	; 102cdf94 <Ql_UART_Read+0x68>
102cdf54:	e5933000 	ldr	r3, [r3]
102cdf58:	e12fff33 	blx	r3
102cdf5c:	e3500000 	cmp	r0, #0
102cdf60:	0a000007 	beq	102cdf84 <Ql_UART_Read+0x58>
102cdf64:	e5840010 	str	r0, [r4, #16]
102cdf68:	e59f301c 	ldr	r3, [pc, #28]	; 102cdf8c <Ql_UART_Read+0x60>
102cdf6c:	e1a00005 	mov	r0, r5
102cdf70:	e5933010 	ldr	r3, [r3, #16]
102cdf74:	e1a01007 	mov	r1, r7
102cdf78:	e1a02006 	mov	r2, r6
102cdf7c:	e12fff33 	blx	r3
102cdf80:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
102cdf84:	e59f000c 	ldr	r0, [pc, #12]	; 102cdf98 <Ql_UART_Read+0x6c>
102cdf88:	e8bd80f8 	pop	{r3, r4, r5, r6, r7, pc}
102cdf8c:	f03d3084 	.word	0xf03d3084
102cdf90:	f03d2358 	.word	0xf03d2358
102cdf94:	102cf9e7 	.word	0x102cf9e7
102cdf98:	ffffd8f0 	.word	0xffffd8f0

Disassembly of section .text.Ql_UART_GetPinStatus:

102cdf9c <Ql_UART_GetPinStatus>:
102cdf9c:	e92d4070 	push	{r4, r5, r6, lr}
102cdfa0:	e59f404c 	ldr	r4, [pc, #76]	; 102cdff4 <Ql_UART_GetPinStatus+0x58>
102cdfa4:	e1a05000 	mov	r5, r0
102cdfa8:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
102cdfac:	e1a06001 	mov	r6, r1
102cdfb0:	e3530000 	cmp	r3, #0
102cdfb4:	1a000006 	bne	102cdfd4 <Ql_UART_GetPinStatus+0x38>
102cdfb8:	e59f3038 	ldr	r3, [pc, #56]	; 102cdff8 <Ql_UART_GetPinStatus+0x5c>
102cdfbc:	e59f0038 	ldr	r0, [pc, #56]	; 102cdffc <Ql_UART_GetPinStatus+0x60>
102cdfc0:	e5933000 	ldr	r3, [r3]
102cdfc4:	e12fff33 	blx	r3
102cdfc8:	e3500000 	cmp	r0, #0
102cdfcc:	0a000006 	beq	102cdfec <Ql_UART_GetPinStatus+0x50>
102cdfd0:	e584002c 	str	r0, [r4, #44]	; 0x2c
102cdfd4:	e59f3018 	ldr	r3, [pc, #24]	; 102cdff4 <Ql_UART_GetPinStatus+0x58>
102cdfd8:	e1a00005 	mov	r0, r5
102cdfdc:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
102cdfe0:	e1a01006 	mov	r1, r6
102cdfe4:	e12fff33 	blx	r3
102cdfe8:	e8bd8070 	pop	{r4, r5, r6, pc}
102cdfec:	e59f000c 	ldr	r0, [pc, #12]	; 102ce000 <Ql_UART_GetPinStatus+0x64>
102cdff0:	e8bd8070 	pop	{r4, r5, r6, pc}
102cdff4:	f03d3084 	.word	0xf03d3084
102cdff8:	f03d2358 	.word	0xf03d2358
102cdffc:	102cfa6a 	.word	0x102cfa6a
102ce000:	ffffd8f0 	.word	0xffffd8f0

Disassembly of section .text.Ql_UART_SendEscap:

102ce004 <Ql_UART_SendEscap>:
102ce004:	e92d4038 	push	{r3, r4, r5, lr}
102ce008:	e59f4044 	ldr	r4, [pc, #68]	; 102ce054 <Ql_UART_SendEscap+0x50>
102ce00c:	e1a05000 	mov	r5, r0
102ce010:	e5943034 	ldr	r3, [r4, #52]	; 0x34
102ce014:	e3530000 	cmp	r3, #0
102ce018:	1a000006 	bne	102ce038 <Ql_UART_SendEscap+0x34>
102ce01c:	e59f3034 	ldr	r3, [pc, #52]	; 102ce058 <Ql_UART_SendEscap+0x54>
102ce020:	e59f0034 	ldr	r0, [pc, #52]	; 102ce05c <Ql_UART_SendEscap+0x58>
102ce024:	e5933000 	ldr	r3, [r3]
102ce028:	e12fff33 	blx	r3
102ce02c:	e3500000 	cmp	r0, #0
102ce030:	0a000005 	beq	102ce04c <Ql_UART_SendEscap+0x48>
102ce034:	e5840034 	str	r0, [r4, #52]	; 0x34
102ce038:	e59f3014 	ldr	r3, [pc, #20]	; 102ce054 <Ql_UART_SendEscap+0x50>
102ce03c:	e1a00005 	mov	r0, r5
102ce040:	e5933034 	ldr	r3, [r3, #52]	; 0x34
102ce044:	e12fff33 	blx	r3
102ce048:	e8bd8038 	pop	{r3, r4, r5, pc}
102ce04c:	e59f000c 	ldr	r0, [pc, #12]	; 102ce060 <Ql_UART_SendEscap+0x5c>
102ce050:	e8bd8038 	pop	{r3, r4, r5, pc}
102ce054:	f03d3084 	.word	0xf03d3084
102ce058:	f03d2358 	.word	0xf03d2358
102ce05c:	102cfa94 	.word	0x102cfa94
102ce060:	ffffd8f0 	.word	0xffffd8f0
